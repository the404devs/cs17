/*Interactive Course Simulator: Computer Science 2017
*June 15th, 2017
*By Kevin, Jatin and Owen
*This game serves to emulate the experience of the grade 11 computer science course

TITLE SCREEN CODE
***************************************************************************************
using System;
using System.Drawing;
using System.Drawing.Text;
using System.IO;
using System.Runtime.InteropServices;
using System.Threading;
using System.Windows.Forms;

namespace prjICS
{
    public partial class TitleScreen : Form
    {
        /************
        **Variables**
        ************/

        public static String playerName = "";//player's name
        public static Boolean loadLastGame = false;//if you have a save file

        /************
        **Functions**
        ************/

        void textScroll(int milliseconds, string text, Label label)//scrolls the input text at the speed of the inputed number of milliseconds. this is assigned to an inputed label
        {
            label.Text = "";//resets the label to have no string
            for (int x = 0; x < text.Length; x++)//for loop to gain each character from the input string and add it to the label with a delay. this causes the text scroll effect.
            {
                String character = text.Substring(x, 1);//gets the character at the position of the number of iterations the for loop had gone through
                label.Text += character;//adds the character to the label string
                Thread.Sleep(milliseconds);//delay
                label.Update();//updates screen
            }
        }

        void setFont()
        {
            PrivateFontCollection pfc = new PrivateFontCollection();//variable for the font file
            pfc.AddFontFile("acme_explosive.TTF");//font file
            foreach(Control c in Controls)//cycles through the diffrent contols and sets the font
            {
                c.Font = new Font(pfc.Families[0], c.Font.Size - 4);
            }            
        }

        public TitleScreen()
        {
            InitializeComponent();
        }

        private void lblStart_Click(object sender, EventArgs e)
        {
            /*This section sets the playerName variable to 
             * whatever the user inputted, then loads the game 
             * (Form1) and hides the name input window (Form2).*/

            playerName = txtName.Text;//gets the player name from txtName.Text;

            Classroom frm = new Classroom();//changes to the classroom form
            frm.Show();
            this.Hide();
        }

        private void lblHelp_Click(object sender, EventArgs e)
        {            
            /*HelpMenu frm = new HelpMenu();
            frm.Show();
            this.Hide();*/

            SebnicMenu frm = new SebnicMenu();//changes to the help form
            frm.Show();
            this.Hide();
        }

        private void Menu_Shown(object sender, EventArgs e)
        {
            setFont();//sets the font of the form
            lblTitle.Text = "";
            textScroll(40, "Interactive Course Simulator: Computer Science 2017", lblTitle);//scrolls the title screen text

            lblNew.Visible = true;//turns on the controls of the form
            lblLoad.Visible = true;
            lblHelp.Visible = true;     
        }

        private void txtName_TextChanged(object sender, EventArgs e)
        {
            if (txtName.Text.Length > 15)//limits your name to 15 characters
            {
                txtName.Text = txtName.Text.Remove(txtName.Text.Length - 1, 1);//removes the last character of the string
            }

            if (txtName.Text!="")//turns on the start game button when txt.Name does not equal to a blank string
            {
                lblStart.Visible = true;
                lblWarning.Visible = true;
            }
            else//otherwise, it will not
            {
                lblStart.Visible = false;
                lblWarning.Visible = false;
            }
        }

        private void lblNew_Click(object sender, EventArgs e)
        {
            loadLastGame = false;//sets loadLastGame to false so when the classroom loads, it does not load your save file
            lblNamePrompt.Visible = true;//this makes the namePrompt label visible
            lblNamePrompt.Text = "";//resets the namePrompt label to a blank string
            textScroll(40, "Enter Your Name:", lblNamePrompt);//scrolls the enter name text
            txtName.Visible = true;//makes the textbox for the input of your name visible
        }

        private void lblLoad_Click(object sender, EventArgs e)
        {
            if (File.Exists("data.txt"))//checks if data.txt exists in the files
            {
                loadLastGame = true;//sets loadLastGame to true so when the classroom loads, it loads your save file

                Classroom frm = new Classroom();//opens the classroom form
                frm.Show();
                this.Hide();
            }
            else
            {
                lblNoSave.Visible = true;//makes the noSave label visible. (shows that you have no save file)
            }
           

        }
    }
}
TEST CODE 
******************************************************************************************
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace prjICS
{
    public partial class Test : Form
    {
        //Basicly a copy and paste of the lesson form except for minor changes. Any changes will be documented. Otherwise, it is already documented in the lesson form.

        /************
        **Variables**
        ************/

        public static int rightAnswers = 0;
        int question = 1;

        /************
        **Functions**
        ************/

        void correctAnswer()
        {
            MessageBox.Show("Correct");
            rightAnswers++;
            question++;
            if (question >= 11)//checks if you went through all 10 questions
            {
                TaskEnd frm = new TaskEnd();
                frm.Show();
                this.Hide();
            }
            else
            {
                loadQuestion(SebnicMenu.unitTestSelected, question);
            }
        }

        void wrongAnswer()
        {
            MessageBox.Show("Incorrect");
            question++;
            if (question >= 11)//checks if you went through all 10 questions
            {
                TaskEnd frm = new TaskEnd();
                frm.Show();
                this.Hide();
            }
            else
            {
                loadQuestion(SebnicMenu.unitTestSelected, question);
            }
        }

        void uncheckButtons()
        {
            rb1.Checked = false;
            rb2.Checked = false;
            rb3.Checked = false;
            rb4.Checked = false;
        }

        void checkAnswer(RadioButton rb)
        {
            if (rb.Checked == true)
            {
                correctAnswer();
            }
            else
            {
                wrongAnswer();
            }
        }

        void loadQuestion(int unit, int question)//these questions are from the lesson forms.
        {
            if (unit == 1)
            {
                if (question == 1)
                {
                    pbImage.Image = null;
                    lblDialogue.Text = "One of the following is not a programming language";
                    rb1.Text = "C#";
                    rb2.Text = "F#";
                    rb3.Text = "Microsoft Word";//Correct
                    rb4.Text = "Java";
                }
                else if (question == 2)
                {
                    pbImage.Image = null;
                    lblDialogue.Text = "What is your teacher's name?";
                    rb1.Text = "Mr. Goodwin";
                    rb2.Text = "Mr. Krnic";//Correct
                    rb3.Text = "Mr. Hajatri";
                    rb4.Text = "Mr. Cacarovski";
                }
                else if (question == 3)
                {
                    pbImage.Image = null;
                    lblDialogue.Text = "What is code?";
                    rb1.Text = "A secret message sent from one computer to another";
                    rb2.Text = "A set of instructions that tell a computer what to do";//Correct
                    rb3.Text = "Numbers";
                    rb4.Text = "The components inside the computer";
                }
                else if (question == 4)
                {
                    pbImage.Image = null;
                    lblDialogue.Text = "What is the difference between markup and programming languages?";
                    rb1.Text = "Programming determines how something looks, \nmarkup determines how it behaves";
                    rb2.Text = "They are the same";
                    rb3.Text = "Markup determines how something looks, \nprogramming determines how it behaves";//Correct
                    rb4.Text = "A programming language is for robots, \nmarkup languages are for computers.";
                }
                else if (question == 5)
                {
                    pbImage.Image = Properties.Resources.filepaths;
                    lblDialogue.Text = "What is the RELATIVE path from 'D:' to 'Infrastructure'?";
                    rb1.Text = "../Data/Final/Infrastructure";
                    rb2.Text = "Landuse/Shapefiles/Final/Infrastructure";
                    rb3.Text = "Data/Final/Infrastructure";//Correct
                    rb4.Text = "D:/Data/Final/Infrastructure";
                }
                else if (question == 6)
                {
                    pbImage.Image = Properties.Resources.filepaths;
                    lblDialogue.Text = "What is the ABOSLUTE path to 'Posters'?";
                    rb1.Text = "../Maps/Posters";
                    rb2.Text = "D:/Data/Shapefiles/Soils";
                    rb3.Text = "D:/Maps/Posters";//Correct
                    rb4.Text = "../../D:/Data/Posters";
                }
                else if (question == 7)
                {
                    pbImage.Image = null;
                    lblDialogue.Text = "Convert '100101010' from binary to decimal.";
                    rb1.Text = "542";
                    rb2.Text = "562";
                    rb3.Text = "12A";
                    rb4.Text = "298";//Correct
                }
                else if (question == 8)
                {
                    pbImage.Image = null;
                    lblDialogue.Text = "Convert '10010' from decimal to hex.";
                    rb1.Text = "342";
                    rb2.Text = "271A";
                    rb3.Text = "12";//Correct
                    rb4.Text = "FF";
                }
                else if (question == 9)
                {
                    pbImage.Image = Properties.Resources.css;
                    lblDialogue.Text = "In the image to the left, in what colour is the PROPERTY highlighted?";
                    rb1.Text = "Green";
                    rb2.Text = "Orange";//Correct
                    rb3.Text = "Blue";
                    rb4.Text = "Teal";
                }
                else if (question == 10)
                {
                    pbImage.Image = Properties.Resources.css;
                    lblDialogue.Text = "In the image to the left, in what colour is the VALUE highlighted?";
                    rb1.Text = "Green";
                    rb2.Text = "Orange";
                    rb3.Text = "Blue";
                    rb4.Text = "Teal";//Correct
                }
            }
            else if (unit == 2)
            {
                if (question == 1)
                {
                    pbImage.Image = null;
                    lblDialogue.Text = "Properties effect the _____ and _____ of a control";
                    rb1.Text = "Event, Code";
                    rb2.Text = "Authouity, Properties";
                    rb3.Text = "Appearance, Behavior";//Correct
                    rb4.Text = "Memory, Computing";
                }
                else if (question == 2)
                {
                    pbImage.Image = null;
                    lblDialogue.Text = "Properties can be changed during _____ and _____";
                    rb1.Text = "Run Time, Design Time";//Correct
                    rb2.Text = "Launch, Exit";
                    rb3.Text = "Christmas, 1815";
                    rb4.Text = "Noon, Midnight";
                }
                else if (question == 3)
                {
                    pbImage.Image = Properties.Resources.textboxName;
                    lblDialogue.Text = "Given the picture, what is the proper name of the textbox";
                    rb1.Text = "textbox1";
                    rb2.Text = "tbName";
                    rb3.Text = "lblName";
                    rb4.Text = "txtName";//Correct
                }
                else if (question == 4)
                {
                    pbImage.Image = null;
                    lblDialogue.Text = "What variable type does textbox.Text accept?";
                    rb1.Text = "A Boolean";
                    rb2.Text = "An Int";
                    rb3.Text = "A String";//Correct
                    rb4.Text = "A Double";
                }
                else if (question == 5)
                {
                    pbImage.Image = null;
                    lblDialogue.Text = "Code in an if statement is only executed when:";
                    rb1.Text = "The Condition Is False";
                    rb2.Text = "The Condition Is True";//Correct
                    rb3.Text = "The Condition Is Sort Of True";
                    rb4.Text = "It Is Always Executed";
                }
                else if (question == 6)
                {
                    pbImage.Image = null;
                    lblDialogue.Text = "Will the if statement be executed?  If ((10 * 4) / 2 < 17)";
                    rb1.Text = "Yes";
                    rb2.Text = "No";//Correct
                    rb3.Text = "Maybe";
                    rb4.Text = "I'm Stumped";
                }
                else if (question == 7)
                {
                    pbImage.Image = null;
                    lblDialogue.Text = "Will the if statement be executed?  If ((40 * 3) / 2 <= 360 / 6 && 32 – 4 > 63 / 3)";
                    rb1.Text = "Yes";//Correct
                    rb2.Text = "No";
                    rb3.Text = "Maybe";
                    rb4.Text = "I'm Stumped";
                }
                else if (question == 8)
                {
                    pbImage.Image = null;
                    lblDialogue.Text = "Will the code in the if statement be executed?  If ((245 / 5) / 7 == 9 / 3 + 4 || 5 – 2 < 78 – 70 && 96 * 0 + 2 == (5 – 4) * 2)";
                    rb1.Text = "Yes";
                    rb2.Text = "No";//Correct
                    rb3.Text = "Maybe";
                    rb4.Text = "I'm Stumped";
                }
                else if (question == 9)
                {
                    pbImage.Image = null;
                    lblDialogue.Text = "How many times will this for loop iterate: for (int x=7; x<3 ; x -= 1)";
                    rb1.Text = "0 Times";//Correct
                    rb2.Text = "4 Times";
                    rb3.Text = "5 Times";
                    rb4.Text = "Infinite Times";
                }
                else if (question == 10)
                {
                    pbImage.Image = null;
                    lblDialogue.Text = "How many times will this for loop iterate: for (int x=0; x < 2 * 2 * 2 ; x++)";
                    rb1.Text = "4 Times";
                    rb2.Text = "8 Times";//Correct
                    rb3.Text = "2 times";
                    rb4.Text = "Infinite Times";
                }
            }
            else if (unit == 3)
            {
                if (question == 1)
                {
                    pbImage.Image = null;
                    lblDialogue.Text = "What Does PDT Stand for?";
                    rb1.Text = "Programming Data Transfer";
                    rb2.Text = "Point Data Table";
                    rb3.Text = "Problem Definition Table";//this one.
                    rb4.Text = "Pretty Dumb Thing";
                }
                else if (question == 2)
                {
                    pbImage.Image = null;
                    lblDialogue.Text = "What’s the first step in the Software Development Cycle?";
                    rb1.Text = "Create Algorithm";
                    rb2.Text = "Identify the Problem ";//this one
                    rb3.Text = "Implement the Algorithm";
                    rb4.Text = "Maintenance";
                }
                else if (question == 3)
                {
                    pbImage.Image = null;
                    lblDialogue.Text = "What does IPO Stand for?";
                    rb1.Text = "Inside Present Outside";
                    rb2.Text = "Integrated Percentage Output";
                    rb3.Text = "Input Processing Output";//this one
                    rb4.Text = "Industrial Pollution Omitted";
                }
                else if (question == 4)
                {
                    pbImage.Image = null;
                    lblDialogue.Text = "Which column is used for equations?";
                    rb1.Text = "Input";
                    rb2.Text = "Processing";//this one
                    rb3.Text = "Output";
                    rb4.Text = "No equations required.";
                }
                else if (question == 5)
                {
                    pbImage.Image = null;
                    lblDialogue.Text = "In a flowchart, what shape is used for multiple outcomes?";
                    rb1.Text = "Parallelogram";
                    rb2.Text = "Diamond";//this one
                    rb3.Text = " Rectangle";
                    rb4.Text = "Oval";
                }
                else if (question == 6)
                {
                    pbImage.Image = null;
                    lblDialogue.Text = "True or False: Pseudocode is the same as C#.";
                    rb1.Text = " True";
                    rb2.Text = "False";//this one
                    rb3.Text = "random garbage";
                    rb4.Text = "random garbage";
                }
                else if (question == 7)
                {
                    pbImage.Image = null;
                    lblDialogue.Text = "Why is internet piracy considered illegal?";
                    rb1.Text = "It’s considered stealing over the internet.";//this one
                    rb2.Text = "It’s illegal to be a pirate. ARRGH!";
                    rb3.Text = "It is not considered a crime.";
                    rb4.Text = "It is not considered a crime.";
                }
                else if (question == 8)
                {
                    pbImage.Image = null;
                    lblDialogue.Text = "What is the basic definition of hacking?";
                    rb1.Text = "Obtaining cheat codes for video games";
                    rb2.Text = "Gaining unauthorized access to a computer."; ;//this one.
                    rb3.Text = "Stealing someone’s USB.";
                    rb4.Text = "Looking through security cameras.";
                }
                else if (question == 9)
                {
                    pbImage.Image = null;
                    lblDialogue.Text = "Which of these careers can you get into with a degree in Computer Science?";
                    rb1.Text = "Software Engineer.";
                    rb2.Text = "Systems Analyst.";
                    rb3.Text = "Web developer";
                    rb4.Text = "All of the Above.";//this one
                }
                else if (question == 10)
                {
                    pbImage.Image = null;
                    lblDialogue.Text = "What is e-waste?";
                    rb1.Text = "Digitally removing old files from your computer.";
                    rb2.Text = "Throwing out your computer.";
                    rb3.Text = "Re-using components of electronics for future life.";//this one.
                    rb4.Text = "Removing Hard Drive from computer.";
                }
            }
            else if (unit == 4)
            {
                if (question == 1)
                {
                    pbImage.Image = null;
                    lblDialogue.Text = "What does a scope of a variable determine?";
                    rb1.Text = "Its accessibility.";//this one.
                    rb2.Text = "How Large the variable is.";
                    rb3.Text = "The type";
                    rb4.Text = "None of the Above.";
                }
                else if (question == 2)
                {
                    pbImage.Image = null;
                    lblDialogue.Text = "What is a variable's scope normally limited to?";
                    rb1.Text = "Its Value";
                    rb2.Text = "Its Block";//this one
                    rb3.Text = "Whether or not it is a Boolean";
                    rb4.Text = "If it's a int or a double.";
                }
                else if (question == 3)
                {
                    pbImage.Image = null;
                    lblDialogue.Text = "What is Modular Programming?";
                    rb1.Text = "A method for modding games.";
                    rb2.Text = "A method for reusing blocks of code.";//this one
                    rb3.Text = "A method for solving Algorithms.";
                    rb4.Text = "A method to average the sum of numbers.";
                }
                else if (question == 4)
                {
                    pbImage.Image = null;
                    lblDialogue.Text = "What is a benefit of Modular Programming?";
                    rb1.Text = "Efficient programming";
                    rb2.Text = "Code is more readable and easier to understand";
                    rb3.Text = "Smaller file size, therefore faster";
                    rb4.Text = "All of the above.";//this one
                }
                else if (question == 5)
                {
                    pbImage.Image = null;
                    lblDialogue.Text = "Which of these String Functions doesn't exist?";
                    rb1.Text = "Compare";
                    rb2.Text = "Concat";
                    rb3.Text = "ToUpper";
                    rb4.Text = "LowerLetters";//this one
                }
                else if (question == 6)
                {
                    pbImage.Image = null;
                    lblDialogue.Text = "Let's use the word 'Computerized.' Using the function, IndexOf('e',5) will return:";
                    rb1.Text = "1";
                    rb2.Text = "6";//this one
                    rb3.Text = "10";
                    rb4.Text = "e";
                }
                else if (question == 7)
                {//to be added

                }
                else if (question == 8)
                {

                }
                else if (question == 9)
                {

                }
                else if (question == 10)
                {

                }
            }
        }
        public Test()
        {
            InitializeComponent();
        }

        private void Test_Load(object sender, EventArgs e)
        {
            uncheckButtons();
            lblUnitTest.Text = "Unit " + SebnicMenu.unitTestSelected + " Test";//shows what unit test you are being tested on
            lblName.Text = TitleScreen.playerName;
            question = 1;
            rightAnswers = 0;
            loadQuestion(SebnicMenu.unitTestSelected, question);
        }

        private void lblSubmit_Click(object sender, EventArgs e)
        {
            if (SebnicMenu.unitTestSelected == 1)
            {
                if (question == 1)
                {
                    checkAnswer(rb3);
                }
                else if (question == 2)
                {
                    checkAnswer(rb2);
                }
                else if (question == 3)
                {
                    checkAnswer(rb2);
                }
                else if (question == 4)
                {
                    checkAnswer(rb3);
                }
                else if (question == 5)
                {
                    checkAnswer(rb3);
                }
                else if (question == 6)
                {
                    checkAnswer(rb3);
                }
                else if (question == 7)
                {
                    checkAnswer(rb4);
                }
                else if (question == 8)
                {
                    checkAnswer(rb3);
                }
                else if (question == 9)
                {
                    checkAnswer(rb2);
                }
                else if (question == 10)
                {
                    checkAnswer(rb4);
                }
            }
            else if (SebnicMenu.unitTestSelected == 2)
            {
                if (question == 1)
                {
                    checkAnswer(rb3);
                }
                else if (question == 2)
                {
                    checkAnswer(rb1);
                }
                else if (question == 3)
                {
                    checkAnswer(rb4);
                }
                else if (question == 4)
                {
                    checkAnswer(rb3);
                }
                else if (question == 5)
                {
                    checkAnswer(rb2);

                }
                else if (question == 6)
                {
                    checkAnswer(rb2);
                }
                else if (question == 7)
                {
                    checkAnswer(rb1);
                }
                else if (question == 8)
                {
                    checkAnswer(rb2);
                }
                else if (question == 9)
                {
                    checkAnswer(rb1);
                }
                else if (question == 10)
                {
                    checkAnswer(rb2);
                }
            }
            if (SebnicMenu.unitTestSelected == 3)
            {
                if (question == 1)
                {
                    checkAnswer(rb3);
                }
                else if (question == 2)
                {
                    checkAnswer(rb2);
                }
                else if (question == 3)
                {
                    checkAnswer(rb3);
                }
                else if (question == 4)
                {
                    checkAnswer(rb2);
                }
                else if (question == 5)
                {
                    checkAnswer(rb2);
                }
                else if (question == 6)
                {
                    checkAnswer(rb2);
                }
                else if (question == 7)
                {
                    checkAnswer(rb1);
                }
                else if (question == 8)
                {
                    checkAnswer(rb2);
                }
                else if (question == 9)
                {
                    checkAnswer(rb4);
                }
                else if (question == 10)
                {
                    checkAnswer(rb3);
                }
            }
            if (SebnicMenu.unitTestSelected == 4)
            {
                if (question == 1)
                {
                    checkAnswer(rb1);
                }
                else if (question == 2)
                {
                    checkAnswer(rb2);
                }
                else if (question == 3)
                {
                    checkAnswer(rb2);
                }
                else if (question == 4)
                {
                    checkAnswer(rb4);
                }
                else if (question == 5)
                {
                    checkAnswer(rb4);
                }
                else if (question == 6)
                {
                    checkAnswer(rb2);
                }
                else if (question == 7)
                {

                }
                else if (question == 8)
                {

                }
                else if (question == 9)
                {

                }
                else if (question == 10)
                {

                }
            }
            uncheckButtons();
        }
    }
}

TASKEND CODE
***************************************************************************************
using System;
using System.Drawing;
using System.Drawing.Text;
using System.Threading;
using System.Windows.Forms;

namespace prjICS
{
    public partial class TaskEnd : Form
    {

        void textScroll(int milliseconds, string text, Label label)//Same Textscroll from the title screen form. see documentation in that form
        {
            label.Text = "";
            for (int x = 0; x < text.Length; x++)
            {
                String character = text.Substring(x, 1);
                label.Text += character;
                Thread.Sleep(milliseconds);
                label.Update();
            }
        }

        void setFont()//Same setFont from the title screen form. see documentation in that form
        {
            PrivateFontCollection pfc = new PrivateFontCollection();
            pfc.AddFontFile("acme_explosive.TTF");
            foreach (Control c in Controls)
            {
                c.Font = new Font(pfc.Families[0], c.Font.Size - 4);
            }
        }

        public TaskEnd()
        {
            InitializeComponent();
        }

        private void LessonEnd_Shown(object sender, EventArgs e)
        {
            lblLessonEndText.Text = "";
            this.Refresh();
            if (SebnicMenu.lesson == true)//if you did a lesson
            {
                Double rightAnswers = Lesson.rightAnswers;
                Double lessonMark = (rightAnswers / 5) * 100;//calculates your mark
                if (SebnicMenu.lessonNum == 1)//sets what lesson was just attempted
                {
                    SebnicMenu.lesson1Attempted = true;
                }
                else if (SebnicMenu.lessonNum == 2)
                {
                    SebnicMenu.lesson2Attempted = true;
                }
                else if (SebnicMenu.lessonNum == 3)
                {
                    SebnicMenu.lesson3Attempted = true;
                }
                else if (SebnicMenu.lessonNum == 4)
                {
                    SebnicMenu.lesson4Attempted = true;
                }
                else if (SebnicMenu.lessonNum == 5)
                {
                    SebnicMenu.lesson5Attempted = true;
                }
                //textscroll the unit, lesson and your score
                textScroll(30, "Unit " + SebnicMenu.currentUnitTab + " Lesson " + SebnicMenu.lessonNum + " completed!\nYou scored:\n\n" + Lesson.rightAnswers + " out of 5\n" + lessonMark + "%", lblLessonEndText);
            }
            else if (SebnicMenu.test == true)
            {
                Double rightAnswers = Test.rightAnswers;
                Double testMark = (rightAnswers / 10) * 100;//calculates your mark
                //textscroll unit, and score
                textScroll(30, "Unit " + Classroom.unit + " Test completed!\nYou scored:\n\n" + Test.rightAnswers + " out of 10\n" + testMark + "%", lblLessonEndText);
                //resets what lessons have been attempted
                SebnicMenu.lesson1Attempted = false;
                SebnicMenu.lesson2Attempted = false;
                SebnicMenu.lesson3Attempted = false;
                SebnicMenu.lesson4Attempted = false;
                SebnicMenu.lesson5Attempted = false;
            }
         
        }

        private void lblBack_Click(object sender, EventArgs e)
        {
            Classroom.day++;//moves on to the next day
            //shows the clasroom form
            Classroom frm = new Classroom();
            frm.Show();
            this.Hide();
        }
    }
}

SEBNIC MENU CODE 
*********************************************************************************************************
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace prjICS
{
    public partial class SebnicMenu : Form
    {
        /************
        **Variables**
        ************/
        public static int currentUnitTab = 1;//the unit tab that you are on
        public static int lessonNum = 1;//the lesson number you picked
        public static int unitTestSelected = 0;//the unit test number you picked
        public static Boolean lesson1Attempted = false;//*self explanitory
        public static Boolean lesson2Attempted = false;//
        public static Boolean lesson3Attempted = false;//
        public static Boolean lesson4Attempted = false;//
        public static Boolean lesson5Attempted = false;//*
        public static Boolean lesson = false;//if you are doing a lesson
        public static Boolean test = false;//if you are doing a test
        public static Boolean assignment = false;//if you are doing an assignment
        public static int daysBeforeTest = 0;//number of days before a test is manditory

        /************
        **Functions**
        ************/


        /*int dayConvert(int unit, int lesson)
        {
            int day = (unit * 5 - 5) + lesson;
            return day;
        }*/



        /*only pop up a lesson if the previous lesson has been attempted */

        void allVisibilityOff()//turns the visibility off for all lesson, test, and assignment labels, and the tabel panel.
        {
            visibilityOff();
            lblUnit4Test.Visible = false;
            lblUnit3Test.Visible = false;
            lblUnit2Test.Visible = false;
            lblUnit1Test.Visible = false;
            lblUnit2Assignment.Visible = false;
            lblUnit4Assignment.Visible = false;
            tlpTests.Visible = false;
        }

        void visibilityOff()//turns the visibility off for all lesson labels
        {
            lblLesson5.Visible = false;
            lblLesson4.Visible = false;
            lblLesson3.Visible = false;
            lblLesson2.Visible = false;
            lblLesson1.Visible = false;
        }

        void visibilityOn()//turns the visibility on for all lesson labels
        {
            lblLesson5.Visible = true;
            lblLesson4.Visible = true;
            lblLesson3.Visible = true;
            lblLesson2.Visible = true;
            lblLesson1.Visible = true;
        }

        void unboldUnits()//unbold all unit tab labels
        {
            lblUnit1.Font = new Font(lblUnit1.Font, FontStyle.Regular);
            lblUnit2.Font = new Font(lblUnit2.Font, FontStyle.Regular);
            lblUnit3.Font = new Font(lblUnit3.Font, FontStyle.Regular);
            lblUnit4.Font = new Font(lblUnit4.Font, FontStyle.Regular);
        }

        void unitVisibilityCheck()//determines what label should be visible depending on what unit you are on
        {
            if (lesson5Attempted == true)//if lesson 5 has been attempted
            {
                visibilityOn();
                if (Classroom.unit == 4)
                {
                    if (daysBeforeTest != 3)//this lets you do the test and the lessons
                    {
                        lblUnit4Test.Visible = true;
                        tlpTests.Visible = true;
                    }
                    else//this hides everything except for the test
                    {
                        allVisibilityOff();
                        lblUnit4Test.Visible = true;
                        tlpTests.Visible = true;
                    }
                }
                else if (Classroom.unit == 3)
                {
                    if (daysBeforeTest != 3)//this lets you do the test and the lessons
                    {
                        lblUnit3Test.Visible = true;
                        tlpTests.Visible = true;
                    }
                    else//this hides everything except for the test
                    {
                        allVisibilityOff();
                        lblUnit3Test.Visible = true;
                        tlpTests.Visible = true;
                    }
                }
                else if (Classroom.unit == 2)
                {
                    if (daysBeforeTest != 3)//etc..............
                    {
                        lblUnit2Test.Visible = true;
                        tlpTests.Visible = true;
                    }
                    else
                    {
                        allVisibilityOff();
                        lblUnit2Test.Visible = true;
                        tlpTests.Visible = true;
                    }
                }
                else if (Classroom.unit == 1)
                {
                    if (daysBeforeTest != 3)
                    {
                        lblUnit1Test.Visible = true;
                        tlpTests.Visible = true;
                    }
                    else
                    {
                        allVisibilityOff();
                        lblUnit1Test.Visible = true;
                        tlpTests.Visible = true;
                    }
                }
            }
            else if (Classroom.unit == currentUnitTab)//if the unit is equal to the unit tab that you are on
            {

                lessonVisibilityCheck();//checks what lessons should be shown
            }
            else if (Classroom.unit > currentUnitTab)//if the unit is greater than the unit tab that you are on
            {
                visibilityOn();
            }
            else
            {
                visibilityOff();
            }
        }

        void lessonVisibilityCheck()
        {
            allVisibilityOff();
            if (lesson5Attempted == true)
            {
                visibilityOn();
                if (Classroom.unit == 4)//checks what unit you are on and picks what test should be shown
                {
                    if (daysBeforeTest != 3)//shows test with lessons
                    {
                        lblUnit4Test.Visible = true;
                        tlpTests.Visible = true;
                        daysBeforeTest++;//adds to the days before a test
                    }
                    else//shows test without lessons
                    {
                        allVisibilityOff();
                        lblUnit4Test.Visible = true;
                        tlpTests.Visible = true;
                    }
                }
                else if (Classroom.unit == 3)//etc.............
                {
                    if (daysBeforeTest != 3)
                    {
                        lblUnit3Test.Visible = true;
                        tlpTests.Visible = true;
                        daysBeforeTest++;
                    }
                    else
                    {
                        allVisibilityOff();
                        lblUnit3Test.Visible = true;
                        tlpTests.Visible = true;
                    }
                }
                else if (Classroom.unit == 2)
                {
                    if (daysBeforeTest != 3)
                    {
                        lblUnit2Test.Visible = true;
                        tlpTests.Visible = true;
                        daysBeforeTest++;
                    }
                    else
                    {
                        allVisibilityOff();
                        lblUnit2Test.Visible = true;
                        tlpTests.Visible = true;
                    }
                }
                else if (Classroom.unit == 1)
                {
                    if (daysBeforeTest != 3)
                    {
                        lblUnit1Test.Visible = true;
                        tlpTests.Visible = true;
                        daysBeforeTest++;
                    }
                    else
                    {
                        allVisibilityOff();
                        lblUnit1Test.Visible = true;
                        tlpTests.Visible = true;
                    }
                }
            }
            else if (lesson4Attempted == true || currentUnitTab < Classroom.unit)//if lesson4 had been attempted or the current unit tab is less than the actual unit
            {
                visibilityOn();//turn all lesson labels on
            }
            else if (lesson3Attempted == true)//if lesson 3 has been attempted
            {
                lblLesson5.Visible = false;//turns all lesson labels on except for #5
                lblLesson4.Visible = true;
                lblLesson3.Visible = true;
                lblLesson2.Visible = true;
                lblLesson1.Visible = true;
            }
            else if (lesson2Attempted == true)
            {
                lblLesson5.Visible = false;//turns all lesson labels on except for #5, #4
                lblLesson4.Visible = false;
                lblLesson3.Visible = true;
                lblLesson2.Visible = true;
                lblLesson1.Visible = true;
            }
            else if (lesson1Attempted == true)
            {
                lblLesson5.Visible = false;//turns all lesson labels on except for #5, #4 #3
                lblLesson4.Visible = false;
                lblLesson3.Visible = false;
                lblLesson2.Visible = true;
                lblLesson1.Visible = true;
            }
            else
            {
                lblLesson5.Visible = false;//turns all lesson labels off except for #1
                lblLesson4.Visible = false;
                lblLesson3.Visible = false;
                lblLesson2.Visible = false;
                lblLesson1.Visible = true;
            }

        }
        
        public SebnicMenu()
        {
            InitializeComponent();
        }

        private void lblBack_Click(object sender, EventArgs e)
        {
            //sends you to the classroom form
            Classroom frm = new Classroom();
            frm.Show();
            this.Hide();
        }

        private void SebnicMenu_Load(object sender, EventArgs e)
        {
            lblMark.Text = "Current Mark: " + Classroom.courseMark + "%";//shows your current mark
            currentUnitTab = 1;
            lesson = false;
            test = false;
            assignment = false;

            //unit description
            lblDescription.Text = "This unit focuses on basic computer and information science skills. Students identify hardware components, research ergonomic considerations, practise file management skills, access resources through local and wide area networks, and research the evolution of programming languages. They develop skills for success in the computer and information science environment. Students focus on the Computer and Information Science environment; students also examine respect for the environment and wise use of resources from a responsible perspective.";
            lessonVisibilityCheck();//checks what lessons should be visible
        }


        private void lblUnit1_Click(object sender, EventArgs e)
        {
            unboldUnits();//unbolds all unit tabs
            lblUnit1.Font = new Font(lblUnit1.Font, FontStyle.Bold);//makes the unit 1 tab bolded
            currentUnitTab = 1;

            //unit description
            lblDescription.Text = "This unit focuses on basic computer and information science skills. Students identify hardware components, research ergonomic considerations, practise file management skills, access resources through local and wide area networks, and research the evolution of programming languages. They develop skills for success in the computer and information science environment. Students focus on the Computer and Information Science environment; students also examine respect for the environment and wise use of resources from a responsible perspective.";
            unitVisibilityCheck();//determines what label should be visible depending on what unit you are on
            lessonNum = 0;
        }

        private void lblUnit2_Click(object sender, EventArgs e)
        {
            unboldUnits();//etc.....................
            lblUnit2.Font = new Font(lblUnit2.Font, FontStyle.Bold);
            currentUnitTab = 2;
            lblDescription.Text = "This unit focuses on basic programming structures. Students write simple programs, using variable assignment, repetition, and decision structures, and develop effective testing, validating, and documenting skills. They also explore roles of effective communicators and reflective thinkers when following a problem-solving model (e.g., user inputs a series of marks, each value is validated, the average is calculated, and a grade is assigned).";
            unitVisibilityCheck();
            lessonNum = 0;
        }

        private void lblUnit3_Click(object sender, EventArgs e)
        {
            unboldUnits();
            lblUnit3.Font = new Font(lblUnit3.Font, FontStyle.Bold);
            currentUnitTab = 3;
            lblDescription.Text = "This unit focuses on using problem solving strategies in the computer science field as well as investigation into societal issues involving computer technology.  This includes an exploration of careers in computer studies. Students also examine issues surrounding privacy, security, and ethical use of information.";
            unitVisibilityCheck();
            lessonNum = 0;
        }

        private void lblUnit4_Click(object sender, EventArgs e)
        {
            unboldUnits();
            lblUnit4.Font = new Font(lblUnit4.Font, FontStyle.Bold);
            currentUnitTab = 4;
            lblDescription.Text = "This unit focuses on the advanced features of programming. For example students learn about data storage and manipulation. They also write programs that input data from existing files, process the data, and create files for external data storage, following an appropriate problem-solving model (e.g., Create a data file containing employee information including hours worked and rate of pay. Read from the file, compute, display, and write to a new file the gross pay for each employee.). In addition modular programming is introduced. Data structures such as arrays are taught. Common algorithms like the Bubble Sort are examined. Students are expected to incorporate as many of these more complex programming features in their final summative project.";
            unitVisibilityCheck();
            lessonNum = 0;
        }

        private void lblLesson1_Click(object sender, EventArgs e)
        {
            //lesson # for lesson form
            lessonNum = 1;
            lesson = true;
            //opens the lesson form
            Lesson frm = new Lesson();
            frm.Show();
            this.Hide();
        }

        private void lblLesson2_Click(object sender, EventArgs e)
        {
            //lesson # for lesson form
            lessonNum = 2;
            lesson = true;
            //opens the lesson form
            Lesson frm = new Lesson();
            frm.Show();
            this.Hide();
        }

        private void lblLesson3_Click(object sender, EventArgs e)
        {
            //lesson # for lesson form
            lessonNum = 3;
            lesson = true;
            //opens the lesson form
            Lesson frm = new Lesson();
            frm.Show();
            this.Hide();
        }

        private void lblLesson4_Click(object sender, EventArgs e)
        {
            //lesson # for lesson form
            lessonNum = 4;
            lesson = true;
            //opens the lesson form
            Lesson frm = new Lesson();
            frm.Show();
            this.Hide();
        }

        private void lblLesson5_Click(object sender, EventArgs e)
        {
            //lesson # for lesson form
            lessonNum = 5;
            lesson = true;
            //opens the lesson form
            Lesson frm = new Lesson();
            frm.Show();
            this.Hide();
        }


        private void lblUnit1Test_Click(object sender, EventArgs e)
        {
            daysBeforeTest = 0;
            unitTestSelected = 1;
            test = true;
            //opens the test form
            Test frm = new Test();
            frm.Show();
            this.Hide();
            
        }

        private void lblFinal_Click(object sender, EventArgs e)
        {
            currentUnitTab = 5;
        }

        private void lblUnit2Assignment_Click(object sender, EventArgs e)
        {

        }

        private void lblUnit3Test_Click(object sender, EventArgs e)
        {
            daysBeforeTest = 0;
            unitTestSelected = 3;
            test = true;
            //opens the test form
            Test frm = new Test();
            frm.Show();
            this.Hide();
        }

        private void lblUnit4Assignment_Click(object sender, EventArgs e)
        {

        }

        private void lblUnit4Test_Click(object sender, EventArgs e)
        {
            daysBeforeTest = 0;
            unitTestSelected = 4;
            test = true;
            //opens the test form
            Test frm = new Test();
            frm.Show();
            this.Hide();
        }

        private void lblUnit2Test_Click(object sender, EventArgs e)
        {
            daysBeforeTest = 0;
            unitTestSelected = 2;
            test = true;
            //opens the test form
            Test frm = new Test();
            frm.Show();
            this.Hide();
        }

        //For Unit Test Events: make sure you include this daysBeforeTest = 0;
        //This will reset the number of days before a test is required to be taken
    }
}

LESSON CODE
*************************************************************
using System;
using System.Windows.Forms;

namespace prjICS
{
    public partial class Lesson : Form
    {
        /************
        **Variables**
        ************/
        public static int rightAnswers = 0;//number of correct answers
        int question = 1;//determines what question you are on

        /************
        **Functions**
        ************/

        void correctAnswer()//on correct answer
        {
            MessageBox.Show("Correct");
            rightAnswers++;
            question++;
            if (question >= 6)//checks if you went through all 5 questions
            {
                //changes form to the TaskEnd form
                TaskEnd frm = new TaskEnd();
                frm.Show();
                this.Hide();
            }            
            else
            {
                //this function will load the next question
                loadQuestion(SebnicMenu.currentUnitTab, SebnicMenu.lessonNum, question);
            }
        }

        void wrongAnswer()//on wrong answer
        {
            MessageBox.Show("Incorrect");
            question++;
            if (question >= 6)//CheckState if you went through all 5 questions
            {
                //changes form to the TaskEnd form
                TaskEnd frm = new TaskEnd();
                frm.Show();
                this.Hide();
            }
            else
            {
                //this function will load the next question
                loadQuestion(SebnicMenu.currentUnitTab, SebnicMenu.lessonNum, question);
            }
        }

        void uncheckButtons()//unchecks all the radio buttons
        {
            rb1.Checked = false;
            rb2.Checked = false;
            rb3.Checked = false;
            rb4.Checked = false;
        }

        void checkAnswer(RadioButton rb)//this function checks if the radio button parameter had been checked or not
        {
            if (rb.Checked == true)
            {
                //function for the correct answer
                correctAnswer();
            }
            else
            {
                //function for the wrong answer
                wrongAnswer();
            }
        }

        void loadQuestion(int unit, int lesson, int question)
        {
            //lesson = 3;
            //question = 4;
            uncheckButtons();
            if (unit == 1)//this function will load the next question depending on the unit number, the lesson selected, and what question it is.
            {
                if (lesson == 1)//UNIT 1 LESSON 1
                {
                    if (question == 1)//UNIT 1 LESSON 1 QUESTION 1
                    {
                        pbImage.Image = null;
                        lblDialogue.Text = "What will you NOT be learning in Computer Science?";
                        rb1.Text = "Basic programming with C#, HTML";
                        rb2.Text = "How to build a computer";//Correct
                        rb3.Text = "Ethical use of computers";
                        rb4.Text = "Problem solving, practical applications of computers in society.";
                    }
                    else if (question == 2)//UNIT 1 LESSON 1 QUESTION 2
                    {
                        pbImage.Image = null;
                        lblDialogue.Text = "One of the following is not a programming language";
                        rb1.Text = "C#";
                        rb2.Text = "F#";
                        rb3.Text = "Microsoft Word";//Correct
                        rb4.Text = "Java";
                    }
                    else if (question == 3)//UNIT 1 LESSON 1 QUESTION 3
                    {
                        pbImage.Image = null;
                        lblDialogue.Text = "How much of your course mark is your final project worth?";
                        rb1.Text = "15%";//Correct
                        rb2.Text = "100%";
                        rb3.Text = "30%";
                        rb4.Text = "5%";
                    }
                    else if (question == 4)//UNIT 1 LESSON 1 QUESTION 4
                    {
                        pbImage.Image = null;
                        lblDialogue.Text = "What is your teacher's name?";
                        rb1.Text = "Mr. Goodwin";
                        rb2.Text = "Mr. Krnic";//Correct
                        rb3.Text = "Mr. Hajatri";
                        rb4.Text = "Mr. Cacarovski";
                    }
                    else if (question == 5)//UNIT 1 LESSON 1 QUESTION 5
                    {
                        pbImage.Image = null;
                        lblDialogue.Text = "Are you going to do well in this course?";
                        rb1.Text = "Yes";//Correct
                        rb2.Text = "No";
                        rb3.Text = "No";
                        rb4.Text = "No";
                    }
                }
                else if (lesson == 2)//UNIT 1 LESSON 2
                {
                    if (question == 1)//UNIT 1 LESSON 2 QUESTION 1
                    {
                        pbImage.Image = null;
                        lblDialogue.Text = "What is code?";
                        rb1.Text = "A secret message sent from one computer to another";
                        rb2.Text = "A set of instructions that tell a computer what to do";//Correct
                        rb3.Text = "Numbers";
                        rb4.Text = "The components inside the computer";
                    }
                    else if (question == 2)//UNIT 1 LESSON 2 QUESTION 2
                    {
                        pbImage.Image = null;
                        lblDialogue.Text = "What is the difference between markup and programming languages?";
                        rb1.Text = "Programming determines how something looks, \nmarkup determines how it behaves";
                        rb2.Text = "They are the same";
                        rb3.Text = "Markup determines how something looks, \nprogramming determines how it behaves";//Correct
                        rb4.Text = "A programming language is for robots, \nmarkup languages are for computers.";
                    }
                    else if (question == 3)//UNIT 1 LESSON 2 QUESTION 3
                    {
                        pbImage.Image = null;
                        lblDialogue.Text = "What HTML tag will insert a horizontal line?";
                        rb1.Text = "<hr>";//Correct
                        rb2.Text = "<br>";
                        rb3.Text = "<h2>";
                        rb4.Text = "<line>";
                    }
                    else if (question == 4)//UNIT 1 LESSON 2 QUESTION 4
                    {
                        pbImage.Image = null;
                        lblDialogue.Text = "What HTML tag will create a link to another file?";
                        rb1.Text = "<link>";
                        rb2.Text = "<img>";
                        rb3.Text = "<b>";
                        rb4.Text = "<a>";//Correct
                    }
                    else if (question == 5)//UNIT 1 LESSON 2 QUESTION 5
                    {
                        pbImage.Image = null;
                        lblDialogue.Text = "What file extension is given to webpage files?";
                        rb1.Text = ".docx";
                        rb2.Text = ".exe";
                        rb3.Text = ".html";//Correct
                        rb4.Text = ".bat";
                    }
                }
                else if (lesson == 3)//UNIT 1 LESSON 3
                {
                    if (question == 1)//UNIT 1 LESSON 3 QUESTION 1
                    {
                        pbImage.Image = Properties.Resources.filepaths;
                        lblDialogue.Text = "What is the difference between relative and absolute paths?";
                        rb1.Text = "Absolute paths always start with the drive letter (C:/, D:/, etc.)";
                        rb2.Text = "Relative paths always start with the drive letter (C:/, D:/, etc.)";
                        rb3.Text = "Relative paths are relative to the file accepting the path";//Correct
                        rb4.Text = "Absolute paths are relative to the file accepting the path";
                    }
                    else if (question == 2)//UNIT 1 LESSON 3 QUESTION 2
                    {
                        pbImage.Image = Properties.Resources.filepaths;
                        lblDialogue.Text = "What is the RELATIVE path from 'Base' to 'Soils'?";
                        rb1.Text = "../Shapefiles/Soils";//Correct
                        rb2.Text = "D:/Data/Shapefiles/Soils";
                        rb3.Text = "D:/Maps/Posters/Soils";
                        rb4.Text = "../../Shapefiles/Soils";
                    }
                    else if (question == 3)//UNIT 1 LESSON 3 QUESTION 3
                    {
                        pbImage.Image = Properties.Resources.filepaths;
                        lblDialogue.Text = "What is the ABOSLUTE path to 'Posters'?";
                        rb1.Text = "../Maps/Posters";//Correct
                        rb2.Text = "D:/Data/Shapefiles/Soils";
                        rb3.Text = "D:/Maps/Posters";
                        rb4.Text = "../../D:/Data/Posters";
                    }
                    else if (question == 4)//UNIT 1 LESSON 3 QUESTION 4
                    {
                        pbImage.Image = Properties.Resources.filepaths;
                        lblDialogue.Text = "What is the ABOSLUTE path to 'Posters'?";
                        rb1.Text = "../Maps/Posters";
                        rb2.Text = "D:/Data/Shapefiles/Soils";
                        rb3.Text = "D:/Maps/Posters";//Correct
                        rb4.Text = "../../D:/Data/Posters";
                    }
                    else if (question == 5)//UNIT 1 LESSON 3 QUESTION 5
                    {
                        pbImage.Image = Properties.Resources.filepaths;
                        lblDialogue.Text = "What is the RELATIVE path from 'D:' to 'Infrastructure'?";
                        rb1.Text = "../Data/Final/Infrastructure";
                        rb2.Text = "Landuse/Shapefiles/Final/Infrastructure";
                        rb3.Text = "Data/Final/Infrastructure";//Correct
                        rb4.Text = "D:/Data/Final/Infrastructure";
                    }
                }
                else if (lesson == 4)//UNIT 1 LESSON 4
                {
                    if (question == 1)//UNIT 1 LESSON 4 QUESTION 1
                    {
                        pbImage.Image = null;
                        lblDialogue.Text = "How many digits are there in the binary number system?";
                        rb1.Text = "10";
                        rb2.Text = "2";//Correct
                        rb3.Text = "1";
                        rb4.Text = "11";
                    }
                    else if (question == 2)//UNIT 1 LESSON 4 QUESTION 2
                    {
                        pbImage.Image = null;
                        lblDialogue.Text = "How many digits are there in the hexadecimal number system?";
                        rb1.Text = "6";
                        rb2.Text = "2";
                        rb3.Text = "15";
                        rb4.Text = "18";//Correct
                    }
                    else if (question == 3)//UNIT 1 LESSON 4 QUESTION 3
                    {
                        pbImage.Image = null;
                        lblDialogue.Text = "Convert '9C' from hex to binary.";
                        rb1.Text = "10011100";//Correct
                        rb2.Text = "156";
                        rb3.Text = "10011101";
                        rb4.Text = "912";
                    }
                    else if (question == 4)//UNIT 1 LESSON 4 QUESTION 4
                    {
                        pbImage.Image = null;
                        lblDialogue.Text = "Convert '100101010' from binary to decimal.";
                        rb1.Text = "542";
                        rb2.Text = "562";
                        rb3.Text = "12A";
                        rb4.Text = "298";//Correct
                    }
                    else if (question == 5)//UNIT 1 LESSON 4 QUESTION 5
                    {
                        pbImage.Image = null;
                        lblDialogue.Text = "Convert '10010' from decimal to hex.";
                        rb1.Text = "342";
                        rb2.Text = "271A";//Correct
                        rb3.Text = "12";
                        rb4.Text = "FF";
                    }
                }
                else if (lesson == 5)//UNIT 1 LESSON 5
                {
                    if (question == 1)//UNIT 1 LESSON 5 QUESTION 1
                    {

                        pbImage.Image = Properties.Resources.css;
                        lblDialogue.Text = "What html tag is used to embed CSS?";
                        rb1.Text = "<body>";
                        rb2.Text = "<style>";//Correct
                        rb3.Text = "<css>";
                        rb4.Text = "<embed>";

                    }
                    else if (question == 2)//UNIT 1 LESSON 5 QUESTION 2
                    {
                        pbImage.Image = Properties.Resources.css;
                        lblDialogue.Text = "In the image to the left, in what colour is the SELECTOR highlighted?";
                        rb1.Text = "Green";//Correct
                        rb2.Text = "Orange";
                        rb3.Text = "Blue";
                        rb4.Text = "Teal";
                    }
                    else if (question == 3)//UNIT 1 LESSON 5 QUESTION 3
                    {
                        pbImage.Image = Properties.Resources.css;
                        lblDialogue.Text = "In the image to the left, in what colour is the PROPERTY highlighted?";
                        rb1.Text = "Green";
                        rb2.Text = "Orange";//Correct
                        rb3.Text = "Blue";
                        rb4.Text = "Teal";
                    }
                    else if (question == 4)//UNIT 1 LESSON 5 QUESTION 4
                    {
                        pbImage.Image = Properties.Resources.css;
                        lblDialogue.Text = "In the image to the left, in what colour is the VALUE highlighted?";
                        rb1.Text = "Green";
                        rb2.Text = "Orange";
                        rb3.Text = "Blue";
                        rb4.Text = "Teal";//Correct
                    }
                    else if (question == 5)//UNIT 1 LESSON 5 QUESTION 5
                    {
                        pbImage.Image = Properties.Resources.css;
                        lblDialogue.Text = "In the image at left, what HTML object is being affected by the CSS code?";
                        rb1.Text = "Header";//Correct
                        rb2.Text = "Paragraph";
                        rb3.Text = "Image";
                        rb4.Text = "Link";
                    }
                }
            }
            else if (unit == 2)
            {
                if (lesson == 1)
                {
                    if (question == 1)//UNIT 2 LESSON 1 QUESTION 1
                    {
                        pbImage.Image = Properties.Resources.solutionsExplorer;
                        lblDialogue.Text = "Given the picture, what is the name of this component?";
                        rb1.Text = "Properties Window";
                        rb2.Text = "Solutions Explorer";//Correct
                        rb3.Text = "Toolbox";
                        rb4.Text = "Form";
                    }
                    else if (question == 2)//UNIT 2 LESSON 1 QUESTION 2
                    {
                        pbImage.Image = null;
                        lblDialogue.Text = "Properties effect the _____ and _____ of a control";
                        rb1.Text = "Event, Code";
                        rb2.Text = "Authouity, Properties";
                        rb3.Text = "Appearance, Behavior";//Correct
                        rb4.Text = "Memory, Computing";
                    }
                    else if (question == 3)//UNIT 2 LESSON 1 QUESTION 3
                    {
                        pbImage.Image = null;
                        lblDialogue.Text = "Properties can be changed during _____ and _____";
                        rb1.Text = "Run Time, Design Time";//Correct
                        rb2.Text = "Launch, Exit";
                        rb3.Text = "Christmas, 1815";
                        rb4.Text = "Noon, Midnight";
                    }
                    else if (question == 4)//UNIT 2 LESSON 1 QUESTION 4
                    {
                        pbImage.Image = null;
                        lblDialogue.Text = "What property will make a control invisible?";
                        rb1.Text = "Locked";
                        rb2.Text = "Font";
                        rb3.Text = "Visible";//Correct
                        rb4.Text = "Enabled";
                    }
                    else if (question == 5)//UNIT 2 LESSON 1 QUESTION 5
                    {
                        pbImage.Image = null;
                        lblDialogue.Text = "To execute code, the code must be written in _____";
                        rb1.Text = "Visual Basic";
                        rb2.Text = "A Design Window";
                        rb3.Text = "Visual Studio";
                        rb4.Text = "An Event Function";//Correct
                    }
                }
                else if (lesson == 2)
                {
                    if (question == 1)//UNIT 2 LESSON 2 QUESTION 1
                    {
                        pbImage.Image = null;
                        lblDialogue.Text = "What is not a variable type?: string int boolean double random…";
                        rb1.Text = "String";
                        rb2.Text = "Double";
                        rb3.Text = "Font";//Correct
                        rb4.Text = "Random";
                    }
                    else if (question == 2)//UNIT 2 LESSON 2 QUESTION 2
                    {
                        pbImage.Image = Properties.Resources.textboxName;
                        lblDialogue.Text = "Given the picture, what is the proper name of the textbox";
                        rb1.Text = "textbox1";
                        rb2.Text = "tbName";
                        rb3.Text = "lblName";
                        rb4.Text = "txtName";//Correct
                    }
                    else if (question == 3)//UNIT 2 LESSON 2 QUESTION 3
                    {
                        pbImage.Image = null;
                        lblDialogue.Text = "What can be used to change a variable type to a different type?";
                        rb1.Text = "An Event";
                        rb2.Text = "A Loop";
                        rb3.Text = "A Function";
                        rb4.Text = "The Convert Object";//Correct
                    }
                    else if (question == 4)//UNIT 2 LESSON 2 QUESTION 4
                    {
                        pbImage.Image = null;
                        lblDialogue.Text = "What variable type does textbox.Text accept?";
                        rb1.Text = "A Boolean";//Correct
                        rb2.Text = "An Int";
                        rb3.Text = "A String";
                        rb4.Text = "A Double";
                    }
                    else if (question == 5)//UNIT 2 LESSON 2 QUESTION 5
                    {
                        pbImage.Image = null;
                        lblDialogue.Text = "What variable type does radiobutton.Checked accept?";
                        rb1.Text = "A Boolean";
                        rb2.Text = "An Int";
                        rb3.Text = "A String";//Correct
                        rb4.Text = "A Double";
                    }
                }
                else if (lesson == 3)//UNIT 2 LESSON 3 QUESTION 1
                {
                    if (question == 1)
                    {
                        pbImage.Image = null;
                        lblDialogue.Text = "Code in an if statement is only executed when:";
                        rb1.Text = "The Condition Is False";
                        rb2.Text = "The Condition Is True";//Correct
                        rb3.Text = "The Condition Is Sort Of True";
                        rb4.Text = "It Is Always Executed";
                    }
                    else if (question == 2)//UNIT 2 LESSON 3 QUESTION 2
                    {
                        pbImage.Image = null;
                        lblDialogue.Text = "Will the if statement be executed?  If (20 – 2 == 18)";
                        rb1.Text = "Yes";//Correct
                        rb2.Text = "No";
                        rb3.Text = "Maybe";
                        rb4.Text = "I'm Stumped";
                    }
                    else if (question == 3)//UNIT 2 LESSON 3 QUESTION 3
                    {
                        pbImage.Image = null;
                        lblDialogue.Text = "Will the if statement be executed?  If (25 * 5 >= 100)";
                        rb1.Text = "Yes";//Correct
                        rb2.Text = "No";
                        rb3.Text = "Maybe";
                        rb4.Text = "I'm Stumped";
                    }
                    else if (question == 4)//UNIT 2 LESSON 3 QUESTION 4
                    {
                        pbImage.Image = null;
                        lblDialogue.Text = "Will the if statement be executed?  If ((10 * 4) / 2 < 17)";
                        rb1.Text = "Yes";
                        rb2.Text = "No";//Correct
                        rb3.Text = "Maybe";
                        rb4.Text = "I'm Stumped";
                    }
                    else if (question == 5)//UNIT 2 LESSON 3 QUESTION 5
                    {
                        pbImage.Image = null;
                        lblDialogue.Text = "Will the if statement be executed?  If (20 + 30 – 10 + 40 != 35 -15 + 55 + 5)";
                        rb1.Text = "Yes";
                        rb2.Text = "No";//Correct
                        rb3.Text = "Maybe";
                        rb4.Text = "I'm Stumped";
                    }
                }
                else if (lesson == 4)//UNIT 2 LESSON 4 QUESTION 1
                {
                    if (question == 1)
                    {
                        pbImage.Image = null;
                        lblDialogue.Text = "Will the if statement be executed?  If(1 + 4 == 5 || 15 – 5 != 10)";
                        rb1.Text = "Yes";//Correct
                        rb2.Text = "No";
                        rb3.Text = "Maybe";
                        rb4.Text = "I'm Stumped";
                    }
                    else if (question == 2)//UNIT 2 LESSON 4 QUESTION 2
                    {
                        pbImage.Image = null;
                        lblDialogue.Text = "Will the if statement be executed?  If ((30 - 25) * 6 >= 35 || 20 + (2 * 4) == 26)";
                        rb1.Text = "Yes";
                        rb2.Text = "No";//Correct
                        rb3.Text = "Maybe";
                        rb4.Text = "I'm Stumped";
                    }
                    else if (question == 3)//UNIT 2 LESSON 4 QUESTION 3
                    {
                        pbImage.Image = null;
                        lblDialogue.Text = "Will the if statement be executed?  If ((4 * (2-2) == 24 – (12 * 2) && 69 – 69 + 1 == 2 – 2)";
                        rb1.Text = "Yes";
                        rb2.Text = "No";//Correct
                        rb3.Text = "Maybe";
                        rb4.Text = "I'm Stumped";
                    }
                    else if (question == 4)//UNIT 2 LESSON 4 QUESTION 4
                    {
                        pbImage.Image = null;
                        lblDialogue.Text = "Will the if statement be executed?  If ((40 * 3) / 2 <= 360 / 6 && 32 – 4 > 63 / 3)";
                        rb1.Text = "Yes";//Correct
                        rb2.Text = "No";
                        rb3.Text = "Maybe";
                        rb4.Text = "I'm Stumped";
                    }
                    else if (question == 5)//UNIT 2 LESSON 4 QUESTION 5
                    {
                        pbImage.Image = null;
                        lblDialogue.Text = "Will the code in the if statement be executed?  If ((245 / 5) / 7 == 9 / 3 + 4 || 5 – 2 < 78 – 70 && 96 * 0 + 2 == (5 – 4) * 2)";
                        rb1.Text = "Yes";
                        rb2.Text = "No";//Correct
                        rb3.Text = "Maybe";
                        rb4.Text = "I'm Stumped";
                    }
                }
                else if (lesson == 5)
                {
                    if (question == 1)//UNIT 2 LESSON 5 QUESTION 1
                    {
                        pbImage.Image = null;
                        lblDialogue.Text = "How many times will this for loop iterate for: (int x=0; x<3 ; x++) 3 times";
                        rb1.Text = "3 Times";//Correct
                        rb2.Text = "2 Times";
                        rb3.Text = "6 Times";
                        rb4.Text = "Infinite Times";
                    }
                    else if (question == 2)//UNIT 2 LESSON 5 QUESTION 2
                    {
                        pbImage.Image = null;
                        lblDialogue.Text = "How many times will this for loop iterate for: (int x=0; x != 7; x += 2)";
                        rb1.Text = "3 Times";
                        rb2.Text = "4 Times";
                        rb3.Text = "1 Time";
                        rb4.Text = "Infinite Times";//Correct
                    }
                    else if (question == 3)//UNIT 2 LESSON 5 QUESTION 3
                    {
                        pbImage.Image = null;
                        lblDialogue.Text = "How many times will this for loop iterate for: (int x=2; x * 5 <= 10 ; x++)";
                        rb1.Text = "2 Times";
                        rb2.Text = "0 Times";
                        rb3.Text = "1 Time";//Correct
                        rb4.Text = "Infinite Times";
                    }
                    else if (question == 4)//UNIT 2 LESSON 5 QUESTION 4
                    {
                        pbImage.Image = null;
                        lblDialogue.Text = "How many times will this for loop iterate: for (int x=0; x < 2 * 2 * 2 ; x++)";
                        rb1.Text = "4 Times";
                        rb2.Text = "8 Times";//Correct
                        rb3.Text = "2 times";
                        rb4.Text = "Infinite Times";
                    }
                    else if (question == 5)//UNIT 2 LESSON 5 QUESTION 5
                    {
                        pbImage.Image = null;
                        lblDialogue.Text = "How many times will this for loop iterate: for (int x=7; x<3 ; x -= 1)";
                        rb1.Text = "0 Times";//Correct
                        rb2.Text = "4 Times";
                        rb3.Text = "5 Times";
                        rb4.Text = "Infinite Times";
                    }
                }
            }
            else if (unit == 3)
            {
                if (lesson == 1)//UNIT 3 LESSON 1
                {
                    if (question == 1)//UNIT 3 LESSON 1 QUESTION 1
                    {
                        pbImage.Image = null;
                        lblDialogue.Text = "What Does PDT Stand for?";
                        rb1.Text = "Programming Data Transfer";
                        rb2.Text = "Point Data Table";
                        rb3.Text = "Problem Definition Table";//this one.
                        rb4.Text = "Pretty Dumb Thing";

                    }
                    else if (question == 2)//UNIT 3 LESSON 1 QUESTION 2
                    {
                        pbImage.Image = null;
                        lblDialogue.Text = "Which of these is not a column in a PDT?";
                        rb1.Text = "Data Gathered";//this one
                        rb2.Text = "Known Facts";
                        rb3.Text = "User Requirements";
                        rb4.Text = "Necessary Processing";
                    }
                    else if (question == 3)//UNIT 3 LESSON 1 QUESTION 3
                    {
                        pbImage.Image = null;
                        lblDialogue.Text = "What’s the first step in the Software Development Cycle?";
                        rb1.Text = "Create Algorithm";
                        rb2.Text = "Identify the Problem ";//this one
                        rb3.Text = "Implement the Algorithm";
                        rb4.Text = "Maintenance";

                    }
                    else if (question == 4)//UNIT 3 LESSON 1 QUESTION 4
                    {
                        pbImage.Image = null;
                        lblDialogue.Text = "The population of a city is 500 000 and increases at a rate of 6% annually. It needs to be calculated for how many years it will take till the population exceeds 1 million. From the information given, which of the following is a KNOWN FACT?  ";
                        rb1.Text = "The rate of increase";
                        rb2.Text = "The population is 500 000";
                        rb3.Text = "How many years it will take to reach 1 million";
                        rb4.Text = "Both a and b";//this one

                    }
                    else if (question == 5)//UNIT 3 LESSON 1 QUESTION 5
                    {
                        pbImage.Image = null;
                        lblDialogue.Text = "Same problem as before: The population of a city is 500 000 and increases at a rate of 6%. It needs to be calculated for how many years it will take till the population exceeds 1 million. From the information given, which of the following is a USER REQUIREMENT?  ";
                        rb1.Text = "The rate of increase";
                        rb2.Text = "The population is 500 000";
                        rb3.Text = "How many years it will take to reach 1 million";//this one
                        rb4.Text = "None of the above.";

                    }
                }
                else if (lesson == 2)//UNIT 3 LESSON 2
                {
                    if (question == 1)//UNIT 3 LESSON 2 QUESTION 1
                    {
                        pbImage.Image = null;
                        lblDialogue.Text = "What does IPO Stand for?";
                        rb1.Text = "Inside Present Outside";
                        rb2.Text = "Integrated Percentage Output";
                        rb3.Text = "Input Processing Output";//this one
                        rb4.Text = "Industrial Pollution Omitted";
                    }
                    else if (question == 2)//UNIT 3 LESSON 2 QUESTION 2
                    {
                        pbImage.Image = null;
                        lblDialogue.Text = "Which column is used for equations?";
                        rb1.Text = "Input";
                        rb2.Text = "Processing";//this one
                        rb3.Text = "Output";
                        rb4.Text = "No equations required.";
                    }
                    else if (question == 3)//UNIT 3 LESSON 2 QUESTION 3
                    {
                        pbImage.Image = null;
                        lblDialogue.Text = "If a user inputs 50 and the program makes the number multiplied by 2, the output will be?";
                        rb1.Text = "50 50";
                        rb2.Text = "100";//this one
                        rb3.Text = "25";
                        rb4.Text = "IT'S OVER 9000!";

                    }
                    else if (question == 4)//UNIT 3 LESSON 2 QUESTION 4
                    {
                        pbImage.Image = null;
                        lblDialogue.Text = "If the number outputted was 500 and the processing was to divide the number by 4, the inputted number was:";
                        rb1.Text = "125";
                        rb2.Text = "250";
                        rb3.Text = "500";
                        rb4.Text = "2000";//this one
                    }
                    else if (question == 5)//UNIT 3 LESSON 2 QUESTION 5
                    {
                        pbImage.Image = null;
                        lblDialogue.Text = "You input 100. The output was 1000. What are the possible equations for processing?";
                        rb1.Text = "+ 900";
                        rb2.Text = " x 10";
                        rb3.Text = " - 900";
                        rb4.Text = "both a and b";//this one
                    }
                }
                else if (lesson == 3)//UNIT 3 LESSON 3
                {
                    if (question == 1)//UNIT 3 LESSON 3 QUESTION 1
                    {
                        pbImage.Image = null;
                        lblDialogue.Text = "In a flowchart, what shape is used for multiple outcomes?";
                        rb1.Text = "Parallelogram";
                        rb2.Text = "Diamond";//this one
                        rb3.Text = " Rectangle";
                        rb4.Text = "Oval";
                    }
                    else if (question == 2)//UNIT 3 LESSON 3 QUESTION 2
                    {
                        pbImage.Image = null;//this will be an image of an oval
                        lblDialogue.Text = "What is the purpose of this shape?";
                        rb1.Text = "Indicates Start and Finish.";//this one
                        rb2.Text = "Calculations/Processing";
                        rb3.Text = " Input/Output";
                        rb4.Text = "Multiple outcomes";
                    }
                    else if (question == 3)//UNIT 3 LESSON 3 QUESTION 3
                    {
                        pbImage.Image = null;
                        lblDialogue.Text = "True or False: Pseudocode is the same as C#.";
                        rb1.Text = " True";
                        rb2.Text = "False";//this one
                        rb3.Enabled = false;
                        rb4.Enabled = false;
                        rb3.Text = "";
                        rb4.Text = "";
                    }
                    else if (question == 4)//UNIT 3 LESSON 3 QUESTION 4
                    {
                        rb3.Enabled = true;
                        rb4.Enabled = true;
                        pbImage.Image = null;
                        lblDialogue.Text = "Which of these is not used for Output in Pseudocode?";
                        rb1.Text = "Write";
                        rb2.Text = "Display";
                        rb3.Text = "Print";
                        rb4.Text = "Read";//this one
                    }
                    else if (question == 5)//UNIT 3 LESSON 3 QUESTION 5
                    {
                        pbImage.Image = null;
                        rb3.Enabled = true;
                        rb4.Enabled = true;
                        pbImage.Image = null;
                        lblDialogue.Text = "Which of these is not used for Input in Pseudocode?";
                        rb1.Text = "Input";
                        rb2.Text = "Get";
                        rb3.Text = "Print";//this one
                        rb4.Text = "Read";

                    }
                }
                else if (lesson == 4)//UNIT 3 LESSON 4
                {
                    if (question == 1)//UNIT 3 LESSON 4 QUESTION 1
                    {
                        pbImage.Image = null;
                        lblDialogue.Text = "Why is internet piracy considered illegal?";
                        rb1.Text = "It’s considered stealing over the internet.";//this one
                        rb2.Text = "It’s illegal to be a pirate. ARRGH!";
                        rb3.Text = "It is not considered a crime.";
                        rb4.Text = "It is not considered a crime.";

                    }
                    else if (question == 2)//UNIT 3 LESSON 4 QUESTION 2
                    {
                        pbImage.Image = null;
                        lblDialogue.Text = "Internet piracy is no different than stealing from stores. Why do people not steal from stores?";
                        rb1.Text = "Different type of offense.";
                        rb2.Text = "It’s indirect.";
                        rb3.Text = "It’s easier to get caught.";//this one.
                        rb4.Text = "None of the Above.";

                    }
                    else if (question == 3)//UNIT 3 LESSON 4 QUESTION 3
                    {
                        pbImage.Image = null;
                        lblDialogue.Text = "What is the basic definition of hacking?";
                        rb1.Text = "Obtaining cheat codes for video games";
                        rb2.Text = "Gaining unauthorized access to a computer."; ;//this one.
                        rb3.Text = "Stealing someone’s USB.";
                        rb4.Text = "Looking through security cameras.";
                    }
                    else if (question == 4)//UNIT 3 LESSON 4 QUESTION 4
                    {
                        pbImage.Image = null;
                        lblDialogue.Text = "What’s the difference between logic bombs and worms?";
                        rb1.Text = "Worms are viruses that will execute with pre-determined conditions and logic bombs are viruses that will replicate itself.";
                        rb2.Text = "Logic Bomb is a bomb that will explode your computer and Worms are what stop it from exploding.";
                        rb3.Text = "Logic bombs are what destroys logic and worms are critters on the floor.";
                        rb4.Text = "Logic bomb is a virus that will execute with pre-determined conditions and worms are viruses that will replicate itself.";//this one.
                    }
                    else if (question == 5)//UNIT 3 LESSON 4 QUESTION 5
                    {
                        pbImage.Image = null;
                        lblDialogue.Text = "What steps can be taken to prevent infection by a virus?";
                        rb1.Text = "Anti-Malware Software.";//this one.
                        rb2.Text = "Download Malware.";
                        rb3.Text = "Download another virus.";
                        rb4.Text = "Sell your Computer.";
                    }
                }
                else if (lesson == 5)//UNIT 3 LESSON 5
                {
                    if (question == 1)//UNIT 3 LESSON 5 QUESTION 1
                    {
                        pbImage.Image = null;
                        lblDialogue.Text = "True or False: To get into computer science university, you need 12U Computer Science.";
                        rb1.Text = "True.";
                        rb2.Text = "False."; //this one
                        rb3.Text = "";
                        rb4.Text = "";
                        rb3.Enabled = false;
                        rb4.Enabled = false;

                    }
                    else if (question == 2)//UNIT 3 LESSON 5 QUESTION 2
                    {
                        pbImage.Image = null;
                        lblDialogue.Text = "Which of these careers can you get into with a degree in Computer Science?";
                        rb3.Enabled = true;
                        rb4.Enabled = true;
                        rb1.Text = "Software Engineer.";
                        rb2.Text = "Systems Analyst.";
                        rb3.Text = "Web developer";
                        rb4.Text = "All of the Above.";//this one


                    }
                    else if (question == 3)//UNIT 3 LESSON 5 QUESTION 3
                    {
                        pbImage.Image = null;
                        lblDialogue.Text = "What is a Co-Op placement in University?";
                        rb1.Text = "You buddy up with someone and pass through the semester together.";
                        rb2.Text = "Work in the workforce while in school and earn money.";//this one.
                        rb3.Text = "Work in the workforce while in school, but earn no money.";
                        rb4.Text = "You co-operate and get help from a teacher.";

                    }
                    else if (question == 4)//UNIT 3 LESSON 5 QUESTION 4
                    {
                        pbImage.Image = null;
                        lblDialogue.Text = "What is e-waste?";
                        rb1.Text = "Digitally removing old files from your computer.";
                        rb2.Text = "Throwing out your computer.";
                        rb3.Text = "Re-using components of electronics for future life.";//this one.
                        rb4.Text = "Removing Hard Drive from computer.";
                    }
                    else if (question == 5)//UNIT 3 LESSON 5 QUESTION 5
                    {
                        pbImage.Image = null;
                        lblDialogue.Text = "What is Cloud Computing?";
                        rb1.Text = "Using network servers hosted on the internet to store, manage, and process data.";//this one
                        rb2.Text = "Using computers outside of internet access.";
                        rb3.Text = "Using local servers to transfer data.";
                        rb4.Text = "Connecting to someone else’s internet worldwide.";

                    }
                }
            }
            else if (unit == 4)
            {
                if (lesson == 1)//UNIT 4 LESSON 1
                {
                    if (question == 1)//UNIT 4 LESSON 1 QUESTION 1
                    {
                        pbImage.Image = null;
                        lblDialogue.Text = "What does a scope of a variable determine?";
                        rb1.Text = "Its accessibility.";//this one.
                        rb2.Text = "How Large the variable is.";
                        rb3.Text = "The type";
                        rb4.Text = "None of the Above.";

                    }
                    else if (question == 2)//UNIT 4 LESSON 1 QUESTION 2
                    {
                        pbImage.Image = null;
                        lblDialogue.Text = "What is a variable's scope normally limited to?";
                        rb1.Text = "Its Value";
                        rb2.Text = "Its Block";//this one
                        rb3.Text = "Whether or not it is a Boolean";
                        rb4.Text = "If it's a int or a double.";
                    }
                    else if (question == 3)//UNIT 4 LESSON 1 QUESTION 3
                    {
                        pbImage.Image = null;//Display an example here.
                        lblDialogue.Text = "Where is it safe to access the variable 'target?'";
                        rb1.Text = "cMethod";
                        rb2.Text = "bMethod";
                        rb3.Text = "aMethod";
                        rb4.Text = "All of The Above.";//this one

                    }
                    else if (question == 4)//UNIT 4 LESSON 1 QUESTION 4
                    {
                        pbImage.Image = null;//Display an example here.
                        lblDialogue.Text = "In which blanks is it safe to place 'value = 5'";
                        rb1.Text = "A only.";//this one
                        rb2.Text = "B only.";
                        rb3.Text = "C only.";
                        rb4.Text = "Both A and C";

                    }
                    else if (question == 5)//UNIT 4 LESSON 1 QUESTION 5
                    {
                        pbImage.Image = null;
                        lblDialogue.Text = " If you had a varible 'x' as a local variable AND another 'x' as an instance variable, how would you call the instance one in a function? ";
                        rb1.Text = "x";
                        rb2.Text = "call x";
                        rb3.Text = "MessageBox.Show(x)";
                        rb4.Text = "this.x";//this one

                    }
                }
                else if (lesson == 2)//UNIT 4 LESSON 2
                {
                    if (question == 1)//UNIT 4 LESSON 2 QUESTION 1
                    {
                        pbImage.Image = null;
                        lblDialogue.Text = "What is Modular Programming?";
                        rb1.Text = "A method for modding games.";
                        rb2.Text = "A method for reusing blocks of code.";//this one
                        rb3.Text = "A method for solving Algorithms.";
                        rb4.Text = "A method to average the sum of numbers.";
                    }
                    else if (question == 2)//UNIT 4 LESSON 2 QUESTION 2
                    {
                        pbImage.Image = null;
                        lblDialogue.Text = "What is a benefit of Modular Programming?";
                        rb1.Text = "Efficient programming";
                        rb2.Text = "Code is more readable and easier to understand";
                        rb3.Text = "Smaller file size, therefore faster";
                        rb4.Text = "All of the above.";//this one
                    }
                    else if (question == 3)//UNIT 4 LESSON 2 QUESTION 3
                    {
                        pbImage.Image = null;
                        lblDialogue.Text = "What are Parameters in a function?";
                        rb1.Text = "The barriers of a function.";
                        rb2.Text = "They are looping functions.";
                        rb3.Text = "They allow a programmer to customize the functionality of a function based on the given info.";//this one
                        rb4.Text = "They change values of a function.";

                    }
                    else if (question == 4)//UNIT 4 LESSON 2 QUESTION 4
                    {
                        pbImage.Image = null;
                        lblDialogue.Text = "How many parameters do you need in a function?";
                        rb1.Text = "1";
                        rb2.Text = "2";
                        rb3.Text = "As many as you need.";//this one
                        rb4.Text = "OVER 9000!";
                    }
                    else if (question == 5)//UNIT 4 LESSON 2 QUESTION 5
                    {
                        pbImage.Image = null;
                        lblDialogue.Text = "How many values can be returned from this function?";
                        rb1.Text = "1";//this one
                        rb2.Text = "2";
                        rb3.Text = "900";
                        rb4.Text = "As many as needed";
                    }
                }
                else if (lesson == 3)//UNIT 4 LESSON 3
                {
                    if (question == 1)//UNIT 4 LESSON 3 QUESTION 1
                    {
                        pbImage.Image = null;
                        lblDialogue.Text = "Which of these String Functions doesn't exist?";
                        rb1.Text = "Compare";
                        rb2.Text = "Concat";
                        rb3.Text = "ToUpper";
                        rb4.Text = "LowerLetters";//this one
                    }
                    else if (question == 2)//UNIT 4 LESSON 3 QUESTION 2
                    {
                        pbImage.Image = null;//this will be an image of an oval
                        lblDialogue.Text = "In the Function Substring (int, int), what does the first int represent?";
                        rb1.Text = "The length of the characters.";
                        rb2.Text = "Position of the character.";//this one
                        rb3.Text = "How many characters there are total.";
                        rb4.Text = "How many seconds it will take to read the characters.";
                    }
                    else if (question == 3)//UNIT 4 LESSON 3 QUESTION 3
                    {
                        pbImage.Image = null;
                        lblDialogue.Text = "Let's use the word 'Computerized.' Using the function, IndexOf('e',5) will return:";
                        rb1.Text = "1";
                        rb2.Text = "6";//this one
                        rb3.Text = "10";
                        rb4.Text = "e";
                    }
                    else if (question == 4)//UNIT 4 LESSON 3 QUESTION 4
                    {
                        pbImage.Image = null;
                        lblDialogue.Text = "How would the term 'Boolean' look with the function: Insert(3,'t')";
                        rb1.Text = "Bootlean";//this one
                        rb2.Text = "Booltean";
                        rb3.Text = "Booleanttt";
                        rb4.Text = "Botolean";
                    }
                    else if (question == 5)//UNIT 4 LESSON 3 QUESTION 5
                    {
                        pbImage.Image = null;
                        lblDialogue.Text = "In the term, 'Recursion', what's the returned value for LastIndexOf('t') ";
                        rb1.Text = "Recurstion";
                        rb2.Text = "4";
                        rb3.Text = "-1";//this one
                        rb4.Text = "1";

                    }
                }
                else if (lesson == 4)//UNIT 4 LESSON 4
                {
                    if (question == 1)//UNIT 4 LESSON 4 QUESTION 1
                    {
                        //questions to be added
                    }
                    else if (question == 2)//UNIT 4 LESSON 4 QUESTION 2
                    {

                    }
                    else if (question == 3)//UNIT 4 LESSON 4 QUESTION 3
                    {
                    }
                    else if (question == 4)//UNIT 4 LESSON 4 QUESTION 4
                    {
                    }
                    else if (question == 5)//UNIT 4 LESSON 4 QUESTION 5
                    {
                    }
                }
                else if (lesson == 5)//UNIT 4 LESSON 5
                {
                    if (question == 1)//UNIT 4 LESSON 5 QUESTION 1
                    {

                    }
                    else if (question == 2)//UNIT 4 LESSON 5 QUESTION 2
                    {


                    }
                    else if (question == 3)//UNIT 4 LESSON 5 QUESTION 3
                    {

                    }
                    else if (question == 4)//UNIT 4 LESSON 5 QUESTION 4
                    {
                    }
                    else if (question == 5)//UNIT 4 LESSON 5 QUESTION 5
                    {

                    }
                }
            }
        }

        /*when finished a lesson, make sure that the day does up by one. day++*/
        public Lesson()
        {
            InitializeComponent();
        }

        private void Lesson_Load(object sender, EventArgs e)
        {
            uncheckButtons();//unchecks all radio buttons (one would always be checked otherwise)
            lblName.Text = TitleScreen.playerName;//puts the player name into the form
            lblDay.Text = "Day " + Classroom.day;//puts the day number into the form
            lblUnit.Text = "Unit " + SebnicMenu.currentUnitTab;//puts the unit number of this lesson into the form
            lblLesson.Text = "Lesson " + SebnicMenu.lessonNum;//put the lesson number into the form
            question = 1;//sets question to one (ensures that it starts with the first question)
            rightAnswers = 0;//sets the number of rightAnswers for this lesson to 0 because you haven't answered anything for this lesson yet
            loadQuestion(SebnicMenu.currentUnitTab, SebnicMenu.lessonNum, question);//loads the first question of the lesson
        }

        private void lblSubmit_Click(object sender, EventArgs e)
        {
            //determines exactly what question you answered (eg. unit 2 lesson 3 question 4) and checks if you got the question right or not
            if (SebnicMenu.currentUnitTab == 1)
            {
                if (SebnicMenu.lessonNum == 1)//UNIT 1 LESSON 1
                { 
                    if (question == 1)//UNIT 1 LESSON 1 QUESTION 1
                    {
                        checkAnswer(rb2);
                    }
                    else if (question == 2)//UNIT 1 LESSON 1 QUESTION 2
                    {
                        checkAnswer(rb3);
                    }
                    else if (question == 3)//UNIT 1 LESSON 1 QUESTION 3
                    {
                        checkAnswer(rb1);
                    }
                    else if (question == 4)//UNIT 1 LESSON 1 QUESTION 4
                    {
                        checkAnswer(rb2);
                    }
                    else if (question == 5)//UNIT 1 LESSON 1 QUESTION 5
                    {
                        checkAnswer(rb1);
                    }
                }
                else if (SebnicMenu.lessonNum == 2)//UNIT 1 LESSON 2
                {
                    if (question == 1)//UNIT 1 LESSON 2 QUESTION 1
                    {
                        checkAnswer(rb2);
                    }
                    else if (question == 2)//UNIT 1 LESSON 2 QUESTION 2
                    {
                        checkAnswer(rb3);
                    }
                    else if (question == 3)//UNIT 1 LESSON 2 QUESTION 3
                    {
                        checkAnswer(rb1);
                    }
                    else if (question == 4)//UNIT 1 LESSON 2 QUESTION 4
                    {
                        checkAnswer(rb4);
                    }
                    else if (question == 5)//UNIT 1 LESSON 2 QUESTION 5
                    {
                        checkAnswer(rb3);
                    }
                }
                else if (SebnicMenu.lessonNum == 3)//UNIT 1 LESSON 3
                {
                    if (question == 1)//UNIT 1 LESSON 3 QUESTION 1
                    {
                        checkAnswer(rb3);
                    }
                    else if (question == 2)//UNIT 1 LESSON 3 QUESTION 2
                    {
                        checkAnswer(rb1);
                    }
                    else if (question == 3)//UNIT 1 LESSON 3 QUESTION 3
                    {
                        checkAnswer(rb1);
                    }
                    else if (question == 4)//UNIT 1 LESSON 3 QUESTION 4
                    {
                        checkAnswer(rb3);
                    }
                    else if (question == 5)//UNIT 1 LESSON 3 QUESTION 5
                    {
                        checkAnswer(rb3);
                    }
                }
                else if (SebnicMenu.lessonNum == 4)//UNIT 1 LESSON 4
                {
                    if (question == 1)//UNIT 1 LESSON 4 QUESTION 1
                    {
                        checkAnswer(rb2);
                    }
                    else if (question == 2)//UNIT 1 LESSON 4 QUESTION 2
                    {
                        checkAnswer(rb4);
                    }
                    else if (question == 3)//UNIT 1 LESSON 4 QUESTION 3
                    {
                        checkAnswer(rb1);
                    }
                    else if (question == 4)//UNIT 1 LESSON 4 QUESTION 4
                    {
                        checkAnswer(rb4);
                    }
                    else if (question == 5)//UNIT 1 LESSON 4 QUESTION 5
                    {
                        checkAnswer(rb2);
                    }
                }
                else if (SebnicMenu.lessonNum == 5)//UNIT 1 LESSON 5
                {
                    if (question == 1)//UNIT 1 LESSON 5 QUESTION 1
                    {
                        checkAnswer(rb2);
                    }
                    else if (question == 2)//UNIT 1 LESSON 5 QUESTION 2
                    {
                        checkAnswer(rb1);
                    }
                    else if (question == 3)//UNIT 1 LESSON 5 QUESTION 3
                    {
                        checkAnswer(rb2);
                    }
                    else if (question == 4)//UNIT 1 LESSON 5 QUESTION 4
                    {
                        checkAnswer(rb4);
                    }
                    else if (question == 5)//UNIT 1 LESSON 5 QUESTION 5
                    {
                        checkAnswer(rb1);
                    }
                }
            }
            else if (SebnicMenu.currentUnitTab == 2)//UNIT 2
            {
                if (SebnicMenu.lessonNum == 1)//UNIT 2 LESSON 1
                {
                    if (question == 1)//UNIT 2 LESSON 1 QUESTION 1
                    {
                        checkAnswer(rb2);
                    }
                    else if (question == 2)//UNIT 2 LESSON 1 QUESTION 2
                    {
                        checkAnswer(rb3);
                    }
                    else if (question == 3)//UNIT 2 LESSON 1 QUESTION 3
                    {
                        checkAnswer(rb1);
                    }
                    else if (question == 4)//UNIT 2 LESSON 1 QUESTION 4
                    {
                        checkAnswer(rb3);
                    }
                    else if (question == 5)//UNIT 2 LESSON 1 QUESTION 5
                    {
                        checkAnswer(rb4);
                    }
                }
                else if (SebnicMenu.lessonNum == 2)//UNIT 2 LESSON 2
                {
                    if (question == 1)//UNIT 2 LESSON 2 QUESTION 1
                    {
                        checkAnswer(rb3);
                    }
                    else if (question == 2)//UNIT 2 LESSON 2 QUESTION 2
                    {
                        checkAnswer(rb4);
                    }
                    else if (question == 3)//UNIT 2 LESSON 2 QUESTION 3
                    {
                        checkAnswer(rb4);
                    }
                    else if (question == 4)//UNIT 2 LESSON 2 QUESTION 4
                    {
                        checkAnswer(rb1);
                    }
                    else if (question == 5)//UNIT 2 LESSON 2 QUESTION 5
                    {
                        checkAnswer(rb3);
                    }
                }
                else if (SebnicMenu.lessonNum == 3)//UNIT 2 LESSON 3
                {
                    if (question == 1)//UNIT 2 LESSON 3 QUESTION 1
                    {
                        checkAnswer(rb2);
                    }
                    else if (question == 2)//UNIT 2 LESSON 3 QUESTION 2
                    {
                        checkAnswer(rb1);
                    }
                    else if (question == 3)//UNIT 2 LESSON 3 QUESTION 3
                    {
                        checkAnswer(rb1);
                    }
                    else if (question == 4)//UNIT 2 LESSON 3 QUESTION 4
                    {
                        checkAnswer(rb2);
                    }
                    else if (question == 5)//UNIT 2 LESSON 3 QUESTION 5
                    {
                        checkAnswer(rb2);
                    }
                }
                else if (SebnicMenu.lessonNum == 4)//UNIT 2 LESSON 4
                {
                    if (question == 1)//UNIT 2 LESSON 4 QUESTION 1
                    {
                        checkAnswer(rb1);
                    }
                    else if (question == 2)//UNIT 2 LESSON 4 QUESTION 2
                    {
                        checkAnswer(rb2);
                    }
                    else if (question == 3)//UNIT 2 LESSON 4 QUESTION 3
                    {
                        checkAnswer(rb2);
                    }
                    else if (question == 4)//UNIT 2 LESSON 4 QUESTION 4
                    {
                        checkAnswer(rb1);
                    }
                    else if (question == 5)//UNIT 2 LESSON 4 QUESTION 5
                    {
                        checkAnswer(rb2);
                    }
                }
                else if (SebnicMenu.lessonNum == 5)//UNIT 2 LESSON 5
                {
                    if (question == 1)//UNIT 2 LESSON 5 QUESTION 1
                    {
                        checkAnswer(rb1);
                    }
                    else if (question == 2)//UNIT 2 LESSON 5 QUESTION 2
                    {
                        checkAnswer(rb4);
                    }
                    else if (question == 3)//UNIT 2 LESSON 5 QUESTION 3
                    {
                        checkAnswer(rb3);
                    }
                    else if (question == 4)//UNIT 2 LESSON 5 QUESTION 4
                    {
                        checkAnswer(rb2);
                    }
                    else if (question == 5)//UNIT 2 LESSON 5 QUESTION 5
                    {
                        checkAnswer(rb1);
                    }
                }
            }
            else if (SebnicMenu.currentUnitTab == 3)
            {
                if (SebnicMenu.lessonNum == 1)//UNIT 3 LESSON 1
                {
                    if (question == 1)//UNIT 3 LESSON 1 QUESTION 1
                    {

                    }
                    else if (question == 2)//UNIT 3 LESSON 1 QUESTION 2
                    {

                    }
                    else if (question == 3)//UNIT 3 LESSON 1 QUESTION 3
                    {

                    }
                    else if (question == 4)//UNIT 3 LESSON 1 QUESTION 4
                    {

                    }
                    else if (question == 5)//UNIT 3 LESSON 1 QUESTION 5
                    {

                    }
                }
                else if (SebnicMenu.lessonNum == 2)//UNIT 3 LESSON 2
                {
                    if (question == 1)//UNIT 3 LESSON 2 QUESTION 1
                    {

                    }
                    else if (question == 2)//UNIT 3 LESSON 2 QUESTION 2
                    {

                    }
                    else if (question == 3)//UNIT 3 LESSON 2 QUESTION 3
                    {

                    }
                    else if (question == 4)//UNIT 3 LESSON 2 QUESTION 4
                    {

                    }
                    else if (question == 5)//UNIT 3 LESSON 1 QUESTION 5
                    {

                    }
                }
                else if (SebnicMenu.lessonNum == 3)//UNIT 3 LESSON 3
                {
                    if (question == 1)//UNIT 3 LESSON 3 QUESTION 1
                    {

                    }
                    else if (question == 2)//UNIT 3 LESSON 3 QUESTION 2
                    {

                    }
                    else if (question == 3)//UNIT 3 LESSON 3 QUESTION 3
                    {

                    }
                    else if (question == 4)//UNIT 3 LESSON 3 QUESTION 4
                    {

                    }
                    else if (question == 5)//UNIT 3 LESSON 3 QUESTION 5
                    {

                    }
                }
                else if (SebnicMenu.lessonNum == 4)//UNIT 3 LESSON 4
                {
                    if (question == 1)//UNIT 3 LESSON 4 QUESTION 1
                    {

                    }
                    else if (question == 2)//UNIT 3 LESSON 4 QUESTION 2
                    {

                    }
                    else if (question == 3)//UNIT 3 LESSON 4 QUESTION 3
                    {

                    }
                    else if (question == 4)//UNIT 3 LESSON 4 QUESTION 4
                    {

                    }
                    else if (question == 5)//UNIT 3 LESSON 4 QUESTION 5
                    {

                    }
                }
                else if (SebnicMenu.lessonNum == 5)//UNIT 3 LESSON 5
                {
                    if (question == 1)//UNIT 3 LESSON 5 QUESTION 1
                    {

                    }
                    else if (question == 2)//UNIT 3 LESSON 5 QUESTION 2
                    {

                    }
                    else if (question == 3)//UNIT 3 LESSON 5 QUESTION 3
                    {

                    }
                    else if (question == 4)//UNIT 3 LESSON 5 QUESTION 4
                    {

                    }
                    else if (question == 5)//UNIT 3 LESSON 5 QUESTION 5
                    {

                    }
                }
            }
            else if (SebnicMenu.currentUnitTab == 4)
            {
                if (SebnicMenu.lessonNum == 1)//UNIT 4 LESSON 1
                {
                    if (question == 1)//UNIT 4 LESSON 1 QUESTION 1
                    {

                    }
                    else if (question == 2)//UNIT 4 LESSON 1 QUESTION 2
                    {

                    }
                    else if (question == 3)//UNIT 4 LESSON 1 QUESTION 3
                    {

                    }
                    else if (question == 4)//UNIT 4 LESSON 1 QUESTION 4
                    {

                    }
                    else if (question == 5)//UNIT 4 LESSON 1 QUESTION 5
                    {

                    }
                }
                else if (SebnicMenu.lessonNum == 2)//UNIT 4 LESSON 2
                {
                    if (question == 1)//UNIT 4 LESSON 2 QUESTION 1
                    {

                    }
                    else if (question == 2)//UNIT 4 LESSON 2 QUESTION 2
                    {

                    }
                    else if (question == 3)//UNIT 4 LESSON 2 QUESTION 3
                    {

                    }
                    else if (question == 4)//UNIT 4 LESSON 2 QUESTION 4
                    {

                    }
                    else if (question == 5)//UNIT 4 LESSON 2 QUESTION 5
                    {

                    }
                }
                else if (SebnicMenu.lessonNum == 3)//UNIT 4 LESSON 3
                {
                    if (question == 1)//UNIT 4 LESSON 3 QUESTION 1
                    {

                    }
                    else if (question == 2)//UNIT 4 LESSON 3 QUESTION 2
                    {

                    }
                    else if (question == 3)//UNIT 4 LESSON 3 QUESTION 3
                    {

                    }
                    else if (question == 4)//UNIT 4 LESSON 3 QUESTION 4
                    {

                    }
                    else if (question == 5)//UNIT 4 LESSON 3 QUESTION 5
                    {

                    }
                }
                else if (SebnicMenu.lessonNum == 4)//UNIT 4 LESSON 4
                {
                    if (question == 1)//UNIT 4 LESSON 4 QUESTION 1
                    {

                    }
                    else if (question == 2)//UNIT 4 LESSON 4 QUESTION 2
                    {

                    }
                    else if (question == 3)//UNIT 4 LESSON 4 QUESTION 3
                    {

                    }
                    else if (question == 4)//UNIT 4 LESSON 4 QUESTION 4
                    {

                    }
                    else if (question == 5)//UNIT 4 LESSON 4 QUESTION 5
                    {

                    }
                }
                else if (SebnicMenu.lessonNum == 5)//UNIT 4 LESSON 5
                {
                    if (question == 1)//UNIT 4 LESSON 5 QUESTION 1
                    {

                    }
                    else if (question == 2)//UNIT 4 LESSON 5 QUESTION 2
                    {

                    }
                    else if (question == 3)//UNIT 4 LESSON 5 QUESTION 3
                    {

                    }
                    else if (question == 4)//UNIT 4 LESSON 5 QUESTION 4
                    {

                    }
                    else if (question == 5)//UNIT 4 LESSON 1 QUESTION 5
                    {

                    }
                }
            }
            uncheckButtons();//unchecks the radio buttons
        }
    }
}

HELP MENU CODE
**************************************************************************
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Drawing.Text;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace prjICS
{
    public partial class HelpMenu : Form
    {
        public static Double[] marks = new double[7];
        public static String[] names = new String[7];
        void setFont()//Loads our custom font
        {
            PrivateFontCollection pfc = new PrivateFontCollection();
            pfc.AddFontFile("acme_explosive.TTF");
            foreach (Control c in Controls)
            {
                c.Font = new Font(pfc.Families[0], c.Font.Size - 4);
            }
        }

        void sortScores()
        {
            for (int x = 0; x < 5; x++)
            {
                for (int y = 0; y < 5; y++)
                {
                    //checks if highScore is less than the highScore above it in the array
                    if (marks[y] < marks[y + 1])
                    {
                        //highscores switch places
                        double tempMark = 0;
                        tempMark = marks[y];
                        marks[y] = marks[y + 1];
                        marks[y + 1] = tempMark;
                        //Switch the corresponding names to the scores just swapped.
                        String tempName = "";
                        tempName = names[y];
                        names[y] = names[y + 1];
                        names[y + 1] = tempName;

                    }
                }
            }
            //sets the marks to the labels
            lblMark1.Text = Convert.ToString(marks[0]);
            lblMark2.Text = Convert.ToString(marks[1]);
            lblMark3.Text = Convert.ToString(marks[2]);
            lblMark4.Text = Convert.ToString(marks[3]);
            lblMark5.Text = Convert.ToString(marks[4]);
            //sets the marks to the labels
            lblName1.Text = Convert.ToString(names[0]);
            lblName2.Text = Convert.ToString(names[1]);
            lblName3.Text = Convert.ToString(names[2]);
            lblName4.Text = Convert.ToString(names[3]);
            lblName5.Text = Convert.ToString(names[4]);
        }

        public HelpMenu()
        {
            InitializeComponent();
        }

        private void lblBack_Click(object sender, EventArgs e)
        {
            this.Hide();
        }

        private void HelpMenu_Load(object sender, EventArgs e)
        {
            setFont();
            sortScores();
        }

        private void HelpMenu_Shown(object sender, EventArgs e)
        {

        }

    }
}

END SCREEN Code
*************************************************************************
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace prjICS
{
    public partial class EndScreen : Form
    {
        void textScroll(int milliseconds, string text, Label label)//text scroll function, the same as in the other forms
        {
            label.Text = "";
            for (int x = 0; x < text.Length; x++)
            {
                String character = text.Substring(x, 1);
                label.Text += character;
                Thread.Sleep(milliseconds);
                label.Update();
            }
        }

        public EndScreen()
        {
            InitializeComponent();
        }

        private void EndScreen_Shown(object sender, EventArgs e)
        {
            HelpMenu.marks[7] = Classroom.courseMark;//Save our mark
            HelpMenu.names[7] = TitleScreen.playerName;//Save our name
            textScroll(50, "Error", lblError);//Write our fake error message
            textScroll(50, "Unhandled exception has occured in your program.\nThe process has been terminated.\n\nThe game has ended. Your final mark is "+Classroom.courseMark+"%", lblMessage);
            //The next two lines add some glitchy-looking text, just to add to the broken program effect.



            lblGlitch1.Text = ("ơ̶̢̡̢̨̢̡̡̨̛̛̛̛̛̛̛̛̛̛̤̦͎̪̪̣͖̦̥̩̬̩̟̞̖̱͇̩͍͈͉̹͓̭̤̦̗̺͎̝̠̯̣̜̳͔͕̞̳̼̙̲͇͖̺̖͓̦̲̱͍͉̹͖͍͚̱̟̼̩̖͇̮̯͔͇͇͇̙̟̈̐̈̿̑̓́͋̌̓́̇̇̉͐̓̈́̔̀̃͊͗̆͋͒̿̽̃̓̓̑͐͐̍̔͒̔̉̀̒̈̀̀̈́̊͊͊̊́͌̇̋̈́̏̈́͊̌̾̏͂̔̋̽̽̽̔̒̿̎̈̏̈́̐̆͗̆̈̌̆̓̎̏̓̊̅̐̊̎̓͐͒̽̀̌̇͐̆̽̿̉̔̄̿̈́͛̓̐͂̅̓͂͋̎̌́̊̐̓̈̄̋̈͗͗̌͂̃̍̑̏͒̌̊̀̈́̑͌͐̀͆̌̿̒͛͋̃͂̾̎̋̌͛̐̄͂̀̄̏̍̋̾̔͗͑̇̾̌̆̎̎̽̀͌̎͗͌̀̅̐͑̽̓͑͂͐͛̒̽͌̀̈́͒͒̈́̃́̈̐̀̊͂͌̎̑̈́̀̄̈͊͊͆͋̇̿̀̾̅̽͋̓́̎̿̄̄̔͂́̒͌̎̀̓̄͗̂̇́̕̕̕̕͘̚̚͘͘͘̕͘̕͘̚͘̕̚͘̕͠͝͝͝͝͝͠͠͝͝͝͠͝͝͠͝͠͠͠ͅh̶̨̧̡̰̹͉̳̟̜͖͚͔̦̯̱̫̭̻̖͔͖̫̠͓̟͉̹̹͚͑͑͋̌̃̐̔̑̊͊̈́̀̅̑͘͘͜ ̶̧̧̡̧̨̨̢̨̡̢̨̨̧̧̡̢̢̨̢̧̧̛̛̛̛̛̘̰̟̝͖̣̖̭̗̗̗̬̖͖̠̞̦̲̲͙̞̬̜̟͈̣͕͇͈̰̰̹͖̤̬͖͚̫̠̮̙̞͕͈̗͖̪͕̼̝̞̩͇͖͍̲͓͇̜̹̰̗̘̳͕̬̠͈̠̝̻̠̫͖̖͚͔̙̲̦̼̮̰͉͇̙̥͇̖̝̰̘͖̜̫̮̟̱̼̝̼͔̬̬̭͉̲̪̪͉̩̬͔͈̟͈͕̘̤̫̟͍͖̝̟̠͎̹̤̠̹͕͈̻̩͍̹͉̤͓̻̰͙͓͍̻͖̰̼̩̞͕̱̞̰̬̬̩̗̥͙̤̮̘̫̪͈̬͚̻̣̯̘̬͕̝̫̲̫̣̹͖̦̘͈͈̰̯͔̙͇͔̘̯͚̳̮̱͇͙̖͙͈̟͉̼͎̮̫̺̯͕̜͙̗̦̩̟̟͔̦̯̫̼̥̭̘͔̜̳̟͆̓͗͐̑̏̏́̆̔̃̃̎͆̐͑̽͆̀́̏̈͐̓̊̌̃̔̐̓̅͐͊̍͂̎̀̉́̑͋̇͑́͌̆͐̌̂͊̈́̈͑̃̈́̊̓̀͒͛͂̐̀̇̓̾̔̿̓̉̎̌̋̀́̀̅̿̑̒͗̾̀͒̋̿̉͌̅̉̃̓̃̆͗̆̍͗̋̈̊́̍̋̓̂́̋̋̐͗̒͋̈̐̈̒̒͗̓̂̈͋̔̌̂̏̌͂̓̋̀̒̃̐̉̇̽̑̂͊͑͛̂̓̍̎͐̒́͗̓͊͒̔̊̅̓̍́̽͆͑̌̇̀͋̈́̉͊͋̇̈́̍́̉̈́̾̄̀̍̑̀̚͘̚̕̕̕͘̕̚̕̚̕̚̚̕̚͘̚̕̚͘̕͜͜͜͜͜͝͠͝͝͝͝͝͝͠͝͠ͅͅͅͅͅͅͅņ̷̧̧̛̛͕̱̲͕̗̫͔̰͙̙̺͎̲̺̠̠̻͍̫͓̮͎̦̗̜̙̮̩̩̭̳͙̱̻̼͍͓͍͈̞̅͋́͂̑͆́̓̌̆̃͐̔̽̒͗̓̽̆͌̓́͋̏̉̿̓͛̎̈́̇̀̆̏͂̐͌̌͂̓̔̈́̈̊͛̌̆̉̓̂́̾̎̈̂͐̃͊͌͋͊̍͘̕̕͘͜͝͝͝͠͠ͅơ̶̢̧̨̨̡̢̨̡̛̛̤̞͇͚̖̥̬̻̹̜̦͈̰̲̭̫̙̯͉̭̺͖̰̟͈̳̭̣̪͍̥͇̻͇͉̮̥̟͈̜̩̱̝̲̞̲͔̤̬̟̳̥̱̲͍̙̠̼͓̹̙̬͎̫͚̙̩̟͍̩͚͈̈́̾̓͗̍͑͛̅̋͋̾͌̑́͗̌͂͌̏͛̇̃̐̊̄̃̐̽͊̃̎͗̈̇̏̓̈́̋͌͌͛̈́́̂̓̂̾̈͛̽̇̃̊͛̊͛̏͂̿̀̐̓̅̑̂̐̃̌̄̒̆̚͘̕͘̕̕̕͘̕͜͜͜͠͝͝ͅͅͅͅ ̷̢̨̡̨̡̢̧̡̨̨̨̢̧̧̢̢̨̢̨̧̨̢̨̡̛̛̛̰̦̪͍̜̤͉͉̼̫̘̘̲͇̯̰̩̥͍̘̯̭̘͔̭̱͉̞̭̫͔͕̦͇͚̹̮̩͈̮͎̙͖̣̺͙̩̰̖̩̥̳̠̫͍͇͉͉̝̞̳͉̘͇̥̭̝̠̞͇̯̬̦͎̺̻̪̟̭͚̙̦̪̗̥̭̤̯̺̺̰̱͓̠͖̫͎̩͈̤̪͉̝̙̤̟̱̠͉̺̱͍͍͙̮̩̞̫̮̻̝͔͍̬͔͙̠̖̬̲͔̪̱͎̟̖̹̞̠͉̰̠̩̙̖͚͔̗͎̘͓̺̗̞̺͎̠̱͓̙̱̭̯̣̭͉͚̣̠͕̱͈̟̆̍͒̾͊̃̇̈̃̊̈́̈͒̓͆͊̈́̊̊̄͂͗͊͐͆̇͐̎̐̑̾̉̅̇̾̏̔̽̾̄͛̒̅̒̃̈́́̎̽̈́̈́͆̈́̏̃̐̇͒̆̓̍̒̓̾͂̒̄̈̍̈́́͐͆͒̊͛͗̔̈́͋̊̔́̒̉̐̒̓̅̎̿̎͂̅̇̉̔̄̅̃̂͛͑̋̈́̑̉̇͋̾̈́̄͋̄̾̌̈́̈́̄̇̀̀̀̽̑͗̀̆̎͂̓̔̋̉̀̓̄͐̂̈́̓̎̿̓̀̂́͂̽͂̉̌̂͑͋̈̾́̀̄̓̍́̉̈̈́̌̓̈́̒̇̍͂́̋̓̿̍̿̄̌̋͗̉̽̈́̿͌̇̂̈́̈́̀̇̂̎̓̈̀̈̇̔͛̂̔̍̎̐͂́͆̈́̓̉͆̚̕͘͘̚̚͘̚̕͘͘̕̕̕̚͘̚̕̕̕͜͜͜͜͝͠͝͝͝͝͝͠͝͝͝͠͠͝͠͝͝͠͝͝͠ͅͅͅͅͅỵ̷̧̡̢̡̡̡̨̨̨̢̢̢̢̧̨̡̨̢̧̨̢̧̛̛̛̙̳̤̦͎̠̮͔͍̪̻̯͔͙͖̘̟̣̦͕͚͔̬̞̗̯̻̼̘̞̲̪̯̗̮̟͖̜͔͈̰̙̳̖̮̲̹̠͎̱̼͙̗͈͉͉̼̻͖̝̯̜̞̮̙̳͈͓̟̱̜͚͕̦̬̲̩̫͎͎̱̙̠̞̭̗̮͇͓̼͇̥͈̗͇͔̳̼̯̰̜͈̣̯̯̳̰̝̝̹͈̥̖͚̥͚̫̰͙̳̭̘̟̗͚̤̲̗͓̝̝̣̣̥̞͉̯̫̬̲̼̦͇̰̠̯͍̠͕̜͖̟̻͎̹̘̜̮̺̼̠̣̣̟̩͍̠̯̣̺̤̖͖̹̬̞̫̦̲̘̘͕̖̺̻̪͈̝͉͙͉̳̮͕̝͎̲̩̩͇̖̼̼̱̰̦̥̪̤̳͉͎̠͇̘͙̱͖͐̋̄͒͂̽̃̂̅͌̄̓̈́̓̓̀̄͊͐̄̏̽̇̐́̈̇͊̎̓̉͛̄͐͋͗̀́͂͊̍̓͗̀͛̅̏̇͆̂̃̇͂̾̀̎̍͆̋͆̈́̓̎͑̇̋̈́̅̊̀̌̉̈́̓̎̈͆̈́̅͛͌̈́̌̌͂̈́͑̊͑̉̈̊̓̎̏̂̋́́̃̽̎͆̎̋̄̇͌͒̇͐͊́̏͛̓͂̏̉̊́͒͗͂̅͋̀͆̂̈́͐̈̍̎́͋̑͛͒̆́̈́̋̆̒̏̿̆̂͛̋̋̽͑͂̓̽̉͐̀͊̽͛͊̎̍͆̃͂͆͊̀̋̓́͌̔̄̉̐̽̈́̎́͂̀̒̏̈́͊́̈̊͂̀̑̽̿̑͒́̊̓͒̂̂͋̈́̈̉͒́͒̊̊̃̀̓̒̈́̈́̑́̅͐̓͗͗̎̑̒͌̇̕͘̚̚̚̚͘͘͘̚̚̚̕̕̕̕̕̚͜͜͜͜͜͜͝͝͠͝͝͠͝͝͝͝͝͝͝͝͝͝͝͝͝͠͝͠͝͝ͅͅͅͅͅͅͅợ̵̡̡̧̨̧̡̡̨̡̡̨̧̧̢̧̨̡̛̝͔͕͔̟̳̳̤̺̥̣̯̠̼̩͉̣̞̫̥̙̩̱̲̣̜̦͔̜̟̯͖̳̫͚̞͙̝̹͙̹̪͔̠̝̲̭̥̰͈̟̪̗͔̬̝̩̱̠̥̫̮̳͈̹̪̩͈͕̬̳̼͇̖̙̺̼͍͖̖͍̻̖͔͔̟̻̦͕̭̝͙͈̫̮̪̠̭̺̯̭̥̩͔̜͎̹̲̱̣̠̙̞̫̼̻͔̪̙̰̺̥̺͕̮͔̙̫̱͖̹̘̲̫͎̰͉̦̰̝̝̩̝̣͓̮͙̖̰̹͓̟͍̮̻̮̮̗͍̭͔̣̼̫̝̜͔̳̭̜͚̬̜̟̳͉͉̬̞͕͎̩͔̱̲͙̮̙̫͖̘̹̘̦͔͙̤̝͉͍̙͊͂́̈́̈́̑̀͋͑͒͗̎͑̉́̅̎̔͂́̃͆̌͒̌̎̍̆̔̾̑̅̽̈́̉͐͑̿̍͊̂̀̑̓͒̈́̀̀͊̋̈́̂̾͋̊̓̑̊̉̈̋͒̎̓̅͂͑̓̋̂̒̊̅͒̔͑̿̈́̐́̀̃̓̒͐̀̀͒́̌̂̌̽̽̓̃̿̌̀̈́͒̄̀̽̒̿̓̌̐̄͐̓̄̾͘̕͘͘̚̚̚̕͜͜͜͜͝͝͠͠͝͝͠͝͝͝ͅͅͅͅͅư̵̢̧̧̡̧̛̛̛̥̳͎̘͕̘͈̺̟̥̱͉̞̙̦̹̬̞̹͇̙͓̖͇͔̘͈͍̣͕͙͇̲͕̣͚͓̥̺̪̥͈̜͎̙̻̤̫͎̲͙̦̝̹̈́̾̏̃͋̿̈́͋́̂̄̐͊̑͑͋́͊̈́̀̋͆͛͋̄̊̋̃̆̋͋̓͋̋̾̃̒͑̍͂̋̉̾̉͛̈́͆̈́̉́̅̐͆̃͒̽̍̈́̓̀̔̌̔͆̅̾̒̌̓̆̃̍͗̽̆̆̒̋͛͑̃̿͑̾̋̌͌̑̇͊̄̈̏͐͆̉̿͛̄̋̇̊̄͐̄̓͌̈́̋͋̇̽̔̉͐͆̎̉̾͂͆̑͑̋̅͑͌̐̽̋̿͌̓͐́͑̒̓̇̿̓̒̈́͌̋̆͐̒̓̎̔̈́͂̏͋̃̅̅̉͒̊̈͒͋́̃̒̈͒̈́̓̇̔̍́̓͌̀̎͌͐͆̔͐̔͋͆̆̃̑͆̍̆͘̚̕͘͘̕̚̕͘̕̕̚̕̕̚̕̕͠͝͠͠͝͝͠͝͝͝͝͠͠͝͝ ̶̢̢̡̡̧̧̧̧̡̡̧̡̨̡̧̢̛̛̛̛̛̻̮̤̦̣͎̘̤͓͍̗̗̪̜̮̱̙̪̖̤̼̳̦̳̠̣̼̤̤͎̠̼͓̪̩̥̩͔̳͉̻̘̘͉̲͚̻͔̼͇̺̯̲͈̞̲̱̳̮̭̻̜̺̤͓͉͈̥̩͈̘̩̖̩̳̭̟̠̰̫͍̝̞̪̰͙̰̹̜̙͓͇͉̤͍͍̮͈̻͓̹̲̙̖̯̬̱̰̗͕͉͓͓̻̦̣͖̪̣̜̝̞̤̝̤͉̹̰̺̞̟̱͉̠̝̰̼̮̹͓̗͓̹̮̪͕̭͚͈̦͓̼̻͙̼̘̪͎͚͙̩͇̺̭̯̠̩̪̠̲̤̣̣͔̺̟̪̝̠̟̰̮̦̥̖̳̫̭͍͈̹͔̮̠̹̭̬̫̺̙̬͍͎̱̑͑͋͛͗̑̓̂͛͆͌̌̓̄́̀͌̄̀͆̉̑͑̾́͊̒͗̾̓̽̿͋̆̽̈̾̃͆̾̓́̎͌̀͒̂̽̈̄̓̾̏̒͗̂̐̃̅̈̐͐̎̓͒͋̋̀́͒̃͛͛́̾̌͗͑͒̉͛̀̐́̇̒̃́̋͛́̿̈́̑͌̇̍̄͑͆͒̃͂͑͊͛͆̄̊̒̌̽̐̓̓͋̆̏͒̇͋̅͑͛̾̚̕̕͘̚̚͘̚̚̕͜͜͜͜͜͜͜͜͜͜͠͝͠͝͠͠͝͠͝ͅͅͅb̸̡̨̢̢̨̢̢̡̛̛̛̛͓̥͉͇͖̬̯̦͙̪̹̥̦̹̙͔̲̩̻̩͕̼͎͖͉̩̥̦̩̹̣͖͚̯̼͈̙̞͍͕̹͕͓͈̭̘̺̫͍͕̭̜̲̺̹̟̙̗̫̗̘̟̻͚͖͉͖̪̙͕͖͖͉̬͓̳͕̭̥̞̹̙̯̼̱͙̟͓̱̦̙͌̀̇̔̅͌̓̈́̽̒͆͆͆̂̆̄̑́͗̉͑̽͊̽̍̒̀̆̈́̋̾̂̆̈͋̈̿̏̌̄̓̒̈̈́̔̓͛̋̓̆͑̐́͋̓̇̇̀̀̃͛̈̿̋͂̒̂̽̐̐̾̀̏̀̄̆̅̌̄̈́̈̃̾̈́͑͛̓̃̈́̂͑̃̎͐͛̀̿̽̒͌̓̅̃͆̀̓̑̂̐͛͋͂̇̌̀̓́̐͊̓͐̽̒̐̇͒̒̂̓̓̄͗͐̔͂̅͗̈́̈́́̐͗͊̓̇̀̋͒̾̈͒̇̈́̏̌̓̃̆̓́̆̈́̂́̈́̀̓̆́͛͋̈́̿̈́̅̌̐̍̿̔͐͘͘̕͘͘̚̚̕͘̕̕̕͘͜͜͜͜͠͝͠͠͠͠͝͝͝͝͝͠͝r̵̨̨̢̡̢̢̢̨̨̢̡̨̡̢̧̨̨̡̢̨̨̨̧̢̢̡̢̨̧̛̛̳̰͙̜̥͈͈̪͉͉͔͓͎̳̙͎̬̩̙̝̞̘̪̝͙͕͓̭͚̯̲͙̞̤̩̯̫̫͕̥̳̜̬̰̹̖̤͈̘̻͎̯͚̗͚͔͕͔̫̩͉̜̱̹̯͔̬͖̩̝̱̦̯̠̻̤̰̫̺͔̹̮͕̮̩͕̖͔̟̝̙͈̼͔͕̜̮̜͎̦͈̩̗̦̭̠̱͍͖̙͙̫̞̮̟͈̣̥̪̱̯͕͙̘̖̬͕͕̼͖̣͚̟̘̝͍̤͙͓̺͕̗͈̖̤̖̪̹͚̣̥͚͚̼̤̤̰̠̜͉͖̤͈̩͙͇̱͈̩̗͔͓͍͈̫͓̫̘̲̣̬͔̫͔̙̳̟̼͚̲̝̹̝͖̘͇̙̼̙̩̼̝̳̘̜͍̞̱̳͕̩͍̲̲̹̟͈͔̝̜̩̗͍̖̻̎͌̌̌̿͌͋͛̀̄͗͌̔̌̓̆̆̓͆̂̊͑̊͆̽̒̀́̎̐̋̄͐͌͌͆̑̉̀̀̏͑̈́̊̏͒̋͑̀͌͋͊̉͗̂̑̇͒͗̃̉͒̄̽́̓͑͋͂̈́̆̋̊̆̀̀̈́͋͛͂͑͐̓͐̏̎̈̀́̅̇̇͂͒̔̋̔̎͐͗͛̒͋̈͛̋́̎͛̐͗̍̉̎̐̎̆̊̋͆̇̈͌̑̏̓̀̓͛́̅̾̈̆̑͊͋̊̾̀̈́̈́͐̈́̏̽̑̽͂̑̓̋̄̈́͆͆͒͋̎̇̂͆̽̆̀̀̒̉̿̓̀̽͆͗͋͗͑̄̈̓͗̀̌̄̈́̇͗̄̃̿̀̌̊͊̌͛̽̐̒̀̇̑̑̒̍̏̎̃̒͌͆̓͋̄̓́͐̿̓̓͌͆̈́̅̅̒̇̍̀́͌́̄̽̓̃̂̐̕̚̕͘̕̕͘̚͘̕̚̕̕̚̕̚͘̕̕͜͜͜͜͜͜͜͝͝͝͝͝͝͝͝͝͠͠͝͝͝ͅͅͅͅͅͅǫ̷̢̨̢̧̨̨̧̡̨̡̢̡̨̧̧̡̡̨̧̭̟͇̟͇̘̭̥͍͖͙͚͖̖̞͈̠͉͕̻̟̪̳̜̬̟̥͓̮͖̭͇̳̭̘̰͚̜͖͎͍͕̠̫̱͎͕̦̩͎̹̖͈̻̪̲̲̬̥͔͕̱̟̲͔̖̱̲̮̼͙͍͚̟̝͎̹͖̫̺̘͍̮͕͖̘̥̞̰̙̱̹͓͔̠̰̝̤͙̖̟̠̻͇̘̲͇̫̫̻̠̘͔̲̹͚͖̗̹̺̮͇̫̼̟͇͕͉̠͍͍̠̼͔̬̰̣̰̺̟͉͖̯͓̲̞̹͍̭̫̥̦͉̤̥̠͙̹̮͍̫͚̠̫̲͇̝̖̻͚̜̱͚͎̣͇̦̦̭͚͉̺͔̫̬̦̻͕̟̱̬̗̥͍͈̮̬̞͇̤̟̱̮̗̩͎̲̲̬͇͎̪͔̹̩̺̝̠͈̝̫̜̜̞̟̭̱̹̮̤̦̥̪̘͍̤͇̙̦̠͇̠͇̟̗̍͗̍̑̇̋̀̾͛̌̽̿̍͗̈́͋͋̒͊̌̐̃̍̈͆̾̿̍́̃̽̑͛͋͛̇́́͌͂̃̅̈́̆̇̀̉̿̈́̊͒͑͗̑̀́͆͂͂̓̉̔̃͒͗͒̊̇̎̈́̄͛̃̊̽̓̅̓͌͐̾̓̔̆̐̄̎͛͆̓̀͊͗̏̽̾̆͋́̎̌̾̈́̑̒̑̌̓͐̀̽͋͒̂́͛͛̎̒̑̅͂͐̈́͑̌̏̔̐̏͌̽̾̑̓̏̾̍̊͑̈͋̾̆͛̒͑̒̈̎̌̿͐̓̈̓̽̍̅̄̈̐͐̿̋̐̉̓̂̿̀̊͂͂̈́̉͌̾̀͐͐̎̇͌̅̔̄̈̾͌̌͊̿̂̽̇͐́̎́͂̒̌̎̄͂̒̈́̑̍͐̃̆̾̾̋͊͛̈̈̐͆̾̿̀̂́̒͌̍̏̎͆̅̂̔̆̓̃͆̂͒͂͛͘̚͘͘̚̚̚̕͘̚̚̕͘̕͘͜͜͜͜͜͜͜͜͜͜͠͝͝͝͝͠͝͝͝͝͝͝͠͝͠͝͝͝͝͝͝͝͠͠ͅͅͅͅͅͅͅͅͅͅͅk̷̡̧̢̡̧̧̧̡̢̡̧̢̡̨̨̧̨̛̛̛̛̛̛̛̯̳̪̠̼̥̗̮̳͕̠͓̗̹̞͎͍̝̹̲͇̫͎̞̻̖̼͕̤̤̱̮̭͔̭̱͕͍͔̖̭̖͙̘̙͎̳͙̥̤͎̰̲͎̖͈̼͎̗͓̩̲͓̰̮͙̫̱̩̝̝̝̘̰͇͓̤̮͍͖̱̭͎̪̣͓̫̯̰̦͙͈̥̜̙̺̫̗͕͚͎̦̳̘͕͔̟̭̬͕̱̞̪̜̯̣̼̜͚̟̫̬̦̳̺̼͉̯̲̙͍̺̻̰̤̻̮̫͖̬̯̞̭̘͎̫̭͔̥͚̪̥̦̞̺͈̬̞̝̈́͋́͊̂͆̌͐͂̃̾̀̎̃͋̾̅̋͒̈̂̇̓̍̏̑͊̎̍̑̊́̓̃̿̃͊̃̂̅̑͂̊̍̽̒̒̎͊̊̎̌͒̈͊̿͋̑͌̑͌͌̊̒̆̀̏̆̉͐͑̾͂̋̀̊̆̔̔̌̔̊̉͂͐͒̉́̆̓̉̍̏̈́̔̏̿̆̂͂͛͆͂̇̄̓͆̇͊̅̾̇̀́̊̒̅͊̑̔̐̔̉͑̏͗̏̅̃͌̇͛̀̇̊͊̎̓͆̆̊̏͒̂̂̓̊͒́̌̈́̈́̓̆̅̓̊̑̿̅́̐͐͑͛̽̑̂͒̏̓͋̐̔̿͂̓́̎̎̒͊̀͛͑̄̅͒͌͊̒̓̔̎͆̽̈́̎̋̌̇̈́̍̾̈̌͌̑̽̃̋̇̋͑͂̐̓̒̔͊̆̌̈́̀̐̒̌͌̒͌͒̈͛͑͑̄̉̈̀̓̆̍̌̈́̑͘̚͘̕̚̚̕̚͘̚̕̕͘͘͘̚̚̚̕̕̚̚̚͘͘͜͜͜͜͜͝͝͠͝͝͠͝͠͝͝͝͝͠͝͝͠͠͝͝ͅͅͅͅͅͅě̴̡̢̡̧̧̡̨̡̨̡̨̢̡̨̡̧̡̧̡̧̨̨̨̡̛̛̛̥̯͓͓̖͕̮̜͓̼̩͇͙̹͎̤͕̬͖̺̬̺̤̗̗̤̠̘̰͕̱̮̻̦͇̙̬̼̱̥͙̖̠̫͇̟̱̙͚͕̱͚̖͇̱̤̯̘͕͓̣̝̙̻͕̻̩̹͙̥̲̹͇͚̪̳̗̦̰͎̖̗̞̫͙͇̳͍̳͓̣͕̜̖͓͔̞̠̱͍͓͔͈̳̻̥̼̞̦̺̯̥͓͇͕͈̩̠͇͙͖̗͔̫̩̫̞̼͍̭̤̪̪̼̳̦̫͖͚̰̫̻̭̼̱̝͖̱̞̺͖̥̭̣̥̣̺͍̼̙̝̜̲̳̘̺̠̦̫̼͕͎̻͍̦̲͕̟͓͇̤̗͇͓̰̤͎̻̱̣͙̤̜̭͕͍̠̙͖̣̳̞̱̣̣͓̹̫͔͍̜̖̝̯̜̦̝̩̖̺̟͎̲̈́̊̎͂̋̔͆̈́̎̇͆̿͐̀͌̋͆͂̋̾̉͒̉́͗̈͊̀̿̾͌̊̒͛̒̾̈́̃͐͒͑̍́́͌́͊͗̿͂́̊̿͋̅̄͋́́̾̃̽͗̄̀̉͗̂͌̐͗̇̋̐͂̂̑͒̅͒̅̑̋͊̃͌̾̔́̔̽̊̈́͌̆̂̿̈͋͐̒̀̋́͐̓̊̌̐̋̾̋͊̊̄̂͗̋́̔͂̉̒̄̏̋̾̐̈́̓̄̊̔̇̀̂̐͗͌̾̊͒̑͆͋̓̊͐̾̉̑̽̿̋͐̈́͐̒̈́͛̇̀͒̓̋̽͑̄̉̃̄́̏̐̽͌̊͆̌̔́̈͂͊̓̊̓́̃̈́̌̀͋̀̍́̃̐̂̍̍̇̀͛̃͌̀̈́̔̆̊̑̏̌͂͊̃̓̊̓̈́͑̀̾̈́͂̽̑͂̈́̀̌̑̒͆̕̕̕̚̕͘͘͘̕̕̕̕̕̚̕̚̕̚̕̚̕̕͜͜͜͜͜͜͜͜͝͝͝͝͝͝͝͝͠͝͠͠͠͝͝͝͠ͅͅͅͅͅͅ ̵̨̧̢̢̨̡̡̧̧̧̡̢̧̧̡̨̡̧̢̧̢̧̡̨̛̛̛̥͎̲̫͉͖̤̘̰̜̞̫̲͍̮͔̣̬͔̬̞͓̘̠̳̬͔̤͚͈̙̤̝̳̟͈̣͇͉̟̘̗̪̻̻̲̣̯̱̠̳̼͎͔̦̘͙͇͇̻͉͔̜̱̘̤̜͍̺͙̯̪̭͖̫͇̻͉͉͙͎̼̥̥̗͍̫̟͔̹̲̝̟̞̞̲̞̱͚̤͔͈̯̦͈͈͚͚̤̣̮̲͉͇̹̭̜̼̬̳̮͙͍͈̺͓̘͈̬̦͚̘̖̖͍̪̠̳̠̳̯̞̱̼̮̹̗̻̥͎̗̘̠͕̰͙̫̙̮̜͉̦̥͇̣̻̳̝̟̜͇̱͍͉̩̳͎̩̩̻̘͇̼̣̳̭̫̩͙̞̥̖̱̤͈͖̹̯̞̹̹̙͙͚̩̹̘͖̳̝͚̩͓̥̥̼̰̬͇̞͙͚̭̥̣̠͙̞̬͚͚̮̺͖̱̺͙̩͚̠͉̭͔̟͆̈͂́́̈̾͊͂̽͛̏̾̐̆̍̓̂̌̾̄̍͑̃͆̃̉̉́͂͗͋͐̐̿̉̏̊̄̎̅̍̾̀̈̔͊͑͛̌̉́͆́̈̍̂̈́̍́̌͛̊̇͆̍͌͌̽̓̃͑̊̑̇̅̋̋͐̾͊̿͐̊͑̈́͊̈͗́̏̃͆̋͛̅̽͂̀̚̚͘̕̚̚̕͜͜͜͜͜͝͠͝͝͝͝͠͝͝͝͝ͅͅͅͅͅͅt̸̡̡̨̡̨̧̛̛͚͖̥̜͍̟̦͔͎͇̻̝̗̪̻̠̖̦̖̣͖̗̠͉̩̣̻̳̱̣̭̼̣̭̠̭̮̳͉̖͎̩̱̲̤̹̣̮͍̭̤͓̦̱̣̘̬̞̤͉̙̖͉̖̙͈͚͈̦͙̘̠̘̻̩̮̬̪͙̰̤͇͕̭͔̠̲͖͔̬͔̖̳͗̃̄̄̑̉͛̓̊̊͊̄͛͂̅͆͒̌̐̿̓́̈́͒͂̀̽̓̃͋̄̄͐͛̽͗̂̀̈́̅̈́̐͑̋̾̐́̐̍̉̅̉́̃͗̀͂͗̀͛͒͌̒͗͒̊̌͑̓̿̉͊͊̊̋͗̔̊̋̀̂̀͑̍́̑͋̆͒̏̓́̊̈́͛̎̏̔̌͒̐̊̑̌̑̀͂̍̋͐̅̽̋̀̇̓́̆̀̔͋̎͒̓͛̓̀̑̀̾̋̈́͒͘̚̕̚̚̕͘̚͜͝͝͠͝͠͝͠͠ͅͅḩ̷̡̨̧̢̡̨̧̢̨̡̧̢̡̨̧̧̡̨̨̨̧̛̟͙̲̲̜̳͇͖̜̞̲̥͓̘͖͚̤̯͕̩̯͕̥̯̹̼̝̯͍̖̝̹̦̦̯͉̫̲̪̝̘͉͎̪̻͈̤̤͍̹̪̫͎̜̬͔̳͓̦͈̟̻̯̻̻̬̗̩̘͇̤̮͕̠̹̼͙̥̱̰̱͉̱̯̳̲̳̝̭̼̲̞͎͈̲̥̠̠̱̰̮̭͚̬̝͖͓͓̘͇̼͖̮͔̺̯̰̜̮̙͔̫̣̱̹̣̣̜̪̣̪̲͍͈̲̯͍̩̝̠͖͓̜̱͖̻̪̝͍͍̥͍̫̹̙̦̝̼̞͈̦̩̻̜͉͖͕͙͙̖̜̠̱͈̝̝͙̺͕̠̺̟̠̲͙̪̗̺̬̥̖͉̬̟͕̬̬̺̩͖̥͔̯̻̘̙̣͙̬͙͎̼̜̗̪̩̠̮̪̜͕̥̱̺̼̥̘̳͈̬̠̘̫͔̮̞͕̠̣̯̰̖̆̀͐̾̌̍͒̇̑͋̔̑̄̿́̾́͗͋̐́̒̊̄̌̔̄̃̐̌͐̊̀͋̋̽͌͆̄͐̿͌̀̆̋͋͛͛̈́̚͘͘̕͜͜͜͜͜͜͜͜͠͝͝ͅͅͅͅͅͅͅͅͅȩ̸̧̧̡̢̨̧̢̨̨̢̢̡̡̨̨̧̢̧̛̛̛̛̛̛̛̲͉͔̘̫̻͖͈͎͕̳̘̘̠̞̬̪͎̤̻̩̻̦̠̺̺̮̮͍̦̠̦̙̜͚̭̹͚̩̦̫̪̯̦̬̥̥̺̩̘̞̝̼͓̠͙̠̮̜̖̼̤̝̮̳̦͖͓͍͔͙̯̙͓͈̲̪͍͔͎̤̰͎͉̱͚̘̭̤̫̬̰̱͎̗͓̟͖̞̫̖̰͚̪̥͇̬͇̳̺͎̞̙̦̜͉̦̗̳̭̬̪̪̭̗̹̭͍̻̘͍͎̥͇͈͈̻̝̬̯͔̰͉̺̖̦̞͈̣͉̱̫̭͈̠̤̼̼̳͓̗̦̙͚̫̥̱̙͔̭̥͚̰͍̮̲̱̺̪̳̱̖̮̱̙̬̱̙̗͚͚̩̮͉̙̪̟͔̪̔̃̑́̈́̋̋́̍͛̔̋̄̋̅́̌̀̈́̄̎̉͛̀̈́̀̅̓́͊̒͊̎̐̏͋̀̓̓̊̇͊̊̔̏͐̀͋̏̓̃̋̀̇̄͗͗̂͂̿̉͊̾͑̋̀̎̔̈́̔̈̇͋͗̈́͐̓͊̍̏̉̏̊̏͌̆̀̿̏͗͊́̔̎̄̏̆͋̅̽̋͑̐̀͛̂̓́̀̆̀͌̆̉̇͑̿̒̍̒͐̽̽̂͒͌̽̊̅̓͐̀̆̇͋̊̄̔͗͌͆͋͗͛̀͋̽̒̏̄̎́̇̂̍̓̀̓͒͆̄̔͌̒̆̀̓̔͊̽͊͗̈́͂̎́̊͊̿̕̕͘͘͘̕̚̕̕̕͘̚͘͘̚̕͜͜͝͝͠͝͝͝͝͠͝͝͝͝͝͝͝͝͝ͅͅͅͅͅͅ ̷̡̢̡̨̧̧̧̨̧̨̧̨̢̧̧̢̛͔͓͉̮͉̰̯͓̟̺̗̝͍̩̠̻̪̯̣̟͙̱̲̦͍̖̟͕̫̮̰͇̲̮̞̮̺̥̟͉͍͇̞͇̖̲̻̦̬̘̤̮̗̬̯̞͓͓͚̩̤̬͍̩̣̥̯̯̬̣͇̺͍̮̞̭͖̗̮͖͓̦̦̹͎̦̙̞͕̦͈̝̬̻̜͙̻̬͖̜͍͎̩̝̖͑͆͋̽̎̊́̈̅̎̊͐̈́̿́̐̐̓͆̅͒̕͜͜ͅͅͅg̶̡̢̡̡̧̨̢̛̛̛̛̛̛̛̛̛̯̥̳̥͈̟̳̻̟̤͖͇̖̩̫̩̱͖͍̤͇̞͕̫̰͕̦̣̮͇̳̻̟̱͕͇̭̝̰͚̥͉͚̜̻̝̭̫̭̮͓͇̼̠̝̏̈́̍̍͆̄̽̀͊̌̔̉̑̇͐͒͌̑͐͂͑́̓̑̔̿̐̀͌̏͐͑̎͂̀̀̐̆̂͐̂͐̌̈́̓́́̌̿̎̌̆̑͋̅̋̀̄͒̑̂̍͂̈́̄̽̈́̆́̑͒̈̓̌̑̄̀́̓̾̔̈́͆̃́̈͊̄͒̒̎̄̄͌̒͑̾̏̅̈́́͛̂͗́̇͋͋̾̾̃̈́̅̊͌̎̓̇̂͊͆̅̓͊̈́̍̄͛̈́̈́̈́̌͑̄̅͊̉̿̎̊̆̀̉̒̓̉̆̎̈̆̉̈́͛̉͆̎̅̐͒̓͂̂̉̐̉̆̈́̐͐̽͑̂͋̈́͛͛́̍́̈̂̔͋̍͆͐̂̓̑̄́͛̄̓̔̾͒͐̀͑̑̂͌̓́͑̋̆͆̊̇͆̇͆̌̍̌̿̀́͛͋͗̎͆̀͛̀̉̚͘̚̚̚̕̕̕̚̚͘̕̚̚͘̕̚̚̚̚̚̚͜͜͜͠͝͝͝͝͠͝͝͠͝͝͠͝͝͝͠͝ͅą̵̡̨̡̡̧̢̢̛̛̛̛̫̮̬͔͚̤̪͖̗̣͎͖͔̙̞̲̟̗̠̥̥͇͙͔̗͇̭̭̰͓̦̪̳͎͙̹͇̼͔͓̥̘̪͖͍̩̭͖̯̩̖̰̦̜͓̘̤̤̬̳͈͕̮͓͔͈̥̹͉̭̤̼̗̻͙̫͈͒̈́̈́͛̏̾̌̀͑̂̃̎͗͑̋̑̅͐̊͋̂͑̏̏̋̓͗͑̅͌̓̑̊͑̈́͆̎̌̇́̇͒̊̑̋͐̍́́̽͒͛̐͑͛͂̓́͗̏̽̍͐̋̽͆̏̈̃̔̋̓́̄̄̌̃͊̽̔͗́̾͆̓̀̓͗̂́̀͊͛̊̈̓̀̿͗̓̎̏͂͂̈͌̏̀̄̇͌̎̂͐̇̒̆͊́͊̃̄͆̌̆̑̄̈́̔̊́͊̋̅̄̊̍̚͘͘̕͘͘̕̚͘̕͜͠͝͝͠͝͝͝ͅͅm̸̡̧̢̨̡̢̢̢̧̢̨̧̧̡̧̨̧̛̛̛̛̱͓̠̖̺̲̭̤̬̺̦̬͔̖͇̤̩͔̰̦͈̜̖̜̦̤̙̤̥͖̺̻̖̺͙̼̬͎͔͎̙̫͎̭͉̩̙͖̮̠͍͓̗̱͔̞̖̱͓͕̝̫̫̖̭͚̖͖͙̱͍͖̖̙̩̞̩͔̹͈̙͉̹͔͖͇͇̭̳̤͙͓̦̺̜͈̘͚̺̩̙̱͎̠̪̠̯̻̻͚͕̣̫̦̣͉̘̠̝̣͈͔͙̟͓̲̙̺̪̯̟͎̠̹̦̦̥͈̘͑̑̈́̍̉̑͆̃̓͑̆͗͋͆̾̀̔̒̏̏́̂͑̂̉͌̈́̈́̑̔̆̄̍̔̽͂͒̃̍̎͗͋̄̓͌̏̅͛̀́͐̄̉͛̋͑́̑͛̾̍̔́̄͗̓͊̐̏̉͆͆͐́̋̈́̿̈́͆͐̈́͆̈́͛̅̈́̓̉͋͌̍̈́͋̋̇́̔̋͂̄̎̄͋̓͛̐͒̅́̔͑̓͆̆̽̀͛̔̎́͒̀̇̿̒͂́̅͐̓̄͌̈́͑̋̿̔̌́̀͒̄̓̑̆̾̀̐̇̓͒̂̇̓̋͐̔͊̊̕̚͘͘͘̚͘̕̕͘̚̚̕̕̚͜͜͜͝͝͝͝͝͠͠͠͝͝͝͠͠͝͝ͅͅȩ̷̧̛̺̻̞̫̙͇̼̻̘̒̾̉̓͂͒̌̈͒͗̊̔̀̃̊̈̿͒́̎̓̊̍͌̅̽͌̓̿͑͊́͆̀̔̉̍̈́̄̉̆̌̄̄̆̓̾́̓̊͌̍̋͂͐́̍̓͌̽̈́̉̂̓̍͆̂̇͂̂͂̀̀̎̉͆̔̊̓̆̒͛͆̒́̐͊̈̌̀̽̎͌̈̆̃̓̔͑́̾̌̈͂̋͗̌͌̒̏͑̌̀̃̏̐̽́͂̄̄̈́̈́̀͆̓́̾̓̉̿͆̋̇̈̌͛̎̈͒̔͗̀́̉́̂̌̽͂̐̃́͗͑̆́̅̂͌̂͑̔͛̊̎̃̐̓̈̉̊̉́̏̽̎̇̋͆̋̅͌̒͘͘̕̚͘̚̚͘̕͘̚̕̕͠͠͠͠͝͠͠͠͝͠͠͠͠͝͝");
            lblGlitch2.Text = ("w̸̢̨̢̧̢̡̡̡̧̡̨̨̧̡̧̢̢̧̡̨̛̛̩͙͈̣̩̘͉͍̜͔̖̹̠̥̗̳̙̲̠͖͙̮͖̳͙͇̙̟̮̪̼͎͕̱̲͖̼͙̝͔̼̼̠̠͉̭̣̣̠̘̘̜͕̹̦̦̬̝̣͔̳͈͕̠̲̣̟̥̺̲̘͓̤̱̼͈̲͙̦̤͈̝͔̙̠̣͙̤̗͖͖̪͎̞̹̭̺̞͚̮͖̮̺̪̭̟͇͇͚̙̫̠̦͈̲͇͇͉͔̬̱̩͖͓͕̮̺̮̣͇͎̠͎̖̜̩͇͍̠̖͈̬͉̞͖̹̯̮͎̼̥̗̹͖̘͔̳͕̱̫̗͎͎̜̝̥̣̹̗̹͔̟̤̘̱̪̞̹͈̹̙̤̙̜͈̟̙̦̰͉͈̰̠͓̩̜̲̮̟̣̫̱͕̺͚͕̺̹̮͕̠̣̞̟̦̞̟̜͈̗̟̹͍̜̬̗̜̳͈͎̬̥͐́̄̆͋̊͑̈́͊̀̑̓́̿̊̆̐̄̉̽͐̑̔͗̒̃̇́́̿̈́́͑́̚͘̕̕͜͜͜͜͜͜͝͠ͅͅͅē̸̢̨̡̡̧̨̡̡̢̢̨̨̨̡̡̡̨̢̨̡̢̨̛̛̛͓̗̪̤͉͉̱̭̜͚̩̦̬͉̙͍͖͚͎͉͍̥̰͈̼̹̤̝̮̘̝̦͚̭͎͎͖̼̜̣̯̫̩̞̰̖͈̼̪͎̫͔̼̮̥̤̠͉̮͖͍͚̠̖̗̫͎̩̮̰̙̳̦̼̰̰̦̯̼̲͍̮̠̻̖͈̗͉̮͚̗̳̰̲̯̯̲̺̟̯̼̪̺͔̩̣̘͇̳̝͕̼̪̟̱͉̲͙̻͚̖͕͎̞̫̞̺͓̜͓̙̻͇̟͇̼̝͎͉̱͎̦̦̰͍̦̜̗͙͖̭̞̜̫̪̤̹̖͎̜͕̣̦̳̝͇̟̗̗͇̹̭͈̪̣͚̝͔̥̬͇̜̩̭̘̖̼̗͖͙̬͎̫͓͓̞͚̮̤̭̘͓͚̲͉̝̳͎̤͚͉̙̱͍̜̠͍̱̱̞̠̣̯̮͈͚̣͙̖̖͓͚̖̘̤͕̺͙̹̱̃̍̅̽̽͂̉̾̋̀̒͗̏̏͗̑̓̒̋̄̌͒̃̇̓̈́͋̀́̒̆͑̌͌̓̅͛̂́́̄́̏̾͗̌̋̓͆̈́̌̽͌́́͗͐̑͆͒̂̑̎̔͛̑͂̈́̐̔̔́͋͌͛̔͗̀̈́̓͗́̈̓̀̀̊͗̐̀̃̈́͗̀͊̍́̃͆̃̀͗́͛͋̄̊̇̓́̀̅̅̓͗͗̍͌̿̎̀̔̍̌͑̍̓̉͌̇͋̄̐̊͊̒̅̀̂͌̑͌̓̍͂̾̃̒͛̀̑̌́̈̔̀͒̆̈́́̊̌̍̃̈̅̽͒̒̿̓͑̅͆̏͌͛̓͋̋̋̂̀̏̀̊͒͒̀͛̽͐̋̋̀͗̊͆̋̂̈́̽̉͊͋̅̀̌̌̇͐̅̉͐͑͛̃̀́̈́̈́͗̎̅̀̒͛͗͛̈́̔̃̊̋́̀͋͘̚̕̕̕͘͘͘̚̕̚̚̕̕̚͘͜͜͜͝͠͠͝͝͠͠͠͝͠͝͝͠͝͝͝͝͝ͅͅͅͅ ̷̨̡̧̨̡̢̧̢̨̨̢̢̛̛̫̟̪͓͕̘̖̝̤̤͍̦̙͓̬̪̭̫̫̳̥͉̩̘̙̜͖̭͉͈̭̜̮̪̜̫͖̞̼̹̬͎͖͉̜̫͍̹̖̥͚͈͕̻̻͈̦̗͔͉̮͇̰̼̦̳̯̩͔͙͎̪̹̻̝̪̬͇̘̜͇̤̗̹͓̪̲̺̲͓̼͚̰͓̪̟̯̯̗̜͙̰͉̬̙̰̖̣̣̙͎͎͉̱͙̭͕̙̞̝̒̉̊̆̏̾͌͘͜͜͜͜͜ͅͅͅͅͅͅͅş̴̛̛̛̛̛͙͓͉̗̙̺̳̘̹̭̼̘̼̩̩̣̖̤͚̮͓̼̣͔͇̖͕̰̰̔̈́̒͐̾̓̀̎̈́̓͌̈́̔̇̄̈̑́͑̀̒̂̈͑̅̏̔̋͐̉͌͒̍͑̓̇̆̏̃̃̏̓̽̇͆̓̒̀̈́́̃̉͋̈̉̾̀̾̍̍͌͛̔͐͑̐̏͛̄̓̀̏̍̇̾̂͊̒͛̓́͛̽̑̎͐͊̑̃̅͆͌͗͑́̅̔́̆͂͆̀͊̃̽̇̂͐̈̋͒͌͒̈́̐̀̌̿̍͂͒͊̉̆͌̎̃͗̌̂̈́̌͋͑̈́̋͑̋͗̂̇̅͒́́͗̈͊͂͗̈́͊̇́̆̓͗̌͌͑̿́̄̈́̂́͒̊́͊̉͂̈́̈́̓̑̑̑͂̈́̅̎̔̅̉̌͛͛̊̿͗͑̓̀̈́̄̈́́̊̃̍́̉͋͌͆͛̅̈̈́͌́̌̋͗͛̐̿͒͑̃̂̋̈̆̏̃̐̐̈́̈́̅́̅́̋̉̉̀̋͑͆̾͐̉̽͂̄͋̄͂̎̓͘͘͘̚͘͘̚͘̚̕̚͝͝͝͝͠͠͠͝͠͝͠͝͝͝͝͝͠͠͝͝͠͝͝͝͝ĥ̴̢̡̨̢̡̡̡̨̢̢̨̧̧̡̨̧̨̢̧̛̛̛̛̛̛̙͍̩̥̹͙͔̩̳̹͎̣͕̖̣̣̫̯͉͈̩̟̝̫̟͙͈̠͖̭̗͈̜͎͚̙̘̥̞̲̙̜̯͓̮̞̰̲̦͍̲̗̝̬͉̖͎̼͖͕͔̼͙̺̗̳̙̖̥̪̦̪͔̖̙͖͎̺̗̦͙̣̭͚̘̻̼̹͙̺̮͔͉͖̠͍̙̘̲̟̹͖̲͕͍̘̫̙͖̼͍̞͇̜͙͍̞͖̮̰̯̪̦̗̳̝̝̣̳̗͈̦̙̞͎̣͓̱̭̱̺̱̖̹͖͍͇̝̖͇̥͈̦̞̠̱̭̲̬̖̠̫̩̻̭̳̬͉̘̱̳̘͕͚͔̺̤̜̪͚̳̗̪̤͕͖̜͓̗̫̬̼̤̬̣̯͇̬̰̗̤̠̫͖͉̪̥̼̩̰͖̙͇̞̤̔͌͆͋̓̑̀͒̉̔͌̊̓́͑̐̈́̑̋̆̉̀̎̓̄̈̋̅̑̇̊̇͆̊̎͗̉̾̂̄̀̀̈́̐̽̓̈́́͌̊́̋̄̈́̆̊͋̄̓́͒͒̄̄̓͑̍̑̐̃̽́̍̀͆̓͗̒̎̑̅͊͛̅̈́̿̒̈̌͋̃̈̒́̃͐͆̀̿́̒̑̿̑̄͐̽̓͌̃̈́̄́̿͑̏̀̑̓̎̅̂̌͗̀̆͊͊̍̇̾̀̇͗̀̽̇͗͋̄̏̓͗̈́̆͒̈́̍̆̀͋̎̍̑̎́̆̽́͗̈́̍̀̐͛̀̏̇̈̓͐͊̈́̃͗̍̈́̋̍͛̒̈́̔̀̇͐̀̽̇̇̄̈́͛͌̈́͊̈́̈́͂̆̐̂̈́͛͐̉̄͗̿̈́̽͋̊́̍̇̌̄̏͑̓̕̚̚̚͘͘̕̕̕̕̕̚͘̚̕͘̕̚̕͘̚̚͘̕͘͘͘̚͘͘̚͜͜͜͜͜͜͝͝͝͝͠͝͝͠͠͝͝͝͝͝͠͝͝͝͝͝͝͝͝ͅͅͅͅở̶̧̢̧̧̨̡̡̨̧̧̛̱̫̼̖͖̩͔̭̲̗̫̭͕̘͚̳̭͎̼̲͍͓̗͎͉͇̼̺̥̰̮͇͕̯̱̹͚̟̩̗̞̗͙̹̙̮̰̬̯̟̲͈̟̠̟̘̲̪̬͍̮͉̜̱͙̥̻̻͍̺͈̞̞̗̬͖̺̮̰͔̬̻͉͂̇̊́̆̀̂̊̀̎̉̑͛̈́̅͐̃̏͑̓̃̊͋̌͒̊͛̾̀̇͋͆̾̄̽̌̒́͛̏̚̕͘̚͜͜͠͝͝͝ͅͅǘ̴̢̧̢̨̨̢̧̧̨̠̪̞͚̥͖͙̮͈̹̜̮̼͚̤̹̗̳̺͙̲̙͙͈͎͎͖̘̦̗̦̫̭̜̦͖̳̻̗̳̤͔͚̥̤͇̤̭̳̖̮̹̖͕͔͖̺̪̖̝̺̖̠̠̳͓̥̬̣̩̝̯̠̳͍̻̳̥̺̬̰͍͖̟͉͉͚̞̠̳̜̭͇̏́͊̃́̓̒̽͆̈̈̅̏͊͒͘̕̕͜͜͝͝ͅͅͅl̷̡̡̧̡̢̢̡̧̡̢̨̢̡̢̨̢̧̨̡̛̛̛̛̹̝͙͎̟̟̘̪̞̬͖̜̣̲͚̫̗̯̼̞͚̦̪͔̩͈̘̮̼̗̹̭̳͚̝̰̹̜̪̟̥̬̝̝̼͍̺̖̖͕̯̹̖͈̲̼̝̫̺͕͇̪̤͕̥͉̰̝̪̪͍̲̦͕̭͈̫̳̤͔͎̜̘͎̙̤͙͎̲̙̖̹̭̙̺̥̞̗͍͓͍̻̦̣͍̱̮̭̩̜̰̜̝̬͎̭̙͙̰̱̪̹̩̼̜̥̳̬̼͉̞͉͉̲̱̹̜̩̥͈̦͇̜͔̥͍̮̼͖̤̮̖̭͇̞̜͓̪̘̩̹̝̪̩̺̮͔̗̮̟̻͚͔̖͈̠͎̜̬͎͉̭͖̣͐͌̌̊́̓̅͛̿̃͗̿́̒͆̑̊́̊̅̓̔̊͛̃̈́̑̋̍̾̂͌̔̀͛̀̈̅̎̒͌̌̌͆̿́̒̐̍͊̓̓́̇̎̈́̓̐̆̈̽̃̈́̇̾̈́̑̔̽̃͛͋̈́̋͌̀̓̔̈́̆́́͊͗́̔̈́̃̂̋̎̈̓̌̍̏̾͋́̊̏̉̈́́̑̉̈́̇͂̾̄̈̈̍͌͐͊̿͆̒̈́̒̉́̏̀̊̽̏͗̂͒̉̆̽͂͋̅̅̈́̈͋͘͘̕͘̚̚̚̚̕͘̕̕͜͜͜͜͜͠͠͝͝͝͠͠͝͝͝͝͝ͅͅͅd̴̨̢̡̡̧̨̧̧̢̨̛̛̛̛̛̩̹̭͈̞͍̗͍̩̮̖͖͓̜̘̰̻̬͚͔͍͍̼̦̖̩͔̖̲̯͚̥̼̬̮̟̫̩̜̲̜̫̦͙̥͇͇̫̥̤͓̜̤̪̼̙̳̫͉̫̗̫̗̹͉̘̰̙̫̠͍̪̬͈͎̺͎̦̤̞͚̠̫͉̩̼̣̝͍̟̻̜̳͇̩̳͉̲͙̲̻̥̹̠͈͎̳̬̟̬̟̲̥̩̝̦̥̗͖̦̣̖̹͎̼̣̪̹̲̞͕̦̹͖̮͖̺̮̝͓͙̹̊͛͛̃̃͌̒̋̀̋̌̽̈̈́̾̌̋́͑̔̈́̊̀̇̿̍̂̍́̓̐̀͆̃̓͒́̑͒̃̀̑̇̑͐͌̍̀͌̌͊̾̒͂͒͑̂͂̐͑͌͂̂͌̓̏͐̄̔͒̍̉͆̀͂̈́͊̈̓̿̑͂́̓̈́̈̾̍̈́̏̉͛͌̀̄͊͂̍̍̉́̇̽͐̈́̊̂̉͗͒̃́̄̅͒̍͋̓̽͋̊̏͌͑̈́̈́͑́̓̔̄̐͐̿̃̆̅̀͑̃̒͋̎̈́̈́̄̑́̈́̄̒͐͋͑̍̋͗͆̿́̒̐̄̒̊͆̾̿̂͛̓̏̆̽͗̏͒̍̋̇̇̍̈́͌̽̔͂̉̉̓̿͗͊͗̀̒̍̈́͛͆͂̓̈́̀̓̿̏͊̾̎̈́̈̌̅̽͊̀̐́̋͒̌̚͘̚̕̕̕̕̚͘̚̚͘̚̚͘̕͘̚͘͘͜͜͜͜͠͠͝͠͝͝͝͝͠͠͝͝͝͝͠͠͝͝͝͝͝ͅͅͅͅͅ ̶̨̨̢̧̧̨̡̨̢̡̧̧̨̡̢̨̡̨̢̢̢̡̨̧̨̨̡̛̛̛̺͓̩̱̻͉̥̖͔͕͙̘̜̙̟̯͕̻̙͇̦̤̞̖̱̳͉̠̼̰̮͍͖͉͖̳̭̫̟̼͎̜̫̻̣͙̳͉͔̥̙̯̦̫̦̭̤̱͔̬̤̘̰̤͓̻͔͔͈̥̙̰̲͉̱̱͎̠̯̺̪̙̜͔̟̞̜̫͓͈̼̺̬͈̮̖̩͔̥̲͔̺͔̼͉͇̲̬̼̘͕̦̲̤̹̮̝͓̱̰̦̜̝̰̰͍̘̝͖̤̼̼̖̝̻̬̙̹̩̳̗͉̟͓̦̺̬͖͇̩͇̙͍̘̲̤̗̗̱͎̭̤̖̩͍̘̘̙̤͉̳̳̗͈̞͇̗̬̣͚͇͉̖̬͍̱͈̫̣̻̫̹̭̟̰̮̥͍͚̲͙̪̞͕̠̫̤͓̗͈̭̳̣̮̮͙̻̙̗͈͖͚̫͈͇̱̱̜̬̖̥͕̰̟̖̥͍̖̤̞̻̣̳̯̭͑̈́̅̆̓̓́̆̽̌́̏̽͒̌̒̈́͒̓̐͐̆̔̀̓̉̐̓̅̿͒̅̅̓̔̂̋̏́̀̈́̿̉̆̄̃̊̋̔̈́̀̎͂̄̌̾̌͒͛̀̾̔͋͌͊̈́̈́͑̃̅͋̃̽́́̎̋̆̑̄̌̓̉̋͑͊̋̃̓̔̾̆̂͋͐͋̐̒̅̓͗̓̎̔̆́̀̆̚͘͘̕͜͜͜͜͜͝͠͠͝͠͝͠͝͝͝͝ͅͅͅͅņ̸̨̧̧̧̨̢̢̡̨̢̡̢̢̧̨̨̧̡̨̡̧̨̢̡̨̡̧̧̨̛̛̛̛̞̻͎͙̬͔̳̟͎̺̗̱̳͓͎͔͍̙̤̻̺̝̥̹̞̰̲̟͙̫͕̝̖̗̮͈̖̫̩͔͚̹̬̰̖̬͙̝̲̰͈͍̙̥͖͎̥̝͓̣̳̼̬͈͇͇̦͖̩͚̻̤̼͖̙̩̖͇̼̝͙̝͙̗̳͙̪̗̯͈̣͙͕̫͙̤̰̻̘̠͔̤̟̖̰̰͇̳̘̭̻͙͉̙̘̳̙̜͖̟̺̖͕̗̯̪̮̲̱͚̫̦̙͕̞̭̫̹͓̖̯̲̦̼͖̬̥̟̯̠̣͎͔͙͕̬̫̪̖͖̹̗̩̟̺̖̬̞̯̜̜̣͖͓͕̮͖̱͈̙̟̬͈̞͙̼͍̰͙̰̳́͂̔̑̃͒̾́͑̈̋̎̔̊̏̀̈͗͋̀̔̈́͌̾͋̅͑̈̋̽̈́̆̇̈́͒͊̀͑͂̊̍̊̊̿͂̋̊̑̂̂̂̇̆͘͘̚͜͜͜͜͜͜͜͝͝ͅͅͅͅͅͅͅơ̶̧̧̢̧̡̢̢̨̨̨̨̨̧̛̛̛̛̛̛̛͍͈̘͚͈̦̥̭̘͕̗͖͙͚͎̦̳͙͉͕͇̤̞͖͉̥̭̗̣̮̩̩͔̮̬̳̯̹̻̩̗̺̱̘͙̳̭̩̜̱̗̼͔̘̪͖̳̱̞͇͍͉̮̩̫̹̺͈͕̲͍̟̰̮̜̲͔̯̳̬̱̮̞̫̽̓͌̊̓̅̀̏̋͗͋͗̍̏̅̃̉̽̀̃͒͂̽̐̎̾̏͐͊̍͗͐̍̓̊̆͒̈̐̅̂̔̈̿̋̒̑̃̋͗̓̏̆͌́̌̒̾͛̓̍̅̿́̽̉͆̀̇̿̐̈́̄̅̿͊̋́́̈̎̂̊̇́̅̑͛̏̀̃́̅̔̿͆̄̑͗́͑̄̈́́̈́̀̑̾͂̊̿́̂̾͆̒́̊̑͋̅̇͋̾̄̐͊̐͆̓͆͋͛͒̔̅̅͒̌͐͛͒͊̓͋̄̓͑̈́͂͐̎̓͐̏̓̐̿̌̀̏̽̿͌̈́̍̓̉͌͋̓͐̔̒̈́͐̿͒̾͑͌̆̅͛̂̐̀̈́̓̓̀͒̽̃̉̒̓̽̈̔͛̎͑̏́̇̔͛̿̓̀̄̃͐̋͊̏̈́̈́̍̒́̅́͌̎͑̿͘͘͘͘̚̕̕͘͘̚͘͜͜͜͠͝͠͝͠͝͝͝͝͝͠͠͝͝͝͝͝͝͠ͅt̵̢̧̡̢̨̨̧̧̧̨̡̛̛̛̞̰̤͍̣͔̮̱̦̻͓͎̻̻͚̬̯̱̮̼̮̱̰̫̝͍͇̳̬̻̜̤̥̪͖͚̰̪͇̱̬̙̗̩̙͇̝͎̘͔̲̙̼͕͈̮̝̞̙̝̠̙̥̯̹͚̠̙̤̺̜̺͔̙͖̦̮̰͇̫͕̫͕̠̻͍̝̤̜͈̜͍̗̎͒͋̽̏̓̌̇͗̽̎̄̽̌̉̊͛̍̇̆͒͛͑̓̽̅͋̓̊̌̈̍̌̈͌̂̐͂̃̃̑͗͌͌̄͐̔̽͛̀̍̐̂̏͊̔͒̀̇͑̌̉̒̀̄͗͛̀̓̔̇̄̍̎͂̋̌̽͋͑͒́̏͗̎̅̊̈́̀̅̈́̂͌̍́̑̓̌͐̓͐̊̐̆͆͊̊̒̀̃͗̍̑͗́̀͛͋̍̋͂͗̔͋͗͊̇̍͂̓̉̔̐̇̇̅͛̌̊̑̑͋͂͂̓̃̎̓̊͊͌͌͊͋̄̓͛̏͒̍̊̓̐̿̀̈́̓̇̏̈͐͛̓̆̀͗͋̒̂̋̑̓̽͒͊̓͛̀͌̍̎͋͑͋̉̋̅̿̉͐̉̈́̍̈́̃̄͋̽̂̀̀̿̀͋̎͊̐̆̿̈́͘̚̕̚̚͘̚̕͘͘̕̕͜͜͜͜͜͠͠͝͠͝͠͠͝͝͝ͅͅ ̸̨̢̨̡̢̧̧̡̨̨̧̢̨̨̨̢̛͚̖̟͍̱͓̲̯̥͍͓͔̻̘̲̯̲̣̪̖̙̯̥̤͓̟̬̹͎̺̝̹̜̠̟͕̳͇̙̱̺̱̣̜͙͖͇̟̼͎̭̗͇̞̬̜̥̗͍̻̜̘͍̝̘̻̗͓͚͇̹̖̪̳͔̭̜̣̥͖̜̺͓̲̹̠͇̬̳͖͓̘̹͔͓̥̰̟͇̥͍̝̗̮̲̰̥̠̲̖̯̳͔̹̯̬͈̮̲͓͔̞̩͇͉̹̝͇̹̻̹̲̺͇̤͇͙͈̫͉͉͉̜̗̭̳̞̫̭͈͉̯͐̓͛̓͊͊͊̀́̀̒͛̆̈́̃͆̐̃́̓̍̈́̊̽̎̈̊̔̏̄́̒̽̅͊̈́́̂̊̃̆̅͊̏̈́͒́̓̋̈́̂͊́̑̇̂̃̂͌͛̃̈́͗͂̉̌̌̉̑̍͊̿̒͛͘͘̚͜͜͜͜͜͝͝ͅͅḩ̶̡̨̡̢̢̨̨̧̧̢̛̮̮̬͈̲̠̝̺̤̯̫̣̱͚̖̘̯̱͓̙̮̞̩͎̻͉͍̰̯̲͖̦̖̫̠̫̻͓̠͍͙͙̗̫͔͔̗̮̞̣͖̫̘̫̗̭̣͔̰̭͙͔̣̞̲͈̲̱̞̰͈̯̟̤͉̙͓͈̗̣̥̥͎̱̳̞̻̩͐̀͂̏͌̉́̂͆̍̎̑̀͋͆̌̃͛͂͊͊͐͌͋̽̓̃̋̋͐̍̏͗͒̄̅̿̎̿̉̂͊̅̃̒͋̽͊̈́̿̿̈́̒̓́̓͑̂̓̂̂̈́͛͆̄̐̽̃̽́͐͂́̄̓̄̎̃̍̈̌̌́͘̕̕͘̕̕͘͘̚̚͘̕͜͜͝͝͠ͅâ̷̧̨̡̨̧̡̢̨̨̨̡̡̧̛̛̛̛̛͎͙͔̬̗͙͓͔̟̻̞̤̤̳̰͖̜̳̜̻̬̰̭̮̪̱̬̩͚̮̳̻̥̤̦͖̙̺̫̻͙͚͙̜̝̪̗̭͙͎̗̫̠̠͍̻̩̬̰̖̪̤̳̥̟͇̬̱̘̫̥̯̗̞͇̼̪̰͔̠͚̬̬̖̻̟̜̱̳͙͙̬̰̭͈̣̱̗̺̪̺̟̖̫̜̥̬̮͇̺̲̤̟͇͙̰͖̦̤͈̯̤̞̘̺̣̩͙̝̝͓͉̭͉̲̹̬̥̭̰̰̰͍̱͈̫͔͎̺̳̜͍̖͉͇͉͌̈̇̊̒̓̔̒̇̌͌̍̔̑̔́͂̔͛̌̌̅̾̄̽̆͊̋̒͌̈́̅̿͊̆̊̑̂̄͗̇̐͂̃̏̉͗̓͊̋̒̇̓̅̍̀̔͑̈̋̈́̋͗͋̋̾̽̑͗̇̏͐̍̋̽̄̓͒̓̿̂̓̑̃̽̄̌̐̂̎́̑͐͐̂͐̏͌̆́͂̌͆͌̽̂̄͐̌̐͆͗͌̄́̎̊͊̃̔͋̾̽̒̇̑̔̔̉͘͘̚͘̕̚̕͜͜͜͠͝͠͠͠͝͝͝͝͝͝ͅͅͅͅͅͅv̴̧̢̨̡̢̢̡̧̡̢̛̛̛̛̤̜͖̳̭͖͈̣͇̗̰̟̯͓̮̹͍̘̥̗͈͔̤͚͖̤͓̘̱̻̪͈̫̻̬̣͎̬̲͙̙̤̖̱̬̙̟̞̳͖̗̩̣̝̹̟̟͓͚̣̱̰͔̰̮̠̘̗̤̼͔̣̰̰͔͙̟̞͓͍͍̫͔̱̤͍͕͚̩̲͇̤̥̳̥̜̲̖̖͛͗̽̈́̈̀̓̎̋̈́̋̋́͂̎̅̽̑̄̃̈́̓̅̂̽͛͐͛̿̾̃̑͂͛̋͂̌̉̊̓͌͋͗̌́̔̊̋̋͋̓̂̈́͊̐̃̀͐̌̽̋̎̒̿͆̐́̏̊̈́̉̍̃͒͑̓̀̄̈́͛̽́͐̏̈̉̒̑̌͛̾́̒̀́̃̌̾̋̈́͐̾̽͊͗̾̐̎̅͛̌̔̈́͒̄͂̿̆̀̒̈́̾͋̓̕̚͘͘̕̚̕̚̕̚͜͜͜͠͝͝͝͝͠͝͝͝͝ͅͅͅͅͅe̷̢̧̢̨̡̡̨̧̨̨̡̡̡̧̢̛̛̛̛̛̛̟̱̗͚̦̱̱̦̟̮̤̳̜̦͓̦̠̹̩̘̣͍̰͚̻͓̖͚̬̹̹͉̭̭̩͎̦̼͍̣͈̥̲͍̰͔̠̬̰̟͙̘̮̹͚̤͇̣̻̼͈̜̗̬͖̻̞͉̥̱̰̹̦̠̯͇͙͚̗̻̮̫͚̬̦̥͚͇͉̯̹͍͗̍̃̿͊̌͗̒̉̌͆̅͋̀̽̊̐̽̓̈͆̓̈́̎̉̏̈́̏̿̆̍̂̒̈̉̉̀͆͋̔̌̆̋̎̈́̌̒̉̓̎͗̈́͛̿̓̊̃͑̿̿͗̈́́̓̅̐̽͐̔̀̌̌̒͂̆̋͗̊͐̂̃̄̒̇̅̂̉͐̊̊̃̓͒̋͆̏̈́̓̅̀̿̉͆́̔̀̄͗̾̑̒̂̋͆̒͗̌̏̆̐͐̌͗̀̈́́̿̅͆̃̇̀̎̇̄̈́͛̈́͑͑͌̾̈̓̅̃͑̈̎̎̊̓̒̽̇̋͒̔̃̎̈́͒̀̂̓͐́̒̌̓̆̓̂̃̓̔̋̓̑̌͑̓̔͂̍̐͐͊̓͐̀̈́͒̊͌̓͘͘̚̕̚̕̕̚̚̚̚̕̕̕̕͘̕͜͜͝͠͝͝͝͝͝͝͝͝ ̴̡̧̢̡̡̢̨̧̢̡̡̨̢̡̡̨̡̨̧̨̡̧̢̢̢̡̡̧̧̨̧̡̡̨̢̡̛̛̛̝̦̮̬̤̣͔͉̦̼̪̥̫̺̞̯̲̟̜̭̬̺̩̖̬͙̪̱̣͉͇̮͓̩̗̟̥̩̪̜̯̤̭̹̺̠͔̝̹̖̻̩͚̣̜̪̥̝̥͕͔͚͚̥̯̜̯͈̝̦̺̠̖̦̹̱͖͈̰̮͖̟͎̺̺̩̱̦̙̰̺̖̺̤̩̠̥̗̤̲͓͚̞̞̮̗̙̱̺̹͙̺̞͓̙͙̠̹̻̱̳̬̙̩̯̱̼͈͙͉̠͇̲̘̤͕͖̦͕̰̪͇̪̺̪̺̺̳̙̭̭͓̼̬͔̜͓̞̩̦͔̘̺̘̜͙̘̖̞̺͎̣̘̗̻̺̣̘͎̦͈̰̳̦̤̥̮̺̞̭̜̺̫̪̘͎̝̹͙͎̱̜̟͍͔̙̝͍̩͈̺̥̼̞̬͈̳̳͓̖̖̟̖̙̺̫͕̙͙̰̤̖̼͈̖̲̻̞̞̦̙̯̘̔̈́̎̏̉́̊͊̍̌̊̎̋͗͂̾̔̌̈͗͂͊̐̈́̌̑̃͗̑̅͛͒̔͐̆̓̋͑͌͑̿͌̒̇͗͋̔̽̎̋̏̾͌́̓͊͌̊̽͌̍͐͑͗̿̎̃̐̀͋̒̇̓̎̀̈́͗́͌͌͌̂͆̄̄͆̓̋̇̐̅̀̍͊̓̉̅̾͑͒͂͒̐̐̈́̕̚̕͘̚̚̕͜͜͜͜͜͜͠͝͠͠͝͠͝ͅͅͅͅͅṃ̶̢̨̡̡̨̡̧̨̡̧̡̡̨̧̨̡̡̛̛̛̛̗̭͍̫̲̱̬̣̫͇̰̘̼̤̖̼̝̤̲̙̯͚̠̠̜̥͚͚̤̣̤̙̥͕̼̹̥̝͉̭̹̰̳̙͚̩̥͕̙̹̝͎̠̪͇̬̫̗̬̫̰͖͎̖͚͖͇̘͓͖̥̻͍̯̭̗͙̯͍̯̹̥̥̤̞̹̞̪͚͈͎̩̹̬̺̯͎̭̩̹̳̱̳͎̱̫̗͓͖̮̥͖̲̬̩̗̼̗̟̻̦̫̙̯͙͇̺̮͈͉̝̘͈̱̫͙̳̝̘̝͍̰̥͖̫͎̪̲̼͙̳̲́͗̉̍͛͗̈́̿̂̆̃̾̀͗̈̋̽̒̀͂̄̎̔̽͐͊̓̇͆̀̏̈́̏̔̒̃̂̈͌͌͊͋̓̐̇̓́͂̔̍͂̿́̃̔̍̽̊́̂̎̿͊̒̋̓͆͋̂̐̇͂̽̊͒̿̆̓̐̎̂͐̃̾̌̐̓̌̀̏͒͑́̒̂̈̂̒̓̽̈́̑͂̔̏̄͌̉͗̆͑́̂͋͊̎́͊̅̃͗̔̎̊̾́͛̅́̏̋̾̎̿̈̍͗̾́̀́̔͆̈̄̾̔̓̌͛̀̉̔͆̀̿̐́̌̔͒̈́̒̍͐̏̃̋͒̀̎͊̔̀͆̇̍͆̚͘̚̕̚̕̕̚̕̕̕̕̕̚̚͘̕͘̚͜͜͝͝͝͠͠͝͠͠͠͠͝͝͝͠͠͠͠͝͠͝͠ͅͅͅͅͅͅͅa̶̢̧̧̨̡̛̱͎̺͉̙̫͍̹͓̖͍͔̥̦͎̫̖̗̩̭̝̗̰͓̞͍͓̖͔̙̹̟͔̙̟͈̳̹͚̳̙̠̻̥̰͇͙̗̥͛̈́̐̂̓̇͛̒̽̉̓̑̀̍̾̓́̍͌̒͒̆̕̚͠ͅd̵̨̨̢̢̢̧̡̡̧̨̧̢̡̧̧̢̼͍͈̭̦̟̼̳͔̦͔̜̦̜͚̝͈͖̠̼͙͚͚͎͕̤̹̘̳̮̣̤̗̙͇̘͓͚͈͉̭̳͔̪̪̙͈̪̦͔͈͎̬̟̲͓̠̗͔̱̱͙̖̝̥͕̱͉̘͙̪͉̘̬͖̖̥̫̙͈̯͔͉̱͚̼̲̹̪͓͉̜̹̮̰̪̖̲̺͈̱̞̱̹̲̞̣͙͉͖̗̝̮̼͈̭̻̲̝̘̩̯̬̯͙̺͈̭̱͕̜̳̖̯͔̙̣̘̹͓͈͚̙̗̮̖̘̣͔̪̩̹̥͎̞̟̭̺̰̞̙̲̹͉̳̋͐̍̅̿̆͐́͛̋͋̄̃̈́̒̀͋́̎̏̀̏̈́̍̅͂͂͘̕͜͜͜͜͝͝ͅȩ̴̡̨̢̧̨̢̡̡̢̨̡̡̨̨̢̧̧̧̨̢̡̛̛̛̛̛̛̛̖̤̟̞̰͖̼͚̻̦̟͓͇̲̘̣͇̖̪̩͇̰̥̥̘̩̦̙̦̝͙̳̜͍̗͓̥̜̪̠̜̩͍̲̩̖̰̘̣̻̩̫̼̞͇̳̹̟͚̪̮̥̳̫͙͕͕̻̪͖͖̝̹͈̙̗̙̰͙̳̼̣͇͔͍̟̼͔̼̤̰̩̻̼͍͙̲̤͕͙̩̰̺̫̜͉̻̦͍̟͙͈̱̪͈̜̯̗̘̜͕͈̜̜̲̞̯̮̼̜͕͓̤̤̣̠͔̝͉̥̞̬̤͇̹͙̲̯͚̙̙̖̮͕̖͚̬͍̰̲͓͚͔͓̼̤̠̭͓͉̝͓̼̠̙̜̤̣̤̟̰̗̙͐̒̋́̈́͛̒̌̑̍̿͂͒̑̅̔̎̇̏͊͛͊͐̉̔̈͊̐̅̽̆͋̅̌͐͋͒̍̀̃̀̔̐̓͌̅̊́̎́̏́͒̐̌́͊̀̾̅̆̇̈́̇͗̾͛̇͆̅̆̌͑̔̉̆̊͋̎̏̈́̍̒́̄̑͒̿̐̔͗̈̈́͐̒͑̆̈́͊̔̐̉͋̊̉̅̿͆͗̀̆̔̋̈́̉͛̈̋̎̌̽̒́̇̓̄̄͐̒́͊͐̊͛̑̈̓́̿͂͑͂̇͋͐͗͑̈́̾̉̂͂͌͆̐̈́̓͋̋̃̀͊̀́̎́̓̀͑̊̌̅͗͐́́̌̿̅͒̂̾͒̒̽̃̋͗̊́̔̋͆̂̉͋̍̄̂̋̐̾̾̈́̐̌̆̆̆̂̀̊̀̏̆̀̌̌̊͆̉̋̌̀̈̄̓̂̑̾͒̐̓̽̔͗̈́̆̓͆̚̚̚̚̕͘͘͘̕͘̕͘̕̚̕͘͘͜͜͜͜͜͜͜͜͜͝͝͝͠͝͠͠͝͝͠͝͠͝͝͠͝͠͝͠͝͝͝͠͝ͅͅͅͅͅͅͅͅ ̸̨̨̢̨̧̢̡̢̨̡̡̛̛̛̠̩̰͍̰̼͖̗̻͇̟͖̰̫̝͎͔̰̝͕̩̳͇͉̬̞̤̞̯̜͇͕̻̲̜͕͙̫̙͈̹͓͎̱̖̖̺͕͚̱̻̯̺̗̗͙͓̰̣̩͖͉͍̞̝̺̣̖̬̤͈̝͖͓̦͓͈͎̲͚̙̼̗͖̣̝̺͇͔͚̙͕̱̳̺̲̼̳̦̯̩͖͎̙̝͎̬̖̮͓̞̯̜͙̭̝̱̲̰̜͚̗̞͍̦͍͓͔̫͍̜̗͓̣͈̩͍̉̌̈́̇̇̊̇̔̀͒̔̌̏͒̉̌͗̈́͂̒́̇̓͑̌̌͋͐͗͗̏̇̐̎̇̀̈́̆̿̈́̽̐̔̋͊̈́͂͗͛̉̅̀̓͂̄̓͋̆̌̔͌̍̂̇̂̓͆̽̀̇͐̀̽͒̀́̏͆͂̑̈͐̆̎͆̊̈̐̐̈́̌̔̄͊͌̐͂̿͆͗̆̈́͋̈̾̄͒̀̊̏͊̓̈́͊̎͌́̀̈́̐͒̽̓̀͗̂̌̈́̓͌͑̊̊̇̍̃̿̓̐͂̕͘͘͘̚̕̚̚͘͜͜͜͜͝͝͝͠͝͝͠͝ͅͅẗ̴̡̧̨̨̛̛͇͈̞͖͈͈̳̗̦̦͈̹̤͎̰̖͎̭̣͍̠̪̲̪͖̥̳͙͎͔̲͇͍́̊̔̀̇̀̃̀̿̇̽͛́̃̈́̈̈́͋̋́̌͋͗̔̎́̌̒̏̓͌̉̓͑̐͆͆̀̀̂̓̎̿͆̇͌͗̎̈́̃́̓̓́̈́͗̇̈́̆̈̌̐̎͛̋͛̅̏̓̄̐̈́̇̔͒͛̈̉̿͆̌́̓͂̐́͆͂̒̉́̀̔͆̾̅͛̾́͊͒̾́̆̐̃̊͛̊͘͘̚̕͘̚͘̕̕̕̚͘͜͜͜͜͝͝͝͝͝͝͠͠͠͝͝͠͝͝͝͠͠ḧ̸̨̧̨̨̢̢̢̨̧̡̧̡̡̨̢̛̛̛̛̛͍̥̩͇̹͖͕͓̯͍̣̠͖̘̻͖͔͔̳̺͕̬̳͔͚͙̺̤̰̦̲̠̬͕̙͇͉͎͕̤͈͔̘̦͚̥̞͉̻͓͙̠̣͔̠͙̖̰͓̲̬͎̲̻̰͔̳̻͚̬̗̟̮͖̭̺̠̘̟̜̬̠͔̘̳͕̯̹͙̤͓͍̻̝̮͖̞̳͍͙̹̻̜̰̥͙̬̳͙̼͕̱͎̺̝̗͇̪͚͚͇̰͙̱͓̯̤̩̦̝̝͇͓͈͚̥̗̼̦͍̟̩̮̪̰͉͖̝͖̤̝̙̪̣̟̗̳̪̗͙̱̹͓̩̝̬͇͆͑̈́̂̃̋̍̽́́̅̓́́̊̏̈̉̿́̋͑̓͂͋̈́̈́͋̾̍͑̒̎̓͒̔̋̓͆͌͊́͋̑̈̄̏̔̾͒̀̓̂͋͌͆̎͌͗̈́̈́̐́́̐̋͐̈́́̓̈́̀́̍̑͌͐̇̈̅̓̓͗͋͋͛͒͋̐̔͊̂̃̏̓̓͆̋̈̌̈́̆̅̉̄̉̉̏͊́̀̓̅̽̃̊͂̇͐͊͑͛̔͆͊̐̿͛͋̓̂͐̃͗̊́͑̒̑͛̌̇̅̆̿̒̆̀͒̒̽̎͒̌͒͊̆̆͂̉̇̄̽́̀̏́̍̆̚͘͘͘͘͘̚͘͘̚̚̚͜͜͜͜͝͠͠͝͠͝͝͠͝͠͠͝ͅͅͅͅḯ̷̡̧̨̛̪͚̯̘̖̗͚̥͓̹͉̭̮͉͓̜̦̦̹͓͚̮̱͔͇̝͔͕͇̜̹͖̝͊͛̾͌̓̈́̉́̓͊̈́̔͗̊̈̃́͒͑̿̿̀̉̈̓̀́̔͗̋̐̂̉͛͐͒͗͋̊͗̏͛͌̓͑͌̀̏̎̀͛̐̀̈́͆̔̍͗̉̑̓̅͐̈́̅͊̔̿̉͗̿̎̍̔͆̂̊̀̂́̅̂̂̿̆̀̀̈̓̀͊̈́̍̀̿̍̓̓͑͆̉̀̾̃̈̽͐̀͐̏̑͆̈̐̚̚͘̚͘̚̕͘̚̕͝͝͝͠͝͝s̸̢̡̨̢̡̢̢̢̡̧̡̢̨̧̡̧̡̛̛̛̛̛̛̬̱͚̼̰̠̠̺̜͓̫̪̪̪̥̪̞͔̝̜̞̮̟͓͇̯̪͙̘̟̫͈̭͍͉̲̘͕͍͓̮̬̪͙͓̻̩̩̖̞̼̥͉̠͎͕̲̺͓̬̜̩̫͎͉̝͎̫̳̘͕͍̟̼̥̮̪̮̺̞̣̗̳̘̮̼̣͚͚̜͉̣̞̖̹̼̞͓̗͓̣͕͓̪͕͙̫̟͈͕̝̪̮͔̻̞͈̦̫̪̭̗̖̰̰͍̫̭̬̟̦̺̤̱̲̫̥̦̦̮̮͚̟̠̤͉̝̬͙̥̪̳̫̮̥̥͈̮̼̹͍͓̅̏͋̑͛͛̒̊̄̃͋̓͐́̄̂̆͗̈̿̈́̈́͗͐̋̀̾̓͌̃͐́̍̀͌̄̐͆͑͐̽̍͌͊̾́̈́̂͊͌̾̑̑̃͒͑̀͒̆̎̿̎̇͊͒͐́̽͐́̄͛̀͌̊̇͛̿̓̌͒̀̒͌̈̀͑̐̐͑̒͆̎̽̌̂̽̑͋̅̇́̓̈́̈́̈̈́̒̑̍͋̈͊͒̊́̀͆̊̀̆̃̄́͂̍̾̊̏̓̍̎̈́̽̓̏̈́̃̈́̊̇́̌́̃͒̈́͐̆̀̈̽͛̃̋̅̾̂́̾̂̈́̐̅͌́́̅̈̓͂͗̏́̐͊̈̽̈́̅͋̈̊̃̏̔̋̃̎͂̇̈́͋̍̽̕͘̚͘͘͘͘̚̕̚͘̕̚͜͜͜͝͠͠͠͝͝͝͝͠͝͝͠͝͝͝ͅͅͅͅͅͅ ̴̢̨̢̢̢̨̡̛͎̣̲͚̟̞̣̱̻͍̥̹̖̰̫͈̗̱̺̹̳̮̱̯̞̭͉͎͎̟̻̮͕̤̠̮͇̱̭͉̯̮̣̲̯̹͚̬̠̞̭̝̦̜͙͖̯̱̣̺̬̬̱̠̼͚̟̲̯͓̥͉̗̥̲͎̙̂͐̀̊̓̄͑͐̄̓̈́͆̀͊̾͂́͑͛̍͗̊͛̽̾̂̓̋̕̚͜͝͠͝ͅͅͅg̵̛̛̛̛̫͇̙͙͓̥̘͚̀̇̔̍̓͒̇̄͊́̎̆̎̋̍̇͂͑́̍̿̌̽̂͒͒̆̊̆̐̅́̏̉̀̑̄̀̈́̾̓͂̈̄͛͊̇̏̂̿̽̐̆͋̉͂̏̿͌̏̎̑̒̇̎̍͂̆͐̓̆̍͛͆͋̆̾̾́́̈͆̈́͐͌̏̽̐̑̇̆̐̎̒̄̆̓͌̇͛̑́̊̆͋́͋̍́̆́͂̈́̒̈́̇͆̇͐̍̉̍̚̕͘̕̚̕̕̕̕̚̕͘͝͝͝͝͝͠͝͝͝a̵̡̢̢̡̡̢̧̨̨̨̢̡̨̡̧̢̡̡̛̛͈͙̪̺̳̹͎̝̪̩̱̮̪̪̫͖̞͇̹̫̥̱̦̲̜̙̝͍̮̲̩̖̝̥̳͖͇̦̤̜̩̩̞̞͚̭̫̭̘̝͈̩͓͖̬̺͙̜̮̩̩͎͉͍̗̻̟̩̟̭͉͈̩͍̝̹͚͕̰̘̲̗͙̰̣̘̤͙̳͕̟̯̫͙̬͙̦̞̬͔͕̩̮̣̻͚͓̘̞̺̘̻̪̥͈̜͙̩̘͈͈̙͂͂̒̌̎͑̀̀̀́̒̽̔̀̑̓̋̅̓͜͜͜͝͠͠ͅͅͅṁ̷̛̛̛̛̮̈̆͂̎͊͛̆͂̂̿̈́̾̐̽̉̍̅̐̈́͊͒̐̍̓̌͆̂͆̌̅́̍̌͗̽̀̍̇̆͐͛̓͒͗̓̇̉̔̌̊̅̈̏̈́̃̔̏́̄̈́̌̂̈̈́̃̉͛̇̎̊͊͆̈́̒̋̇͛͌̎͑͑͊̃͌̄́̀̀̇̄̂͒͌̽͛̅̑̉́͋̎̚̕͘͠͠͝͠͝ę̷̧̢̨̢̨̢̢̡̧̨̡̧̡̛̛̛̪̥̜͓̝̤̟̘̼̬͙̲̞͈͔͇̗̣̝̬͙̝͕̗̲͎̖̱̺͙̖̖͉͈̲̘͉͎̬̙͔͈͈͔̥̠̞̫̯̫̰̤͉͔̭̻̭̫̯̠̰̯̣̺̮̣̺̼͔͖͓͚͈̩̬̺̰̘̳̝̦͍͈͇͖̘̙̳̰͉̠̬̼̺͕̠̲̩̬̣̪͕̻̜̪̠̣̯̥̦̙͎͓͓̳̗͚̣͈̦̹͓͙̰̯͉̘͈͓̭̪͚̼͉͉̝̔̀͂̂̃̿̌͊́͐̿̈̎̃̚̚̕͜͜͜͝ͅ ̶̡̨̧̢̢̡̨̧̢̡̨̢̨̡̨̧̨̛̛̛̛͈̞͔͚̭̖̪͉̖͇͍͇̯̯̜̗̙̱̤̰̺̣̫̗̪͎̘̭̫̞̞̘̱̙͍̺̪̭̯͎̠̳̙͇̯͖̪̙̘̥̟͉͎͉͍̻͇͓̻̣͉͇̫͖̲̬͇͖̻̝̱̲̺̥̱̱͙̥̻͕͓̲̱̥̬̝̲͓̱̠͇̗̮̩͓̝͔͈̲̻̦̼̟̱͇̟͙̲͎̣̣͍̱̠̲̤̻̝͍̖̻͉̺̯̩̙̗̖̜͖͖̭̻͚̙͖͕̻͈̜͎̻̰̯̲̖̫̱̣̘̥̩̟͛̈́̈̃͐̑̑̇͒̊͂̓̑̑́̑̈́́̏͒͗́̍̐͂̀̽̇́͋̈̎͒͋͐̀̀͋̒̊̃͌̓̎̓̂̑̓̈̇̅͑̔̎̈́͂̈̓͑̔̈̉̒̋̽̂̉̈́͋̿͒̽͊͛͂̌̎̑͆̓͌̈̐͂̇̀͆̓̀͗̾̋̿̽̈́͐̈́̓̓̅̀̃͒̋̓͐̊́͛̈͂̅̓̇̄́̀͆̀̑̓̒͒̈́̓̓͐͗̈́̓͒̂͗͌̾̉̂͗̄̎̌̿͛̄̄̊͋̄͑͆̀͗͂͌̄͂͋͌̃͋̏͊̿̍̍̈̒̀͐̇́̈́̃̏͋̅̈́̇͆̈́̔̿̆͑̈́̄͋͗̆̈́̑̈́͗̉̀̃̒̔̃̃͆̏́̄͋̐͋̎̀͑̋̌͌́̀̓̔̉̏̏̚̕͘͘͘͘̚͘̕͘̕̚̕͘̕͜͜͜͝͝͠͝͠͝͝͠͝͠͝͝͠͝͝͝͝ͅį̷̡̡̧̢̡̡̨̢̨̨̡̧̢̢̧̨̢̛̛̩̱͖̼̜̙̭̘̥͎̣̤̩̜̖͔͉̞̣̝̗͚̺̭̜͖͕̰͈̲̫̖̘̼̙̠͖͖̤̭̟͕̺̝̝̹͈̺̜̰͇̝̱̜̗̭̺̳͔̖̣̰̩͙͕̝̟̥̮̭̝̣̳̫̠̥̩̗̙͕̪̜̗̖̗̰͍̱̬̤̲̳͔̱̪̼̫̙͚̲̠̥̲̘͇̣̯̤̦̜̹̞̟̹̦̬̳̘̗̯̝̤͚̑͐̈̽́̋̽̀̀̋͌̈́͛̏̎̎̔̋͑̀̑̒̿̾̀̅̊̈͂͒̾̓̐͛̆̈́̀̌̽̅͑͋̂̄̒͑̓̉͛̑͂̔̽̍̽̑̽̓̉̈́͋̀̐̆͑̈̒̍͗͆̅̍͋̆̀̂̓͗̓̈͐̍̅̏̔͆͒͋̈͑͌̅̌̈̎̓̆̈́̊͘͘͘͘̚͜͜͜͜͜͜͜͜͜͜͝͝͝͠͠ͅͅń̶̡̡̢̨̧̢̡̨̡̢̢̨̨̢̡̧̧̛̮̠̯̱̤̝̹͚̤̰̞̦̳͈̣̤̝̗̘̝̥̯͕̦̹̙̪͚͎͇̭͔̜̝͖̗̤͇͕̝̝͓̹̘̺̥̫̹͎̹͉̙̺͍͔͇̰͖̠̬̙͉͈̰͔̳̤͉͈͎̘̗̻͎͇̫̣͕͖͖͚̮̩̞̜͍̥̝̟̙̩̩̞̳͖̳͍̹̱͎̫̖̖͕̪̭̗͓̣̗̯͓̥̮̲̰̯̘̙͈̯͎̭̫̼͚̘̞̫̦̠̞̪̯̲͎͎̪̤͕̖͕͈̮͉̠̼̀͗͊̒̎́̏͂̐̈́̓̉̇̓̀̈́̈́̈̉̇̃͊̒́̄̉̆̃̐̈́̈́̀͊̈́͌̋̈́̔́̀̎́̅͛̈̎̾̚̕͜͜͜͜͜͝͠͠ͅͅͅͅͅͅͅͅ ̷̧̨̧̢̧̢̢̨̧̢̨̨̡̨̛̛̛̪̠̗̼̘̹͙͖̜̺͉̺͚̗̠̹͉̲̺̠͙̣͙͕͕̣͎̱̯̩͚̮͎̮̪̩͚̩̪͖͔̯͕̩̯̳̤̟͖̥̫̟̠̥̟͖͈̮͉̱̯͓̬̺̩̻͎̣̻͖͉̬͓͇̬̟̮̠͕̯̥͚̫̘̠̝̞͉͍̦͕̩̫͇͖̰͉̼̖̪̻̗̣͙͖͍̙̟̪̙̘̟̬̦͙͇̠͉̙̼͉̖̦̱̯̤̭͓͓̹͈̼̹̙̯̞̻̳̭̤̱̦̝̩͎̦͚̪̈́̉͗̀̎̀̐͋̇͌́̄̆̀̑͐̒̉̀̑͑̂̇͂͗̀̌̐͑̀̾̿͊͌͊͌͊̃̿̇̓̔͗̀̋͐̈́̈̈́̈̎̎̍̇͗̇͐͛͌͗̆͊̓̀̽͛̔̈̂́̊͊̆͂̎͑͗̋̌͗͋̏̿̓̄̈̎͑̈̌̋̄͑̄̒̅͛̈́͒̈́̍̀̇͗̄́͊͒̄̈̀̈̚̚̚̕̚͜͜͜͝͝͝͠͝͝͠͝͠ͅͅͅͅţ̵̢̨̨̢̢̡̢̢̡̢̧̨̢̨̛̛̛̛̛̭̱͓̤͕̩̻͖̫̙̤̞̺̥͎̙̣̱̼̫̲̖̪̲͎̼̜͚̱̮̖̫̩̩͈̥̼̘͈͙͍͈͍͎̺͓̖̯̠̖̮͚͉̥̤̮͇̙̣̪̰̫͓̜̜̹̥̗͙̥̞̳̮̬͔̼̻̱̮̺̲̫̝̥͉̪̬͔̪̭͕͚̟͈̣̤̟͈̪̻̩̠̹͍̼̙̮͙͔̮͙̬̥̼̮̲̭̞̯̻̰͕̲̓͑̋́͋̒̀͊̿̊̎̾̅̄͑̔̈̈́̐̋̊̈́̈́͂͌̄͆̆̂̊͐̐̾͆̊̅̋͗̈́̓̿͊̈͊̀̆͆̂̃̎͛͑̆̔̆̐́͊̈́̃͋̈́̕͘͘͜͜͜͝͝͝͠͝ͅh̵̨̨̡̢̢̨̨̨̨̧̛̛̛̰̗̱̳̱̩̱̖̫͉̼̦̟̯̳̘̺̞̱͎̗͚͚̥̗̻̲͚̫̪̝͖̜̠̤̼̤̹͈̯̩̦̩͔̠͎̭͔̮̥̳̩̼͉̝̗̠̥̖̣̪͔̹̬̻̺̘̩̜̤̙̤͉̜̯͇̲̬̞̞̗͕̙̣͓͈̬̣̟̜͔̖̞̘͖̥̣̻̣̖̭̥͓̦̪̘̭͈̜͕̜̼͇̻̻͖̬͓̰̺̱̝̱̫̠̩͔̺͎̟̦̩̣̼̟̱͖̲͓̦̼͔̗̩̭͖̯̰͈̰̲̭̩͔̳͔̩̤̤̞͇͍̫̄̌̄̈̂͋̆̈́́͂̒̅̔̐̋͗̂̈́̓̽͗̊̌͋̍̍̈́͌̂̌̀̑̌͒̆͑̒̒̈́͛̀͆͂͊͑̅̇̓̓̋̄͑̈́̔͊̓̓̐̎͛̒̐̽̓̋́̓̍̑̊̉̓͂͋͐̆̈́̆͌͋̒͂͋̽͊̅̽̄̀̓̅̐͆͊̋̋̒̈̋̔̚̚͘͘̕͜͜͜͜͜͜͠͝͠͝͠͝͝͠͝ͅͅͅę̸̧̧̨̡̛̛̖̱̘̱̜̭̞̘̬͓͎̹̰͉̳͖͇̣̮̼̱͖̝͈͉̜͚̘̞̝̫̝̼͙̼̥͉̜͉̖̼̹͙̝͖̻̲̺̩͙͍̱̲̟̺̟͚̩̣̹̺͓̹̐̐͌̂̉͌̊̏̐̆̍̅̆̌͋̃͒̓́̀̾͌̀̒̋̄̑̋́̉̒̃͊̌̒̇͒̔͋̉̆̓̈́͌̽̅̎̅́̓̂̈́̇̌͂͛̅̈́͋̌̆̾̾̓̃̀͂͌͌̈́̄͊̂͌͂̒͆̒̈́̀̏̃͋̿͌̾̀͑̅̏̅̉̀̽̃̏͌̐̿̈́̋̎͌̓͒̎͂͊̽̋͊͂̉͒̂̓̑͒̌̅̍̀́̈́̎̔̅̓̓̃̒̈́̅̆̈́̂̈̇͌̍͋̀͂̈́͂͗͋̓̒̎̉̀̑̾̐̇̌̓́́̏͋̀̓̉̍̒̀͗̇̐̆̈́̄̃́͆̂̉͛̋͊͌̕̕̚̕̚̚͘̚̚͘͘̚͘̚̚̕̕͜͝͝͠͝͝͝͠͝͠͝͝͝ͅ ̷̡̨̡̨̨̢̡̛̛̛̖̙͉̩̥͈̺̭͇͈̯̘͉̫̰̩̱̳͙̯̗̞̩̖̰̪̞̠̼̺͉̟̬͔̯̼̱̩̰͚̞̘̦͍̼̗̜̠̱̻̠͈͓̖̬̺̘͚̖̭̟̤̘̮̙̥̝̻̤͚̼̣̼̯̝̼̣̤͚͙̺̓̓͗̓͋͗͆́̋͑̍͆̊̊͑̾̂̃̆̍͋̉̒̋̓̑̽̌̅̆͋̾̾̅͗͐̊͊̿͛̀̀̏̂̉͛̿́͆̀̐̈́͋͐̏̒̂͋̄̌̑̽́̂͐̉͌͑͒̿̀͛̆́͋̏͋̉̽̍̇̏̃̇̀̎͆̎̿́̾͗͗̌͌͐͒͐͆̀̔́̅̎́͊̓̂̿̄̆̿̇̑̄̈̂͒̂͛̎͂͛͂̆̈́͆͐̌̅̐͛̎́̓̒̃̅̆͆̊̾̎̊̎́̆̀̓́̍̈́͗̈́̎̑̀̒̃̂̔̅̈́̔̌͌̉͊̍̔̇̍̅̍̍͌̊̃͋͋̈́̄̍͂̏͂̾̽̀͆͒̀̌́̽͛͘̚͘̕͘̚̚̚̚̕̕̕̕͜͜͜͠͠͠͠͝͝͝͠͝͝͝͝͝͝͠ͅͅͅf̵̡̨̛̛̛̛̛̛̛̛̛̛̹̰̼͕̥̱̫͚̥̫̮̘͎̹̩̰͍̝̲̗̮͚͚̣̟̙͓̘̪̞̠̯̓̈́̈͆͐̒͗̉͌̒̍̍̎̍̋͐̈́̑̉̒̃̓͂̂̈́̇̈́̌͑͌͊̉̐̎͗̀̽̉̑̀̓̒̍̈́̈̾͗͊̓͊̀̽̈́̑̒͛͋͒͊̓̎̎̾̍͛̂̍̅͑̆̀͋̈́̏̊̋̈́̏̈́̿̎̿̐̽̃͌̓̇͒̀͑͊̀̎̐̃̇̓̿̆̒̾̔́̔̀͋̓̎̐̏̈́̒̀̅̅̍̒́́̏̏͒̅̊̈́̿̽͋͆͑̄̒̒̌̍̈́̈́͛̈̆͗͌̂̑͗̋̇̈́̀̒̌̃̾̒̓̽͐̃͐͋͌̌͂̽͒͑̑̉̃̂̆́̾̃̀͆̈́̕̕̕̕̕̚̕̕͘̕̕͘̕̚͜͝͝͝͝͝͝͝͝͝͝͝͝͝͠͠͝ͅī̸̢̧̢̨̢̡̡̨̧̨̨̡̛̞̞͓̳̤͖̝̰͉͇̯̦̻̳̟͈̻̭̗͇͉͈̝͇͕̪̫̖͕̣͖͇͚̩̥̞̻̙͈̭̭͕̥͚̦͕͇͇̞̦̤̭͚̘̮̖̙̠͉̠̲̣͇̟͕͕̣͎͓̰̦͖͕̣̲̯̺̼̱̰̱̖̙͍͚͙̠̼̝͇̖̻̜̖̹̪̬͓̥̺͈̼̫̥͇̦̬͖̪͎̪͚͍̗̫̯̅͋̍̿̑͌̈́͋̒̾̋̊̔̀͋͊̎̊̊͋̍̆̉̅́͗̑͋͗̓̾̌͘̚̚̚͘͜͜͜͜͜͠ͅͅͅr̷̨̧̢̧̨̡̧̡̧̨̢̨̧̢̡̡̛̛̛̠̹͉̫̱̪̼͓̺̫̹̘͈͇̭̦̬̝̙͍̱͎̣͙̹͚̗̰͔̜̗̬̜͎̯̫͉̘͓̞͎̖̜͇̙̟̞̰̤͖͎̖̳̬͕̩̥̟͈̠̻͕͔̭̥̲̟̭̥̙̤͔̹̯̘̠̱͖̹̳̪̦̣̝̣̯̯̱̗̯͕̬̗̠̻̖̥͌̂͆̓̈́͌̽̃̐́͛̃͗̋̏̔̋͗͌͗̇͆̎̈́̅̽̉̔̈́̓̊̀̈̒͆͌̆̂̊̏̈́̿̾͗̈̐̓́̐̇̔͐͛̓̄́̊͂̑̅̍̔͋̄͋̓́̈́́͐̇̈̈́͛̂͛̉̀̾́̍̍̌̂̈̊͌̂̊͆͗̒̉̒̒́̏̈̀̽͗̈̔͑̇̏͛̊̀̄̓̊͆̏́̃̈́̾̉̈̒́͑̽̇̐̽̑̌͐̀̈́̍̾͗͛̑̈̈́̀̈́̔͊̔͗̒͑͆͌̈́̇́̉̀͂̾̃̀̍̒̓̍͗͌̔̉̈́̉̽̋̇̍͛̄̏̑͆̍͒͒͐̀̀́͐͋̑̾͂̀̔͐̋̑̆͆̿͂̅̒̈͋͊̄͋͑͗͋̄̊̇̂͗̓̋͑͐̆́̅̓̏̿́́̎̅̆̏͊̄̓̄̂͛̔̀̽́̒̃͊̑͌͆͑̓̇̂̐̓̐̌͑̀̑̋͒̚̚̕̕̕̕̚̚̕͘̕͘͘̚͘͜͜͜͜͠͠͠͝͝͝͠͠͝͠͝͠͝͠͠ͅͅs̸̢̢̡̧̡̨̧̨̛̛̛̛͈̲̝̪͓̻͎̠̙̣̙̙̹̯̞̙̭̥̼̞̩̦̯̝̱̯̙͈̱̗̹͇͎͚̻̩͙͖̦̤͚͈̯̯̤̦̘̥̯̗̱̠̱͓̖̜̪̣̹̱̣̪̘̗͖͇̖̠̱͓͉̖̤̣̬̼̠͈͎͕͙̗̝̞͓͍̙͔̩̪͖̥̗̜̘̱͖̫̳͉̞̞̹̮̽̔͂̐͂̃̆̄̎̓͋͂̿̉̑͂̓͛̂̄͐̓̈́̏͆̏̌̉̈̈͗̃̅͌̀̿͒́̈͆̈́̍͑͆̽̇͒͛̍͒̆͒̿̽̓̃̐̒̉͑͊̾̔̃́̄́̄̔̏͗̅̾̊̾̓͗̉̊̏̋͆̂͐̾̂̔͗̒̇̒̊̔͒͗̇̀̋̀̃̌͗̾̌́͛͗̇̓̂̃̂̓̇̆̐̀̌͌͆̄̋̔͌̒͌̀̉̃͆͆͗̔̄͗̇̿͋̆͆̂̓̅̑̃͊̅̿̋͌͒̂͋̀͒̒̍̏̇͗̀̒́̍͛̀̓̑̇͂̒̓̽̒̎́͌̋̉̍̂̋̾́͑̈́̊͐̈́̏̔͑͊͌͒́̂̓̆̌̀͗̊̀͊̓̉̓̀̅̚̕̚̚̚̕̚̚͘̕̚̚̕̕̕̕͜͜͜͜͜͝͠͝͝͝͝͠͝͝͝͝͠͠ͅͅͅͅţ̸̧̧̢̨̧̢̢̡̨̛̛̛̛̛̪̗̫̜̥̻̝̪̙̠͚̤͕͍̯̩͎̺̫͙͉̖̻̻͈͖͙̣̭̖̰̗̪̥̥͙͓̥͓̼̗͚̥̥͖̘̫̫̜̳͈̝͎̮̲̳͙̘̲͙͇̺̪̈́͌̈́̊͗̿̍̑̂͌̌́́͗̆̾̈́̉̍̈́͐̀̐̾̽͒̍̊͛̉̐̏̈͛̃̊̍̀̆͗̄̈̒͌̇͒̋̐̑̈̍̈́̍̍̃͗̄̽͌̓̆̈́̽͗̀̈́̂̋͋̓̒̈́͂̃͂̇̐̐͂͒̌̑̍̓̆́̋̑̈́̅́̔̊͌͒̓̑̊̇̑̓̌̽̈́̒͑̒͑̓̐̋̆͐̿̔̄̏͆͐̈͛͑̃̀͒̅͗̓͛̀̍̄̅̒͊̉̎̏̉̒̈́́̅͂͋͂̈́̎̏͛́̂̍̐̈́͗͐̅͊͋͑̽̀́̎̂̑̈́̍́̓̇̆̀̐̋͛̃̐̂̃̒̆̌͂̚̕͘̕͘͘̕̕̚͘͘͜͜͜͠͠͝͝͝͝͠͠͝͝͠͝ͅͅ ̷̡̡̨̨̡̧̢̢̡̧̛̳̟̞̤͕͉̼̭̦͙͔͕͓͇͚̠̟̝͕͍̰̫͍̜̪̝̼̮̹̦̮̲̹̥̥̝͈̖͖̞͇̺̞̭̜̼̳̥̗͇̜̯͚̣̖̺̼̦̰̝̫̞̜̼͕̠̲̳͇̲͎̙̻͉̪͍̰̺̩͙͚̥̮̘̺̱͉̼̩̩̣̜̰̘͍̬̪̙̫̝̪̥̂̃̓̃͑̐̔̅́̆̎̃̈́͑̇̏̅̊̐͑̀̍̏̒̓̾͊̈̀͋̾́͛͋̌̃͂̒̅͗̿͋͒̿̇̊͐͘̕̚͜͜͜͝͠ͅͅp̷̢̢̢̧̡̡̧̨̧̡̨̧̡̢̡̧̨̨̨̡̢̡̡̡̛̛̲̗͚̩̪̙͔̮͍̞̩͓̹̭̹͕͚̪͖͇̫͕̥͎͎̹̖̙̮̺͚͙̹͖͉͙̮̣̼͚̭̖͚̦̣͍͚̣̣̫̹̙̞͖̼̻̜̼̣͈̺̥̦̣̯̞̮̞̥̜͓̪͓͈̰̳͇̘̯̙̹͖̻̜̭͚̳͈̟̬̣̥̲̻̹͓͎͚̭̱͇͇̼̥̞̘͇̬͍͕̳͖̺̻̥̦̤̘̪̱̬̱̹̔̀̉̋́̍͌͋͊̉̐̈͆̈̎̍͛̈́͒̔̆̿͆̔̀̾̈́̇̏̿̊́̂̑̈̌͐͗̀̍̈́̎̍͒̌̆̋͌͋̔̌͗͛̏̃̈́̃͋̉̆̅̓̊̇̈́̀̅͆̽̽͑̀͒̈́͘̕͘͜͜͜͠͠͝͝ͅͅͅͅͅl̴̢̡̨̡̨̢̢̧̢̧̨̨̧̡̨̢̢̨̨̛̛̛̛̛̛̻̯͈̘̰͔͉͍̼͕͕̲̬̼̤̳̜̹͙͈̩̳̹̘̱̯͍̥̘͔̬̤͙̩̥̝͔̫̻͚̘̱͔̖̯̲͖͉̥͚͍̝͍̬̳̺̗͉̙̫͔̬̬̬̮͎̲͈͚̠̗͓̣̜͍̯̣̭̬͎̙̲̯̹͔̤̻̪̜̤̗̘̪̤͕͈͇̰̥̞͈͕̜̠̭̖̼͓̹̬͈̹̳̙͎͎̻̗͇̯͖̟͚͙̲̖̬̼͓͓͇͙̼̙̙͔͎͕̠͕̬̦͓̣̪̜͔̘̙̲̣̭̯͕̰͓̯̰̱̩͕̰̝̞͉̰̞̣̣̳̼͖̗̩̹̗̪̩͚̘̲̞̰̣̜̬̫̠̭͕̹͓̗͖̠̺͍̞̟͍͚͎̪̤͍̜̖̲̰̇͐̇͑̉͊̉́̏̅̀̿̂͐̊͌̄̄̈̑́̓̃̾͐̀̎̐̄̂͂̊̒̒̊̆̌̿́̊̆̉̀̽̓̽̓́̐̎̐͌̅́̿̏̀͛̓̈́̎̏̄͐̈͊̉̓͑̂́̋̂͒͒̒̿̎̂̿̈́̂̊̂̄̉͊͛̆̈́̓̓̑̏͌͛̅͛͛̾͆̿̂͂̏̅̃̈́̂͛̔̑͂̊̀̌̕̕̕̕̚̚̕̕̕͘͘͜͜͜͠͠͝͝͝͝͝͠ͅͅͅͅͅả̴̧̨̡̨̛̛̛̛̛̛̬͖͓͓̦̠̙̞͉͖̳͕͕͕̼̘͈̗͕̹̗̻̟̥͔̬̥̮͙͖̥̤̙̹̲͕̪̮͍̭̫͕̥̟͚̥̗̙̟͙̠͎̻̪̮͖̥̯̪͈̘̪̜̠̣͇̙͉̹̤̮̦͉͕͍͙͍̝̭̭̱͎̹̭̙̥͍̮̤̺̩͔̗̮͚̘̖̒̏̌͂̇̊͗̑̈̅̒͌̈́̈́́̀͋̿̔́̿͊̐̉͛̽̆̇́̿͂̐͛̐̌̔̓̿́̒̀̓͒̒͒͂̔͌̓̂́́͗̐̚̚͘͜͜͝͝ç̵̨̨̡̧̧̢̧̡̧̧̡̨̢̢̢̧̨̢̢̨̨̧̨̨̡̢̡̛̛̛̛̛̗̱̭̝͈̘̖̝̝̘̖͎̭̹̻̺̠̘̲͚̱͍͚͕̬̤̥͖̜̗͎̩̞̺̲͚̱͕̗̯͕̭̲͔̮̯̘͖̗̟͉͈͔͖̗̯͇͇͉̪͎̻̪̙̟̬̟̫͈̝̙̜̲͍͈̮̤͎̣̼̠̞̰̣̱̩̤̺͎͙̖̳̖̮̞͓̱̳̻̝̝̟͈̰̱̺̫̟͖̖̣̻̙̻̖̣͉̰̜͚͎̟̻̙̪̲̙̹̱͓̩̺̮̪̖̲̥͍̲̮̙̥͔͖̹̖̳̤̼̟͇̻̣̪̩̼̯̭̞͉͓̥̜̙͕̰̠̹̮̻̘͙͈̙̝͓̰͈̯͉̟̰̖̭̞̺̻͎̟̖̩̤͚̯̤̰̥̯̝͔̙̱̩͉̫̦̬̹̼̙͙͎̳͇̖͚͔͇̰͍̙̗͔̗̱̝̯̻͕̘͖̬̹̱̘̻̣̲̟͚͔̺͇̲̙̼͎̺̈́̐̀̎̾͐̽͗̏̈̓̋̀́̔͛̑̈́̓́̄́͌̂͗̉̓̋̾͗̑̀͊͗̐̍̐̔̈́͛̈́͗̔̈̽̿̿̓̃̎̌͆̍͗̎͑̏̈́̾̑͌̏̃́͗̀̈̀́̐̈́͛͂͆̿͐̇̃̑̂̋̉͋̋̓̔͗̉̀̒͗͒̇̌̀͑̿̈̈́̆̋̇͛́́͗͋̏̀̇̓̈̍̈̈́̉̔̉͒̅̆̋̿̄͊̏̐͊̕͘̕̕͘͘̕̚͘͘̚̕̕͜͜͜͜͜͜͜͜͜͠͠͝͝͝͝͝ͅͅͅͅͅͅͅͅͅè̶̡̧̨̡̧̢̨̧̢̡̧̨̢̨̧̧̧̛̛̛̛̛̝̣̤̥͇͙͖̫̯̲̻̦͉͇͇̮̖͓̬͉͇̙̪̹̱̠̗̪̩͖̤̰̘͙̻͎͚͓̥̝͕͖͔̪͚̗̯̟̠͙̙̹͔̠͍̖̞͔̮͓̯̣͇̦̝̱̣̦̣͚̲̲̜̬̞̹̳͚̦̮̤̤̗̯̰̣̥̙͔̫̪̙̥̬̰̘̰̮̹̜̰̹̜̬̜̼̯̦͇̠̝̹̜̗̬͚̣̞̻̘̠͕͎̱̣̼̰̖̬̗̻̬͉̘͉̭̬̠̩͉̼̞̭͇̪̙͇̫̺̬̠̟͔̼͚͕̞̪̣̦̠̜̫͍̺̳̱͉͎̮̥͚͎̻̳̯̠͍̻̰̫̤̟̖͖͙̝̰̜̺͇̰̮̰̯͈̻͈͚͔͍͎̼̤̦̬̘̜̥̜̹͈̮̥̦̘̤̙͈̭̯̫͍̬̟̮̗͈̺̙͔̭̟͕̰͉̩̦͔̪͓͕̺̼͍̳̞̣̰̙̩̙̮͖̪͕͎̝̞͎͎͈̼͈̦̹̘̺̏́͒̀͐̐̂̇͛̄͐̽͂͊̑͂̽̀́̽̈́̑̋̒̏̍͒̏̆̽̒͒̀͊̉͊̈̄͋͂̐̄̆̓͋̏̈́̀͌̽̿̐͑̊͑̈́͋̿̿̓̒̓̑͆͗͒̊̍̉̄͐̈͐͒͒̀̉́́̓̆͋̎̇͛͒̇̿̉̎̈͊̆͊̆̇̂̈́͊́̂̑͛̃͂̋̅͒͌́̇͗̾͒͑̌̆̈́̒̃̄̐͒̓̐̏̎̀̇̀̿̓͊̀͌̍͛̑̉́͌̔̈́̒̃̆͂̋͋̈́̓̽́̕͘̕͘͘̚̕̕̚͘̚͘͘͘̕̚̚͜͜͜͠͠͠͝͝͝͝͝͝͝͠ͅͅͅͅͅͅͅͅͅ");
        }
    }
}

BATTLE Code
**********************************************************************
/*Interactive Course Simulator: Computer Science 2017
 * June 15th, 2017
 * By Kevin, Owen and Jatin
 * This is the Battle form, which represents the assignments in the course
 * You must defeat the various bosses to complete the assignments by answering questions*/
using System;
using System.Drawing;
using System.Threading;
using System.Windows.Forms;

namespace prjICS
{
    public partial class Battle : Form
    {
        Random r = new Random();
        int completion = 0;//Completion level of assignment, the enemy's "health"
        int sanity = 100;//Sanity of the player, the player's "health"
        int question = 0;//Used to randomly select a question to "attack" the enemy
        int errors = 0;//Total number of build errors (wrong answers)
        double assignmentMark = 0;//Stores the player's mark on the assignment
        Boolean lastKill = false;//Set to true if the final boss has been defeated




        String glitchText = "c̴̨̢̡̡̨̡̨̢̧̡̡̧̨̡̡̨̛͚̣̦͖͉̳̺̖̯̗̹̬̱̲̗͉̠͈̙̬̳̞̥̯̥̮̠̥͚̬̫͓̖̳̱̪̯͈͎̝̬̺̺̻͙̦͈͚̹͔͔̩̜̩͔̪̱̼͖̭̰̘͕̼̲͉̭̤̼̻͚̩͎̤͈̙̻̬̯̼̜̲̮̦̪̗͍̫͔̰̹̘̥̦͉̖̘̘̻̲͉̳̘̤͉̯͇͈͎̜͎͔̻͙̘̱̮͚͎̟̱͇̣̙̖̮̪̮̭̻̲̩͔͍̤̻͈͚͗͛̌̌̐̅̀͑̔̆̿̇̊̇̋̏̔͐̉̀͆̓̓́̆͑̿́̒̆̂̀̾̈́̈͐̾̾̊̽̈́̀̀͊̓́̓͌͂̈́͐̚͘̚͜͜͜͜͜͜͠͝ͅͅͅͅͅơ̶̡̧̡̡̧̢̢̧̛̛̛̛̻̜̖̳̳̦͓̠̘̫̘͎͎̗̻͈̲̩̭̫͙̱̰̳͚̞̙̺̺̝̜͉͍͓̲͎̟̝̳̬̱͚͕̪̝͎̗͇͎͍͖̰͕̦͍̮̬̻̜̦̞͙̗̥͍͓̙̱̖̟̩̮̲̮̟̼͍͔͎̘͓̼̭͕̝͍̻̜̹̖̦̟̙͇̹̥͚͕͍̹̤̞͈̬͓̭̫̼̖̤͈̭̬̠͉̙̩̥̠̬̮̮͚̰̖̫̙̈͌̑͌̏̐̌̋̓͂̈́̏͑̍̊̈̀̒͂̒́̃̒̓͂̇̎̃͒̓͋̃͆̌̇̆̃̎͗̈́͊̍̀̄̿̐́̏͊̈̄̊͒̑͗͌̀̆̊͂͛̐̓̈́̂͆̍̈́́͌̀̄̊́͛͗͒̂̉͗̍̈́̓̇̊̅͂̏̍͆͒͂͗͑͆̌̒̈̽̈́̔́̓̂́̈́̈́́͒̾͗̈̆̾́́̈́̉̿̄̀̐̊̇̽͂̐̾̃̂̃̎͒̅͋̿̾͊͛́͊̎̅̇̎͐̓̐͋̆̔̆̈̈́̀̐̆̉̀̎̆̿̒̆͒̅̅̐̾̉͂̊̇̆̿̄̈̈́͊̍̎̉̑̄̈́͋̉̌̉̆̂̀̉́̂̐͋̇̃̽̍̈̓̓̄̏͑̈́̈́̄́̿́̓̈́̎͑̅̏̈́̓̽̚̚͘͘͘̕̚͘̕͘̕͝͝͝͝͝͠͝͝͝͝͝͠͠͠͠͝͝͠͝ͅͅͅͅͅṃ̴̧̡̧̧̧̡̢̢̨̧̢̢̨̡̛̛̛̛̛̛̛̛͚̼͎̝͍͚̜̼͍͎̙̯͉̙̣͎͎̠͈̱̹̣̤̗͕̪̮̱̱̖̫͓̥͙͚̼̪͚̲͖̪̰͕͎̠̯̳͓͙͇̙̙̱̝͉̥̪͈̺̜̰͚̗̬͓͚̘͇͇̖̻̦̲͙̭̝̟̰͔̻͎̼̙̳̹̻͓͚̫͎̩̰̹̠̱̥͈̬͎̼͕̻̰͖͖̘̰̫͍̼̟̰̟̳̝̥̪̙̬͇̮̤̬̥̗͉͖͉̊́̊̈̇́͌͋̓̀͆̀̓̑̾͂͑͛͒̀̇̾͊̓́̐̇̾̑̇͑̀̒̔͊͊̾͑͆͋͛̂͋̎̓̀̏̓͋̒̃̉͗̋̈́̃̏̉̐̈́͗͌̀͆̌̓̃̎̾̐̀͋͂̎̂̏̐̓͐̌́̃́̑̔̅̑̑͑͆̐̌̇̇̏̈́̐̉̿̍͑̉̓͒̉̉́̓̊̌́̽̽͊̾͌̎̃̎̑̑̄͌̒̓̊̈́͌̊̂̈̓͐̓̓̋̊̃̎͛̋̃͛̑̈́͗̽̽́͑̆̏̽̊̒̏͂͑̆̿̓́͋̄̋͌̊̾̆̽̒͐͘͘̕͘͘̕͘̚͘̚͘͘͜͜͜͝͠͝͠͠͠͠͝͠͝ͅͅͅͅͅp̷̡̧̡̡̡̡̢̨̢̨̧̡̢̡̢̡̛͚̩̟̗͖̥̗̝͓͙͔̳̦̘̹͉͙̜̰̟̰̹͙̪̗̭͙͓̯͓̝̟̞̙̘̟̜̬̤̦̻̝̲͓̗̺͓̺̗̦͍̜͓͇̤̼̲̗̯̫̼̦̬͙̪̥̖̼͙͖̪̙̜̫̜͖̝̮̳̜̪̣͍͉̳̫̥̯̱̰̪̹̬̗̻͉̻͍̺̻̮̤̙̖̳͚͔̠͓̲͖͓̼̳̪̤̺̖̫͎̺̻͉͇̯̙̥̘̫͎̫̮̖͗̅͆̈́̽͌̓̈́̆̊̏̽̎͋͐͆̽́̆͒̀̎͆̓̋͋̓̀̽̓̎̃͑͑͌̂͆̂̏̀͒͐͋͌͆̉̒̐̍̽̿͑́̀̓́̀̅́̑̉̂͆͆̏͆̾̾̉̌́̏̈͗̾͑̒̾͗̓̈́́͊̔̂̎̏́̈́̋̓̾̆̌̃͂̒̿͐͘͘̕͘͘̚̚̚̚̚͜͜͠͝͝͠͠͝͝ͅͅͅͅͅͅl̶̢̢̧̨̡̮̭͙̲̹͎̤̜̺͉͔͚̜̯͎̻̙͖̮̞͇̪̳͙̤̘͔̟̙̘̗̘͎̩̰͙̣̺̬̼̙̯̪͔̜͈̳͔̥̖̜̙̫̹̹̖̯̣͖̹̗̥̦̟̩͈͖̭̫͍̮̗͎͎͍̜͚̬͕̥̣̗̝̖͂͂̋́̓̂̐̈́̾̿̒̑̐́͐͆̍͒̄́̀̃̾̈̏̎̔́̍̄̄̇̀̄͗̑̐̏̏͋͑͊̂̀̌̆͋͋̔̀̐̀̽́̏͋͛͋̀̉̐̋̃̀̏́̐̽̊͑̌̽̔̔͒̈́̔͐̐̿̓̇̆͂̈̈́̓́͒͊́́̉͗̽̀̓̐̑̀̍̿́͛͑̌̂͂͆̀̓̋̊͛͋̀̇̐̂̔̉͂͋̎̌̀̈́̊͗̅͂̿̔͑͌̃͑̾̐͑̐͗͗̉̌͌͆̿̈́͐̈́̽̓̏̓̓̒̽̀͒̽̌̓́̆̈́̃͛̔̎͌̄͒̈̀̏̄̈́̎͐̓̓͗̆̅̓̄͆̔̄̏̿̍̕͘̚͘͘̕̕͘͘͘̕̚͘̚͘͘̚͘͜͜͝͝͠͝͝͝͝͠͝͝͝͝͠͝͠͝͠͠͝͝ͅͅe̴̡̨̡̢̧̧̢̧̡̡̢̨̡̧̢̢̧̧̡̢̧̨̨̢̧̧̢̡̛̛̛͈̪͖̦͈̬͔̳̲̬͈͍̟̻̰̜̮̤͔̗̮̣͍̼͎̠̜̲̲̜̼͕̰͙͓̭̮̭̰̮̦̰̞̘͖̳͙̫̹̩͇̹̰̬̳̱̙͉̭̖̺̘̻̬̬̯͙͕͉͙͍̥̫̼̯̱̬̯̘̖̳̞̖͎͔̺̲̭̻̮͇͇̼̙̬̝̺͇̙͎̤̜̯̜̼̻͎̻̗̲͙̰̹͕̮̗̦̖̳͕͕̪̟̝̠̫̳͉̦̭̝͓͈̣̪̼̰̥̩͈̪̞͖͍͕̰̥̙̖̖̼̹̜̤̟͇̦͎̹̩̪͔̙̱̹̙̖̯͇͚̮͈̖̬͓̬̖̳̬͚̭̩͈̪̫͙̣͓̞̫̦̻͔̖̤͈͔̬̞͎͎̙̰̤͎̥̺̥͇̩̝̝͔̙͚̝̭͙̼̱̙̙̠̟̬̭̞̰̭̯̖͍̫̪̻̜̻̼̩̮̻̥͍͙̭͕̝̰̟̝̘̩̱̣̣̻͍̘͔̼͌̏̿͋̆̊̒̓̃̈̊̅̄̇̔̆̆̐̃̄͒̊̆͑̈́͛̈́́͑͛͂̈́́̐̌̈́̇̅̍̑́̆̒̾͛͐̄́̅̉̓͋̀̐́̓̾͗̇̊̑̎̑̆̓̀̑͌̂͌̃͌̈̎́̃̃̓͑̃͑͗̈́́̋̆͋͂̊́͒͒͒͂͋̍̿̒̓̔̈̒̽̏̄̚̚͘̕̚͘̚͜͜͜͜͜͜͠͝͝͝͝͠ͅͅͅͅͅͅt̸̨̢̡̧̧̡̨̨̧̢̧̛̛̛̛̛̛͔̱̮̘̞̗̩̣͖̭̥̞̗̳͔͍̣̦̰͚͔̩̰̦̳͈̠̬̙͚͚͎̹̖̟͖̲̹̪̼̳̺̠͇̞͖̱̞̠͙͖͖̰̞̭̩̳̤͚̖̼̞̤̮̟̗̜͕̝͈͖͉͖͖͙̤̜͙̖̩̘̗͔͇̜̯̞̙̟͎̙̩̠̭̦̫̺̥̳̯͖̺̯̲̲͚̗̘̟̙͚̫̞̳̟͔̥͍͖͎̟͔͙̎̒͆͌̇͂̒̃͗̽̀̀̊͒͋͒̓̅̋̀͂̇́̅͋̍̾́̔̆͊̆͊̈́́͆͂̾͗̆̾͐͒̏͌̾͑̿͒̎̀͑͊͐̓̄̈́͗̏̽̑͒̾̀̇̆̎́̈́͌̆͑͒̉̀͑̈́̔̈̊̈̏̊̈̾̒̓͌̈́̏̒̌̑̿̑͒̌̇̽̉͊͌̾́͗̄̈́̔̈́̓́̏̀͛̾͗̃̽͆̐̓͛͌̓͗͌̒̉̄̋͌̎́͐͂́̆̐̈́̈̀̾̿̂̈́̾͛͛̈́͋̃̒̿͂̿́͛̓̈́́̊̈́̽̍̔̃̍͂̾̏̔̾̐̽̐̈́͑́̂͆̾͐̓̉̉̀̃̔͐̔́͛̋͐̃̒̈̎͋̋̎͒͗͆̾̂͐̈́̇̅̔͛͛͋͋͒͆̔̏̅͌̔̀̆̇́̓̀̑͒̍́̅͘̕̕͘̚͘̕͘̚̚͘͘͘͘̚̚̕̕̚͜͜͜͝͝͠͝͝͠͝͝͝͝͝͠͝͠͝ͅͅͅȩ̶̧̛̛͎̦͔̩̺̱̪͚̪̰̻̫͎̣͈̦̦̼̭̣͕͉̻̥̗͈̏̇̌͊̌͆̎̎͊̀̇̓͆̏̀͗͊͆̈̃͑͗̄́̓̔́́́̈́̐̌̑̈́͊̂̂̿̋̀̏̇̿̍͌̽̾̃̽̂̽̈͆̀̏͐̃̌̉̋̉͑̄͂̀̓̃̾̈́̈́̈́̈́͑̈́̊̓͂̔̈̔̍͊͗͑͊͋̈́̌̓̑͑̈́͋̄̇̀̓͐̀̅̇͗͑̒̀̒̋́̅͊̄̅̎̉̈́̆̂̀̋̋̅̂̋̍͒́̎͂͛̈́̃̋̽̓̉̑̓̋͛̍̉̎̈́̇́̽̆̅̈́̆̾̽͐͊̆̿͊͆̋͋͐̐̌́̒́̎͂͒̂̆̆̓̏̈́̈́̌̇̑͒̑͐̏̽̇̈̒̅̒͊̈͑͛̈̄̔͋̀̄̉͊̒͊̒̎̍̀̋̍́́͂̑͛̄͊̀̉̓̂̀́̋̉͒̽͒̿͘͘̕͘͘͘̕̚̚̕̕̕̚̕̚͘͝͝͝͠͝͝͝͠͝͝͝͝͝͝͝ͅd̵̨̧̡̢̢̢̧̧̨̨̛̛̛̛̛̛̰̣̟̪̬͚̮͈̹̳̲̩͚̟̖̖̱̮͙̦̥̥̟̰̝̣͚̲͎̤̼͓̺͇̣̪̻̣̖͓͓̝͓̗̘͖̗̜̩̙͈̮͓̲̪̪̳̖̻̩̺̰̝̈́̊̿̍̈́̈́̃͆̂̌̿̒́͒̎̈̏̔͗̃̐̽͊̏̐̒̊̌̂̈́̾͋̾̍̍͛͗̍̉̌̍̈́̈́̂̌̿̂̃̇̈́͗̄͑̉̆̓͑̍̓̅͐̽͐̀͗͒͂͑̒͋̀̏̅́̄̆̿̒̑̋̾͆̑̉͗̈́̈̀̐̐̃̇̍́͑̀̓̊͑̾̇̄̽͋̓͗̓̉͊͗͘̚͘͘͘͘͜͜͠͝͠͠͝ͅͅ";//Just some glitchy text we display at the end.





        void textScroll(int milliseconds, string text, Label label)//TextScroll function, writes text to a label one letter at a time
        {
            if (lastKill == true)//check if the final boss has been defeated
            {
                milliseconds = 1;//If so, lower our delay for text scroll
            }
            label.Text = "";//Clear the label of all text
            for (int x = 0; x < text.Length; x++)
            {
                String character = text.Substring(x, 1);//Get the next character of the text we are writing to the label
                label.Text += character;//Write one letter to the label
                Thread.Sleep(milliseconds);//Small delay before continuing
                label.Update();//Force the label to be redrawn
            }
        }

        void battleEntry()//Animations at the start of the battle
        {
            pbAvatar.Image = Properties.Resources.AvatarBack;//Load the avatar's sprite
            pbAvatar.Refresh();//Force graphics update
            if (SebnicMenu.currentUnitTab == 2)//This if statement will load the correct boss sprite depending on which assignment is being taken
            {
                pbEnemy.Image = Properties.Resources.jackblack;//Jack Black, the Blackjack assignment
                pbEnemy.Refresh();
            }
            else if (SebnicMenu.currentUnitTab == 4)
            {
                pbEnemy.Image = Properties.Resources.hungman;//The Hung Man, hangman assignment
                pbEnemy.Refresh();
            }
            else if (SebnicMenu.currentUnitTab ==5)
            {
                pbEnemy.Image = Properties.Resources.AvatarFront;//The player, final assignment
                pbEnemy.Refresh();
            }

            int xEnemy = 0;//These 4 variables are used in the following for loop to control the location of the two sprites
            int yEnemy = 123;
            int xAvatar = 367;
            int yAvatar = 359;

            for (int z = 0; z < 26; z++)
            {
                this.Refresh();//Force update
                xEnemy += 10;//Move the enemy to the right 10px
                xAvatar -= 10;//Move the player to the left 10px
                pbEnemy.Location = new Point(xEnemy, yEnemy);//Redraw the enemy's sprite
                pbAvatar.Location = new Point(xAvatar, yAvatar);//Redraw the player's sprite             
            }
        }

        void error()//Enemy attack animation
        {
            pbError.Visible = true;//Make the error sprite visible
            int xError = 245;//Set it's position to the start of it's path at the enemy
            int yError = 215;

            for (int z = 0; z < 18; z++)
            {
                this.Refresh();//Force update
                xError -= 10;//Move is on a diagonal path down and to the left
                yError += 10;
                pbError.Location = new Point(xError, yError);//Redraw the sprite
            }
            pbError.Visible = false;//Make the sprite invisible again
            sanity -= 5;//Subtract 5 from the player's health
            lblSanity.Text = "Sanity: " + sanity + "%";//Display the player's current health
            lblSanity.Refresh();//Force update
            pgbSanity.Value = sanity;//Display the health in the progress bar
            pgbSanity.Refresh();//Force update
            errors++;//Add one to the errors total
            lblErrorTotal.Text = "x " + errors;//Display the errors total
            lblErrorTotal.Refresh();//Force update
        }

        void check()//Player attack animation
        {
            pbCheck.Visible = true;//Make the checkmark sprite visible
            int xCheck = 101;//Set the sprite's location to the start o fits path by the player
            int yCheck = 391;

            for (int z = 0; z < 21; z++)
            {
                this.Refresh();//Force update
                xCheck += 10;//Move the sprite on a diagonal path up and to the right
                yCheck -= 10;
                pbCheck.Location = new Point(xCheck, yCheck);//Redraw the sprite
            }
            pbCheck.Visible = false;//Make the sprite invisible again
            completion += 5;//Add 5 to the completion meter
            lblCompletion.Text = "Completion: " + completion + "%";//Display the assignment's completeion
            lblCompletion.Refresh();//Force update
            pgbCompletion.Value = completion;//Display the completion value in the progress bar
            pgbCompletion.Refresh();//Force update
        }

        void newQuestion()//Display a new question
        {           
            if (SebnicMenu.currentUnitTab == 2)//Questions for the blackjack assignment
            {
                /*The code in this function is extremely repetitive*/
                question = r.Next(1, 11);//Get a new question
                if (question == 1)//This if statement will determine which question to display
                //This is SUPER repetitive   
                {
                    textScroll(40, "Which of these is a programming language?", lblDialogue);//Display question and answers in labels
                    lblAttack1.Text = "C#";//Correct
                    lblAttack2.Text = "D#";
                    lblAttack3.Text = "A#";
                    lblAttack4.Text = "Z#";
                }
                else if (question == 2)
                {
                    textScroll(40, "Which file extension do webpage files have?", lblDialogue);
                    lblAttack1.Text = ".exe";
                    lblAttack2.Text = ".html";//Correct
                    lblAttack3.Text = ".web";
                    lblAttack4.Text = ".bat";
                }
                else if (question == 3)
                {
                    textScroll(40, "What tag can you use to identify CSS code in a webpage?", lblDialogue);
                    lblAttack1.Text = "<css>";
                    lblAttack2.Text = "<code>";
                    lblAttack3.Text = "<style>";//Correct
                    lblAttack4.Text = "<script>";
                }
                else if (question == 4)
                {
                    textScroll(40, "What type of file path always begins with a drive letter?", lblDialogue);
                    lblAttack1.Text = "Relative";
                    lblAttack2.Text = "None";
                    lblAttack3.Text = "Both";
                    lblAttack4.Text = "Absolute";//Correct
                }
                else if (question == 5)
                {
                    textScroll(40, "What symbol reprsents the parent directory in a relative path?", lblDialogue);
                    lblAttack1.Text = "../";//Correct
                    lblAttack2.Text = "./";
                    lblAttack3.Text = "*/";
                    lblAttack4.Text = "/.";
                }
                else if (question == 6)
                {
                    textScroll(40, "Which of these is not a number system?", lblDialogue);
                    lblAttack1.Text = "Binary";
                    lblAttack2.Text = "Boolean";//Correct
                    lblAttack3.Text = "Decimal";
                    lblAttack4.Text = "Hex";
                }
                else if (question == 7)
                {
                    textScroll(40, "What is the largest digit in the hexadecimal system?", lblDialogue);
                    lblAttack1.Text = "6";
                    lblAttack2.Text = "15";
                    lblAttack3.Text = "F";//Correct
                    lblAttack4.Text = "H";
                }
                else if (question == 8)
                {
                    textScroll(40, "What property will change whether an object can be seen?", lblDialogue);
                    lblAttack1.Text = "Checked";
                    lblAttack2.Text = "Name";
                    lblAttack3.Text = "Enabled";
                    lblAttack4.Text = "Visible";//Correct
                }
                else if (question == 9)
                {
                    textScroll(40, "Which is not a standard object property?", lblDialogue);
                    lblAttack1.Text = "Alive";//Correct
                    lblAttack2.Text = "Location";
                    lblAttack3.Text = "Size";
                    lblAttack4.Text = "Enabled";
                }
                else if (question == 10)
                {
                    textScroll(40, "What would be the proper name for a textbox accepting the user's name?", lblDialogue);
                    lblAttack1.Text = "Namebox";
                    lblAttack2.Text = "txtName";//Correct
                    lblAttack3.Text = "textName";
                    lblAttack4.Text = "Name";
                }
            }
            else if (SebnicMenu.currentUnitTab == 4)//Questions for the hangman assignment
            {
                question = r.Next(1, 11);
                if (question == 1)
                {
                    textScroll(40, "What does the P in IPO stand for?", lblDialogue);
                    lblAttack1.Text = "Processing";//Correct
                    lblAttack2.Text = "Programming";
                    lblAttack3.Text = "Privacy";
                    lblAttack4.Text = "Pirates";
                }
                else if (question == 2)
                {
                    textScroll(40, "Which is not a part of the algorithm process?", lblDialogue);
                    lblAttack1.Text = "IPO Chart";
                    lblAttack2.Text = "Downloading";//Correct
                    lblAttack3.Text = "Pseudocode";
                    lblAttack4.Text = "Flowchart";
                }
                else if (question == 3)
                {
                    textScroll(40, "In the function 'Substring (int, int)', which int represents the length of the substring?", lblDialogue);
                    lblAttack1.Text = "First";
                    lblAttack2.Text = "Both";
                    lblAttack3.Text = "Second";//Correct
                    lblAttack4.Text = "None";
                }
                else if (question == 4)
                {
                    textScroll(40, "How many parameters can a void-type function have?", lblDialogue);
                    lblAttack1.Text = "None";
                    lblAttack2.Text = "Two";
                    lblAttack3.Text = "One";
                    lblAttack4.Text = "Infinite";//Correct
                }
                else if (question == 5)
                {
                    textScroll(40, "Which type of function cannot return a value?", lblDialogue);
                    lblAttack1.Text = "Void";//Correct
                    lblAttack2.Text = "String";
                    lblAttack3.Text = "Double";
                    lblAttack4.Text = "Boolean";
                }
                else if (question == 6)
                {
                    textScroll(40, "Can an array be resized after it is created?", lblDialogue);
                    lblAttack1.Text = "Only once";
                    lblAttack2.Text = "Never";//Correct
                    lblAttack3.Text = "Yes";
                    lblAttack4.Text = "Only Twice";
                }
                else if (question == 7)
                {
                    textScroll(40, "A minimum of how many for loops are required to implement bubble sorting?", lblDialogue);
                    lblAttack1.Text = "1";
                    lblAttack2.Text = "3";
                    lblAttack3.Text = "2";//Correct
                    lblAttack4.Text = "4";
                }
                else if (question == 8)
                {
                    textScroll(40, "What do you call a function that calls itself?", lblDialogue);
                    lblAttack1.Text = "Algorithm";
                    lblAttack2.Text = "Looping";
                    lblAttack3.Text = "Repetetive";
                    lblAttack4.Text = "Recursive";//Correct
                }
                else if (question == 9)
                {
                    textScroll(40, "If a program contains an instance variable 'x' and a local variable 'x', what keyword is used to identify the instance variable?", lblDialogue);
                    lblAttack1.Text = "This";//Correct
                    lblAttack2.Text = "That";
                    lblAttack3.Text = "Instance";
                    lblAttack4.Text = "Local";
                }
                else if (question == 10)
                {
                    textScroll(40, "What is the final step in the software development life cycle?", lblDialogue);
                    lblAttack1.Text = "Create algorithm";
                    lblAttack2.Text = "Obsolete";//Correct
                    lblAttack3.Text = "Maintenance";
                    lblAttack4.Text = "Identify problem";
                }
            }
            else if (SebnicMenu.currentUnitTab == 5)//Questions for the final assignment. This has questions from both of the previous assignments
            {
                question = r.Next(1, 21);
                if (question == 1)
                {
                    textScroll(40, "Which of these is a programming language?", lblDialogue);
                    lblAttack1.Text = "C#";//Correct
                    lblAttack2.Text = "D#";
                    lblAttack3.Text = "A#";
                    lblAttack4.Text = "Z#";
                }
                else if (question == 2)
                {
                    textScroll(40, "Which file extension do webpage files have?", lblDialogue);
                    lblAttack1.Text = ".exe";
                    lblAttack2.Text = ".html";//Correct
                    lblAttack3.Text = ".web";
                    lblAttack4.Text = ".bat";
                }
                else if (question == 3)
                {
                    textScroll(40, "What tag can you use to identify CSS code in a webpage?", lblDialogue);
                    lblAttack1.Text = "<css>";
                    lblAttack2.Text = "<code>";
                    lblAttack3.Text = "<style>";//Correct
                    lblAttack4.Text = "<script>";
                }
                else if (question == 4)
                {
                    textScroll(40, "What type of file path always begins with a drive letter?", lblDialogue);
                    lblAttack1.Text = "Relative";
                    lblAttack2.Text = "None";
                    lblAttack3.Text = "Both";
                    lblAttack4.Text = "Absolute";//Correct
                }
                else if (question == 5)
                {
                    textScroll(40, "What symbol reprsents the parent directory in a relative path?", lblDialogue);
                    lblAttack1.Text = "../";//Correct
                    lblAttack2.Text = "./";
                    lblAttack3.Text = "*/";
                    lblAttack4.Text = "/.";
                }
                else if (question == 6)
                {
                    textScroll(40, "Which of these is not a number system?", lblDialogue);
                    lblAttack1.Text = "Binary";
                    lblAttack2.Text = "Boolean";//Correct
                    lblAttack3.Text = "Decimal";
                    lblAttack4.Text = "Hex";
                }
                else if (question == 7)
                {
                    textScroll(40, "What is the largest digit in the hexadecimal system?", lblDialogue);
                    lblAttack1.Text = "6";
                    lblAttack2.Text = "15";
                    lblAttack3.Text = "F";//Correct
                    lblAttack4.Text = "H";
                }
                else if (question == 8)
                {
                    textScroll(40, "What property will change whether an object can be seen?", lblDialogue);
                    lblAttack1.Text = "Checked";
                    lblAttack2.Text = "Name";
                    lblAttack3.Text = "Enabled";
                    lblAttack4.Text = "Visible";//Correct
                }
                else if (question == 9)
                {
                    textScroll(40, "Which is not a standard object property?", lblDialogue);
                    lblAttack1.Text = "Alive";//Correct
                    lblAttack2.Text = "Location";
                    lblAttack3.Text = "Size";
                    lblAttack4.Text = "Enabled";
                }
                else if (question == 10)
                {
                    textScroll(40, "What would be the proper name for a textbox accepting the user's name?", lblDialogue);
                    lblAttack1.Text = "Namebox";
                    lblAttack2.Text = "txtName";//Correct
                    lblAttack3.Text = "textName";
                    lblAttack4.Text = "Name";
                }
                else if (question == 11)
                {
                    textScroll(40, "What does the P in IPO stand for?", lblDialogue);
                    lblAttack1.Text = "Processing";//Correct
                    lblAttack2.Text = "Programming";
                    lblAttack3.Text = "Privacy";
                    lblAttack4.Text = "Pirates";
                }
                else if (question == 12)
                {
                    textScroll(40, "Which is not a part of the algorithm process?", lblDialogue);
                    lblAttack1.Text = "IPO Chart";
                    lblAttack2.Text = "Downloading";//Correct
                    lblAttack3.Text = "Pseudocode";
                    lblAttack4.Text = "Flowchart";
                }
                else if (question == 13)
                {
                    textScroll(40, "In the function 'Substring (int, int)', which int represents the length of the substring?", lblDialogue);
                    lblAttack1.Text = "First";
                    lblAttack2.Text = "Both";
                    lblAttack3.Text = "Second";//Correct
                    lblAttack4.Text = "None";
                }
                else if (question == 14)
                {
                    textScroll(40, "How many parameters can a void-type function have?", lblDialogue);
                    lblAttack1.Text = "None";
                    lblAttack2.Text = "Two";
                    lblAttack3.Text = "One";
                    lblAttack4.Text = "Infinite";//Correct
                }
                else if (question == 15)
                {
                    textScroll(40, "Which type of function cannot return a value?", lblDialogue);
                    lblAttack1.Text = "Void";//Correct
                    lblAttack2.Text = "String";
                    lblAttack3.Text = "Double";
                    lblAttack4.Text = "Boolean";
                }
                else if (question == 16)
                {
                    textScroll(40, "Can an array be resized after it is created?", lblDialogue);
                    lblAttack1.Text = "Only once";
                    lblAttack2.Text = "Never";//Correct
                    lblAttack3.Text = "Yes";
                    lblAttack4.Text = "Only Twice";
                }
                else if (question == 17)
                {
                    textScroll(40, "A minimum of how many for loops are required to implement bubble sorting?", lblDialogue);
                    lblAttack1.Text = "1";
                    lblAttack2.Text = "3";
                    lblAttack3.Text = "2";//Correct
                    lblAttack4.Text = "4";
                }
                else if (question == 18)
                {
                    textScroll(40, "What do you call a function that calls itself?", lblDialogue);
                    lblAttack1.Text = "Algorithm";
                    lblAttack2.Text = "Looping";
                    lblAttack3.Text = "Repetetive";
                    lblAttack4.Text = "Recursive";//Correct
                }
                else if (question == 19)
                {
                    textScroll(40, "If a program contains an instance variable 'x' and a local variable 'x', what keyword is used to identify the instance variable?", lblDialogue);
                    lblAttack1.Text = "This";//Correct
                    lblAttack2.Text = "That";
                    lblAttack3.Text = "Instance";
                    lblAttack4.Text = "Local";
                }
                else if (question == 20)
                {
                    textScroll(40, "What is the final step in the software development life cycle?", lblDialogue);
                    lblAttack1.Text = "Create algorithm";
                    lblAttack2.Text = "Obsolete";//Correct
                    lblAttack3.Text = "Maintenance";
                    lblAttack4.Text = "Identify problem";
                }
            }
        }

        void checkAnswer(Label label)//Check the answer
        {
            if (question == 1)//Depending on the question number, the correct label will change. 
            {
                if (label.Name == lblAttack1.Name)//If it's the right label..
                {
                    check();//correct answer
                }
                else
                {
                    error();//else wrong answer
                }
            }
            else if (question == 2)
            {
                if (label.Name == lblAttack2.Name)
                {
                    check();
                }
                else
                {
                    error();
                }
            }
            else if (question == 3)
            {
                if (label.Name == lblAttack3.Name)
                {
                    check();
                }
                else
                {
                    error();
                }
            }
            else if (question == 4)
            {
                if (label.Name == lblAttack4.Name)
                {
                    check();
                }
                else
                {
                    error();
                }
            }
            else if (question == 5)
            {
                if (label.Name == lblAttack1.Name)
                {
                    check();
                }
                else
                {
                    error();
                }
            }
            else if (question == 6)
            {
                if (label.Name == lblAttack2.Name)
                {
                    check();
                }
                else
                {
                    error();
                }
            }
            else if (question == 7)
            {
                if (label.Name == lblAttack3.Name)
                {
                    check();
                }
                else
                {
                    error();
                }
            }
            else if (question == 8)
            {
                if (label.Name == lblAttack4.Name)
                {
                    check();
                }
                else
                {
                    error();
                }
            }
            else if (question == 9)
            {
                if (label.Name == lblAttack1.Name)
                {
                    check();
                }
                else
                {
                    error();
                }
            }
            else if (question == 10)
            {
                if (label.Name == lblAttack2.Name)
                {
                    check();
                }
                else
                {
                    error();
                }
            }
            else if (question == 11)
            {
                if (label.Name == lblAttack1.Name)
                {
                    check();
                }
                else
                {
                    error();
                }
            }
            else if (question == 12)
            {
                if (label.Name == lblAttack2.Name)
                {
                    check();
                }
                else
                {
                    error();
                }
            }
            else if (question == 13)
            {
                if (label.Name == lblAttack3.Name)
                {
                    check();
                }
                else
                {
                    error();
                }
            }
            else if (question == 14)
            {
                if (label.Name == lblAttack4.Name)
                {
                    check();
                }
                else
                {
                    error();
                }
            }
            else if (question == 15)
            {
                if (label.Name == lblAttack1.Name)
                {
                    check();
                }
                else
                {
                    error();
                }
            }
            else if (question == 16)
            {
                if (label.Name == lblAttack2.Name)
                {
                    check();
                }
                else
                {
                    error();
                }
            }
            else if (question == 17)
            {
                if (label.Name == lblAttack3.Name)
                {
                    check();
                }
                else
                {
                    error();
                }
            }
            else if (question == 18)
            {
                if (label.Name == lblAttack4.Name)
                {
                    check();
                }
                else
                {
                    error();
                }
            }
            else if (question == 19)
            {
                if (label.Name == lblAttack1.Name)
                {
                    check();
                }
                else
                {
                    error();
                }
            }
            else if (question == 20)
            {
                if (label.Name == lblAttack2.Name)
                {
                    check();
                }
                else
                {
                    error();
                }
            }

        }

        void checkDeath()//Check if either the player or boss has "died"
        {
            if (completion >= 100)//If the boss has died
            {
                if (SebnicMenu.currentUnitTab == 2)//Display a message, different for each boss
                {
                    textScroll(40, "Jack Black fainted! Unit 2 assignment complete!                    ", lblDialogue);
                    assignmentMark = assignmentMark - (errors * 3);//Calculate the assignment mark
                    Classroom.courseMark = (Classroom.courseMark + assignmentMark) / 2;
                    SebnicMenu frm = new SebnicMenu();//Take the player back to sebnic
                    frm.Show();
                    this.Hide();
                }
                else if (SebnicMenu.currentUnitTab == 4)
                {
                    textScroll(40, "The Hung Man fainted! Unit 4 assignment complete!                    ", lblDialogue);
                    assignmentMark = assignmentMark - (errors * 3);
                    Classroom.courseMark = (Classroom.courseMark + assignmentMark) / 2;
                    SebnicMenu frm = new SebnicMenu();
                    frm.Show();
                    this.Hide();
                }
                else if (SebnicMenu.currentUnitTab == 5)
                {
                    lastKill = true;
                    textScroll(40, TitleScreen.playerName + " fainted! Final assignment com-\n" + glitchText, lblDialogue);
                    assignmentMark = assignmentMark - (errors * 3);
                    Classroom.courseMark = (Classroom.courseMark + assignmentMark) / 2;
                    EndScreen frm = new EndScreen();//Load the end screen. The game is over.
                    frm.Show();
                    this.Hide();
                }

            }
            else if (sanity <= 0)//The player has died
            {
                textScroll(40, "Too many build errors!\n" + TitleScreen.playerName + " lost his mind!\n", lblDialogue);//Display message
                SebnicMenu frm = new SebnicMenu();//take the mback to sebnic
                frm.Show();
                this.Hide();
            }
        }

        public Battle()
        {
            InitializeComponent();
        }
        
        private void Battle_Shown(object sender, EventArgs e)
        {
            battleEntry();//Battle entry animations
            newQuestion();//Givce the user a new question
        }

        private void Battle_Load(object sender, EventArgs e)
        {
            lblName.Text = TitleScreen.playerName;//Load in the player's name            
            lblName.Refresh();//Force update
            if (SebnicMenu.currentUnitTab == 2)//Change the enemy's name and the message, depending on which assignment is being worked on.
            {
                lblEnemy.Text = "Jack Black";
                lblEnemy.Refresh();
                textScroll(40, "Jack Black entered the battle!", lblDialogue);
            }
            else if (SebnicMenu.currentUnitTab == 4)
            {
                lblEnemy.Text = "The Hung Man";
                lblEnemy.Refresh();
                textScroll(40, "The Hung Man entered the battle!\nWhat attack will " + TitleScreen.playerName + " use?", lblDialogue);
            }
            else if (SebnicMenu.currentUnitTab == 5)
            {
                lblEnemy.Text = TitleScreen.playerName;
                lblEnemy.Refresh();
                textScroll(40, TitleScreen.playerName + " entered the battle!\nWhat attack will " + TitleScreen.playerName + " use?", lblDialogue);
            }
        }

        //These next 4 events are for the labels that display the answers. They are nearly identical.
        private void lblAttack1_Click(object sender, EventArgs e)
        {
            checkAnswer(lblAttack1);//Check if this was the right label to click
            checkDeath();//Check if either the player or boss has died
            newQuestion();//New question
        }

        private void lblAttack2_Click(object sender, EventArgs e)
        {
            checkAnswer(lblAttack2);
            checkDeath();
            newQuestion();
        }

        private void lblAttack3_Click(object sender, EventArgs e)
        {
            checkAnswer(lblAttack3);
            checkDeath();
            newQuestion();
        }

        private void lblAttack4_Click(object sender, EventArgs e)
        {
            checkAnswer(lblAttack4);
            checkDeath();
            newQuestion();
        }
    }
}

CLASSROOM Code
***************************************************************************************
/*Interactive Course Simulator: Computer Science 2017
 * June 15th, 2017
 * By Kevin, Owen and Jatin
 * This is the Classroom form, the central element of the game.
 * You can wader around and talk to classmates, as well as use your own computer.*/
using System;
using System.Drawing;
using System.Drawing.Text;
using System.IO;
using System.Threading;
using System.Windows.Forms;

namespace prjICS
{
    public partial class Classroom : Form
    {
        /*****************
        *Global Variables*
        *****************/

        public static int day = 1;//Represents the current day
        public static int unit = 1;//Represents the current unit
        public static double courseMark = 100;//Represents the player's mark in the course

        /*******************
        *Instance Variables*
        *******************/

        static int playerX = 1;//The player's X value on the grid
        static int playerY = 1;//The player's Y value on the grid
        static int lastX = 0;//Previous X value
        static int lastY = 0;//Previous Y value
        static String playerLocation = "1-1";//Current location, combination of X and Y values
        static String computer = "";//Location of the player's computer
        static Boolean welcome = true;//Represents whether or not the welcome message should be shown

        int milliseconds = 30;//Used as a delay in the textScroll() function
        String direction = "up";//The direction the player is facing
        String npcLocation = "";//Location of the object is interacting with
                                //Go to the getNpcLocation() function for more info on how this works
        String lastLocation = "1-1";//The player's previous location
        Boolean canMove = true;//Whether or not the player should be able to move
        Boolean zeeshanFirst = true;//Whether or not we are meeting Zeeshan for the first time
        Boolean onIntro = true;//Whether or not we are in the intro
        Image character = Properties.Resources.AvatarFront;//store the image of our avatar

        /*******
        *Arrays*
        *******/

        String[] loader = new String[10];//Used to load saved data into the game
        String[] badSteps = { "0-2", "1-4", "1-5", "1-6", "1-7", "1-8", "1-10", "1-11", "3-3", "3-5", "3-7", "3-9", "3-11", "4-3", "4-5", "4-7", "4-9", "4-11", "3-12", "5-3", "5-5", "5-7", "5-9", "5-11", "6-3", "6-5", "6-7", "6-9", "7-3", "7-5", "7-7", "7-9", "8-3", "8-5", "8-7", "8-9", "9-1", "9-3", "9-5", "9-7", "9-9", "9-11", "10-1", "10-11",  "11-1", "11-3", "11-4", "11-5", "11-6", "11-7", "11-8", "11-9", "11-10", "11-11" };
        //The above array is a list of all possible locations on the grid we should not be allowed to stand on
        
        /****************************
        *Function without Parameters*
        ****************************/

        void loadData()//Load saved game
        {
            int x = 0;
            string line;
            if (File.Exists("data.txt") == true)//Check if the file exists
            {//If yes, load data
                StreamReader file = new StreamReader("data.txt");//Tell the game what file we want to load from
                while ((line = file.ReadLine()) != null)
                {
                    loader[x] = line;                    
                    if (x == 0)
                    {
                        unit = Convert.ToInt32(line);//Load the current unit
                    }
                    else if (x == 1)
                    {
                        day = Convert.ToInt32(line);//Load the current day
                    }
                    else if (x == 2)
                    {
                        courseMark = Convert.ToInt32(line);//Load the current course mark
                    }
                    else if (x == 3)
                    {
                        TitleScreen.playerName = line;//Load the player's name
                    }
                    else if (x == 4)
                    {
                        computer = line;//Load the player's computer
                    }
                    else if (x == 5)
                    {
                        SebnicMenu.lesson1Attempted = Convert.ToBoolean(line);//Load in the lessons that have been attempted
                    }
                    else if (x == 6)
                    {
                        SebnicMenu.lesson2Attempted = Convert.ToBoolean(line);
                    }
                    else if (x == 7)
                    {
                        SebnicMenu.lesson3Attempted = Convert.ToBoolean(line);
                    }
                    else if (x == 8)
                    {
                        SebnicMenu.lesson4Attempted = Convert.ToBoolean(line);
                    }
                    else if (x == 9)
                    {
                        SebnicMenu.lesson5Attempted = Convert.ToBoolean(line);
                    }
                    x++;
                }
                file.Close();//Close the file. Need this, or else it'll crash if we try to use the file again
            }
        }

        void saveData()//Save the game
        {
            StreamWriter file = new StreamWriter("data.txt");//Tell the game what file we are writing to
            for (int x = 0; x < loader.Length; x++)
            {                
                if (x == 0)
                {
                    loader[x] = unit + "";//Save the current unit
                    file.WriteLine(loader[x]);
                }
                else if (x == 1)
                {
                    loader[x] = day + "";//Save the current day
                    file.WriteLine(loader[x]);
                }
                else if (x == 2)
                {
                    loader[x] = courseMark + "";//Save the current mark
                    file.WriteLine(loader[x]);
                }
                else if (x == 3)
                {
                    loader[x] = TitleScreen.playerName;//Save the player's name
                    file.WriteLine(loader[x]);
                }
                else if (x == 4)
                {
                    loader[x] = computer;//Save the player's computer 
                    file.WriteLine(loader[x]);
                }
                else if (x == 5)
                {
                    loader[x] = SebnicMenu.lesson1Attempted + "";//Save the lessons that the player has attempted
                    file.WriteLine(loader[x]);
                }
                else if (x == 6)
                {
                    loader[x] = SebnicMenu.lesson2Attempted + "";
                    file.WriteLine(loader[x]);
                }
                else if (x == 7)
                {
                    loader[x] = SebnicMenu.lesson3Attempted + "";
                    file.WriteLine(loader[x]);
                }
                else if (x == 8)
                {
                    loader[x] = SebnicMenu.lesson4Attempted + "";
                    file.WriteLine(loader[x]);
                }
                else if (x == 9)
                {
                    loader[x] = SebnicMenu.lesson5Attempted + "";
                    file.WriteLine(loader[x]);
                }
            }
            file.Close();//Close the file
        }   

        void setFont()//Loads our custom font
        {
            PrivateFontCollection pfc = new PrivateFontCollection();//Make a variable to store the new font
            pfc.AddFontFile("acme_explosive.TTF");//Load the new font 
            foreach (Control c in pnlDisplay.Controls)//cycle through each control on the form
            {
                c.Font = new Font(pfc.Families[0], c.Font.Size - 1);//change the font of the current control
            }
        }

        void newLesson()
        {
            foreach (Control c in pnlRoom.Controls)//Loop through each control in the Classroom panel
            {
                if (c is PictureBox)//Check if the current control is a Picturebox
                {
                    if (c.Tag + "" == playerLocation)//Check if it's the picturebox the user is currently in
                    {
                        PictureBox pb = (PictureBox)c;//Create a picturebox-type variable, so we can change picture box-specific properties
                        pb.Image = null;//Draw our stickman in the new box
                    }
                }
            }
            lblDay.Text = "Day " + day;//Dislplay the current day            
            lblName.Text = TitleScreen.playerName;//Display the player's name
            lblSpeaker.Text = "";//Clear the speaker and dialogue labels
            lblDialogue.Text = "";
            this.ActiveControl = null;//Set the focus to nothing
            canMove = true;//By default you can mvoe
            playerX = 1;//Set the player's X and Y coordinates
            playerY = 1;
            playerLocation = "1-1";//And set the playe's first position
            lastX = 1;//Set the last position variables, these will change once the player starts moving around.
            lastY = 1;
            lastLocation = "1-1";
            pbUser1.Image = Properties.Resources.AvatarFront;//Load in the players' sprite
            direction = "up";//Set the character's direction to up
        }

        void getCurrentLocation()//Find the player's location
        {
            if (playerX >= 10)//Determine whether or not the X value is 2 digits long
            {
                playerX = Convert.ToInt32(playerLocation.Substring(0, 2));//Add the X value to playerLocation
                if (playerY >=10)//Check if the Y value is also 2 digits
                {
                    playerY = Convert.ToInt32(playerLocation.Substring(3, 2));//Add the Y value to playerLocation
                }
                else
                {
                    playerY = Convert.ToInt32(playerLocation.Substring(3, 1));//Add the Y value to playerLocation
                }
            }
            else
            {
                playerX = Convert.ToInt32(playerLocation.Substring(0, 1));//Add the X value to playerLocation
                if (playerY >= 10)//Check if the Y value is also 2 digits
                {
                    playerY = Convert.ToInt32(playerLocation.Substring(2, 2));//Add the Y value to playerLocation
                }
                else
                {
                    playerY = Convert.ToInt32(playerLocation.Substring(2, 1));//Add the Y value to playerLocation
                }
            }   

            foreach (Control c in pnlRoom.Controls)//Loop through each control in the Classroom panel
            {
                if (c is PictureBox)//Check if the current control is a Picturebox
                {
                    if (c.Tag + "" == playerLocation)//Check if it's the picturebox the user is currently in
                    {//^Each picturebox has a tag which represents it's location on the grid
                        PictureBox pb = (PictureBox)c;//Create a picturebox-type variable, so we can change picture box-specific properties
                        pb.Image = null;//Clear that picturebox
                    }
                }
            }
        }

        /*The next 4 functions (moveDown, moveUp, moveLeft and moveRight) are all very similar. The major difference is whether 1 is added to or subtacted from playerX or playerY*/
        /*The variable that is changed depends on which way the user is moving*/
        void moveDown()
        {
            lastX = playerX;//Update our last X and last Y
            lastY = playerY;
            playerY += 1;//Add one to the Y value
            playerLocation = playerX + "-" + playerY;//Update the current location
            lastLocation = lastX + "-" + lastY;//Update the last location
            checkLocation();//Check location. This uses the last location to determine if we should be standing in the current spot
            playerLocation = playerX + "-" + playerY;//After checking the location, update the current and last locations again
            lastLocation = lastX + "-" + lastY;

            foreach (Control c in pnlRoom.Controls)//Loop through each control in the Classroom panel
            {
                if (c is PictureBox)//Check if the current control is a Picturebox
                {
                    if (c.Tag + "" == playerLocation)//Check if it's the picturebox the user is currently in
                    {
                        PictureBox pb = (PictureBox)c;//Create a picturebox-type variable, so we can change picture box-specific properties
                        pb.Image = character;//Draw our avatar in the new box
                    }
                }
            }
        }

        void moveUp()
        {
            lastX = playerX;
            lastY = playerY;
            playerY -= 1;
            playerLocation = playerX + "-" + playerY;
            lastLocation = lastX + "-" + lastY;
            checkLocation();
            playerLocation = playerX + "-" + playerY;
            lastLocation = lastX + "-" + lastY;

            foreach (Control c in pnlRoom.Controls)//Loop through each control in the Classroom panel
            {
                if (c is PictureBox)//Check if the current control is a Picturebox
                {
                    if (c.Tag + "" == playerLocation)//Check if it's the picturebox the user is currently in
                    {
                        PictureBox pb = (PictureBox)c;//Create a picturebox-type variable, so we can change picture box-specific properties
                        pb.Image = character;//Draw our avatar in the new box
                    }
                }
            }
        }

        void moveRight()
        {
            lastX = playerX;
            lastY = playerY;
            playerX += 1;
            playerLocation = playerX + "-" + playerY;
            lastLocation = lastX + "-" + lastY;
            checkLocation();
            playerLocation = playerX + "-" + playerY;
            lastLocation = lastX + "-" + lastY;

            foreach (Control c in pnlRoom.Controls)//Loop through each control in the Classroom panel
            {
                if (c is PictureBox)//Check if the current control is a Picturebox
                {
                    if (c.Tag + "" == playerLocation)//Check if it's the picturebox the user is currently in
                    {
                        PictureBox pb = (PictureBox)c;//Create a picturebox-type variable, so we can change picture box-specific properties
                        pb.Image = character;//Draw our avatar in the new box
                    }
                }
            }
        }

        void moveLeft()
        {
            lastX = playerX;
            lastY = playerY;
            playerX -= 1;
            playerLocation = playerX + "-" + playerY;
            lastLocation = lastX + "-" + lastY;
            checkLocation();
            playerLocation = playerX + "-" + playerY;
            lastLocation = lastX + "-" + lastY;

            foreach (Control c in pnlRoom.Controls)//Loop through each control in the Classroom panel
            {
                if (c is PictureBox)//Check if the current control is a Picturebox
                {
                    if (c.Tag + "" == playerLocation)//Check if it's the picturebox the user is currently in
                    {
                        PictureBox pb = (PictureBox)c;//Create a picturebox-type variable, so we can change picture box-specific properties
                        pb.Image = character;//Draw our avatar in the new box
                    }
                }
            }
        }            

        void checkLocation()//To check if we should be standing in the current spot
        {
            for (int x = 0; x < badSteps.Length; x++)
            {
                if (playerLocation == badSteps[x])//If we are standing in a bad spot, move us back to our last location
                {
                    playerX = lastX;
                    playerY = lastY;                   
                }
            }
            //If we aren't in a bad square, check if went out of bounds
            if (playerY > 12 && playerX < 3)//Bottom of room, first 2 columns 
            {
                playerY = 12;
            }
            else if (playerY > 11 && playerX>2)//Bottom of room, everywhere else
            {
                playerY = 11;
            }
            else if (playerY < 1)//Top of room
            {
                playerY = 1;
            }            
            else if (playerX <= 0 && playerY == 1)//Left Side, first row
            {
                playerX = 0;
            }
            else if(playerX < 1 && playerY != 1)//Left side, everywhere else
            {
                playerX = 1;
            }
            else if (playerX > 11)//Right side
            {
                playerX = 11;
            }

        }

        void getNpcLocation()//Get the location of the object we are interacting with
        {
            npcLocation = "";
            if (direction == "up")//Depending on which direction the character is facing, get the location of the object we are interacting with.
            {
                npcLocation = playerX + "-" + (playerY - 1);
            }
            else if (direction == "down")
            {
                npcLocation = playerX + "-" + (playerY + 1);
            }
            else if (direction == "right")
            {
                npcLocation = (playerX + 1) + "-" + playerY;
            }
            else if (direction == "left")
            {
                npcLocation = (playerX - 1) + "-" + playerY;
            }
        }

        void interact()
        {
            getNpcLocation();//Gets the location of the object we are interacting with
            if (unit == 1 && day == 1)//Check if it's the first day
            {
                introPt2(npcLocation);//Special interactions for the first day
            }
            else
            {
                if (npcLocation == computer)//Check if the object is your assigned computer
                {
                    SebnicMenu frm = new SebnicMenu();//Show sebnic
                    frm.Show();
                    this.Hide();
                }
                else if (npcLocation == "-1-1")//Check if the object is the door
                {
                    textScroll(milliseconds, "Mr. Krnic", lblSpeaker);//Mr. Krnic tells you to come back
                    textScroll(milliseconds, "Hey! Class isn't over yet!", lblDialogue);
                    canMove = true;
                }
                else if (npcLocation == "0-12")//Check if the object is Zeeshan's cabinet
                {
                    if (onIntro == false)//check to make sure we're not on the intro, he says different stuff then
                    {
                        getCurrentLocation();//Get our location
                        moveRight();//Move us to the right so Z can pop out of the cabinet
                        pbAvatar.Image = Properties.Resources.NPC3;
                        pbUser12.Image = Properties.Resources.NPC3SideR;//Load in Z's sprite
                        this.Update();//Force graphic update
                        textScroll(milliseconds, "Zeeshan", lblSpeaker);//Z asks if you want help with stuff
                        textScroll(milliseconds, "Hey, wanna buy some code?          ", lblDialogue);
                        pbUser12.Image = null;//Z leaves
                        canMove = true;
                    }
                }
                /*The following cases are very repetitive, so only the first will be documented in full*/
                else if (npcLocation == "1-4")//Check if the object is Christopher
                {
                    pbAvatar.Image = Properties.Resources.NPC13Front;//Depending on which side of Christopher we are on, he will turn in a different direction.
                    if (direction == "down")
                    {
                        pbUser4.Image = Properties.Resources.NPC13Back;
                    }
                    else if (direction == "left")
                    {
                        pbUser4.Image = Properties.Resources.NPC13SideR;
                    }
                    this.Update();//Force graphic update
                    textScroll(milliseconds, "Christopher", lblSpeaker);//Christopher's message
                    textScroll(milliseconds, "Happy Birthday!          ", lblDialogue);
                    canMove = true;
                    pbUser4.Image = Properties.Resources.NPC13;//Reset his sprite
                }
                else if (npcLocation == "1-5")
                {
                    pbAvatar.Image = Properties.Resources.NPC20Front;
                    pbUser5.Image = Properties.Resources.NPC20SideR;
                    this.Update();//Force graphic update
                    textScroll(milliseconds, "Carson", lblSpeaker);//Carson's message
                    textScroll(milliseconds, "Wanna buy a fidget spinner?          ", lblDialogue);
                    canMove = true;
                    pbUser5.Image = Properties.Resources.NPC20;

                }
                else if (npcLocation == "1-6")
                {
                    pbAvatar.Image = Properties.Resources.NPC16Front;
                    pbUser6.Image = Properties.Resources.NPC16SideR;
                    this.Update();//Force graphic update
                    textScroll(milliseconds, "Mitchell", lblSpeaker);//Mitchell's message
                    textScroll(milliseconds, "Gabe is a whale.          ", lblDialogue);
                    canMove = true;
                    pbUser6.Image = Properties.Resources.NPC16;

                }
                else if (npcLocation == "1-7")
                {
                    pbAvatar.Image = Properties.Resources.NPC6Front;
                    pbUser7.Image = Properties.Resources.NPC6SideR;
                    this.Update();//Force graphic update
                    textScroll(milliseconds, "Matthew", lblSpeaker);//Matt's message
                    textScroll(milliseconds, "Computer science is pretty decent.          ", lblDialogue);
                    canMove = true;
                    pbUser7.Image = Properties.Resources.NPC6Side;

                }
                else if (npcLocation == "1-8")
                {
                    pbAvatar.Image = Properties.Resources.NPC15Front;
                    if (direction == "up")
                    {

                        pbUser8.Image = Properties.Resources.NPC15Front;
                    }
                    else if (direction == "left")
                    {
                        pbUser8.Image = Properties.Resources.NPC15SideR;
                    }
                    pbAvatar.Image = Properties.Resources.NPC15Front;
                    pbUser8.Image = Properties.Resources.NPC15SideR;
                    this.Update();//Force graphic update
                    textScroll(milliseconds, "Kevin", lblSpeaker);//Kevin's message
                    textScroll(milliseconds, "Varuunan shut off my computer!          ", lblDialogue);
                    canMove = true;
                    pbUser8.Image = Properties.Resources.NPC15;

                }
                else if (npcLocation == "1-10")
                {
                    pbAvatar.Image = Properties.Resources.NPC7Front;
                    if (direction == "down")
                    {
                        pbUser10.Image = Properties.Resources.NPC7Back;
                    }
                    else if (direction == "left")
                    {
                        pbUser10.Image = Properties.Resources.NPC7SideR;
                    }
                    this.Update();//Force graphic update
                    textScroll(milliseconds, "Owen", lblSpeaker);//Owen's message
                    textScroll(milliseconds, "I broke my computer….again!!          ", lblDialogue);
                    canMove = true;
                    pbUser10.Image = Properties.Resources.NPC7;

                }
                else if (npcLocation == "1-11")
                {
                    pbAvatar.Image = Properties.Resources.NPC9;
                    if (direction == "up")
                    {
                        pbUser11.Image = Properties.Resources.NPC9;
                    }
                    else if (direction == "left")
                    {
                        pbUser11.Image = Properties.Resources.NPC9sideR;
                    }
                    this.Update();//Force graphic update
                    textScroll(milliseconds, "Jatin", lblSpeaker);//Jatin's message
                    textScroll(milliseconds, "I learned that 0==1 is actually false!          ", lblDialogue);
                    canMove = true;
                    pbUser11.Image = Properties.Resources.NPC9side;

                }
                else if (npcLocation == "3-11")
                {
                    pbAvatar.Image = Properties.Resources.NPC1;
                    if (direction == "down")
                    {
                        pbUser31.Image = Properties.Resources.NPC1Back;
                    }
                    else if (direction == "right")
                    {
                        pbUser31.Image = Properties.Resources.NPC1Side;
                    }
                    this.Update();//Force graphic update
                    textScroll(milliseconds, "Elisa", lblSpeaker);//Elisa's message
                    textScroll(milliseconds, "As a friend.          ", lblDialogue);
                    canMove = true;
                    pbUser31.Image = Properties.Resources.NPC1;

                }
                else if (npcLocation == "4-11")
                {
                    pbAvatar.Image = Properties.Resources.NPC14;
                    pbUser38.Image = Properties.Resources.NPC14back;
                    this.Update();//Force graphic update
                    textScroll(milliseconds, "Madison", lblSpeaker);//Madison's message
                    textScroll(milliseconds, "I try but it never works out.          ", lblDialogue);
                    canMove = true;
                    pbUser38.Image = Properties.Resources.NPC14;

                }
                else if (npcLocation == "5-11")
                {
                    pbAvatar.Image = Properties.Resources.NPC2;
                    if (direction == "down")
                    {
                        pbUser45.Image = Properties.Resources.NPC2Back;
                    }
                    else if (direction == "left")
                    {
                        pbUser45.Image = Properties.Resources.NPC2SideR;
                    }
                    this.Update();//Force graphic update
                    textScroll(milliseconds, "Niyanta", lblSpeaker);//Niyanta's message
                    textScroll(milliseconds, "I wish I wasn't here.          ", lblDialogue);
                    canMove = true;
                    pbUser45.Image = Properties.Resources.NPC2;
                }
                else if (npcLocation == "9-11")
                {
                    pbAvatar.Image = Properties.Resources.NPC8;
                    if (direction == "down")
                    {
                        pbUser73.Image = Properties.Resources.NPC8Back;
                    }
                    else if (direction == "right")
                    {
                        pbUser73.Image = Properties.Resources.NPC8Side;
                    }
                    this.Update();//Force graphic update
                    textScroll(milliseconds, "Peter", lblSpeaker);//Peter's message
                    textScroll(milliseconds, "What's up?          ", lblDialogue);
                    canMove = true;
                    pbUser73.Image = Properties.Resources.NPC8;
                }
                else if (npcLocation == "10-11")
                {
                    pbAvatar.Image = Properties.Resources.NPC5;
                    pbUser83.Image = Properties.Resources.NPC5Back;
                    this.Update();//Force graphic update
                    textScroll(milliseconds, "Nick", lblSpeaker);//Nick's message
                    textScroll(milliseconds, "Ey boy, nice to meet you!          ", lblDialogue);
                    canMove = true;
                    pbUser83.Image = Properties.Resources.NPC5;
                }
                else if (npcLocation == "11-10")
                {
                    pbAvatar.Image = Properties.Resources.NPC11Front;
                    pbUser92.Image = Properties.Resources.NPC11;
                    this.Update();//Force graphic update
                    textScroll(milliseconds, "Gawshan", lblSpeaker);//Gawshan's message
                    textScroll(milliseconds, "This game’s a joke, man!          ", lblDialogue);
                    canMove = true;
                    pbUser92.Image = Properties.Resources.NPC11SideR;
                }
                else if (npcLocation == "11-9")
                {
                    pbAvatar.Image = Properties.Resources.NPC24Front;
                    pbUser91.Image = Properties.Resources.NPC24SideL;
                    this.Update();//Force graphic update
                    textScroll(milliseconds, "Sharuga", lblSpeaker);//Sharuga's message
                    textScroll(milliseconds, "Why am I here?          ", lblDialogue);
                    canMove = true;
                    pbUser91.Image = Properties.Resources.NPC24SideR;
                }
                else if (npcLocation == "11-8")
                {
                    pbAvatar.Image = Properties.Resources.NPC17Front;
                    pbUser90.Image = Properties.Resources.NPC17;
                    this.Update();//Force graphic update
                    textScroll(milliseconds, "Vipneet", lblSpeaker);//Vipneet's message
                    textScroll(milliseconds, "'I still think I am the greatest.' - Kanye West          ", lblDialogue);
                    canMove = true;
                    pbUser90.Image = Properties.Resources.NPC17SideR;
                }
                else if (npcLocation == "11-7")
                {
                    pbAvatar.Image = Properties.Resources.NPC18Front;
                    pbUser89.Image = Properties.Resources.NPC18;
                    this.Update();//Force graphic update
                    textScroll(milliseconds, "Mahaksh", lblSpeaker);//Mahaksh's message
                    textScroll(milliseconds, "I'm not ready yet.          ", lblDialogue);
                    canMove = true;
                    pbUser89.Image = Properties.Resources.NPC18SideR;
                }
                else if (npcLocation == "11-6")
                {
                    pbAvatar.Image = Properties.Resources.NPC19Front;
                    pbUser88.Image = Properties.Resources.NPC19;
                    this.Update();//Force graphic update
                    textScroll(milliseconds, "Chris", lblSpeaker);//Chris's message
                    textScroll(milliseconds, "...          ", lblDialogue);
                    canMove = true;
                    pbUser88.Image = Properties.Resources.NPC19SideR;
                }
                else if (npcLocation == "11-5")
                {
                    pbAvatar.Image = Properties.Resources.NPC22Front;
                    pbUser87.Image = Properties.Resources.NPC22;
                    this.Update();//Force graphic update
                    textScroll(milliseconds, "Bilal", lblSpeaker);//Bilal's message
                    textScroll(milliseconds, "ulu top kek dat cheffy          ", lblDialogue);
                    canMove = true;
                    pbUser87.Image = Properties.Resources.NPC22SideR;
                }
                else if (npcLocation == "11-4")
                {
                    pbAvatar.Image = Properties.Resources.NPC21Front;
                    pbUser86.Image = Properties.Resources.NPC21;
                    this.Update();//Force graphic update
                    textScroll(milliseconds, "Ethan", lblSpeaker);//Ethan's message
                    textScroll(milliseconds, "Wow Ethan! Great moves, keep it up, proud of you!          ", lblDialogue);
                    canMove = true;
                    pbUser86.Image = Properties.Resources.NPC21SideR;
                }
                else if (npcLocation == "11-3")
                {
                    pbAvatar.Image = Properties.Resources.NPC10Front;
                    if (direction == "down")
                    {
                        pbUser85.Image = Properties.Resources.NPC10back;
                    }
                    else if (direction == "right")
                    {
                        pbUser85.Image = Properties.Resources.NPC10;
                    }
                    this.Update();//Force graphic update
                    textScroll(milliseconds, "Josh", lblSpeaker);//Josh's message
                    textScroll(milliseconds, "Forehead.          ", lblDialogue);
                    canMove = true;
                    pbUser85.Image = Properties.Resources.NPC10SideR;
                }
                else if (npcLocation == "9-1")
                {
                    pbAvatar.Image = Properties.Resources.KRNIC;
                    if (direction == "up")
                    {
                        pbUser85.Image = Properties.Resources.KRNIC;
                    }
                    else if (direction == "right")
                    {
                        pbUser85.Image = Properties.Resources.KRNICSIDE;
                    }
                    this.Update();//Force graphic update
                    textScroll(milliseconds, "Mr. Krnic", lblSpeaker);//Mr. Krnic's message
                    textScroll(milliseconds, "Everybody listen up!          ", lblDialogue);
                    canMove = true;
                    pbUser85.Image = Properties.Resources.KRNIC;
                }
            }
        }

        void intro()//A sort of tutorial
        {
            if (unit == 1 && day == 1)//Check if it's the first day
            {
                if (welcome == true)
                {
                    pbUser67.Image = Properties.Resources.KRNICSIDE;
                    pbAvatar.Image = Properties.Resources.KRNIC;
                    this.Refresh();
                    textScroll(milliseconds, "Mr. Krnic", lblSpeaker);//Mr. Krnic's welcome mesage
                    textScroll(milliseconds, "Hello there,  " + TitleScreen.playerName + ". Welcome to Computer Science!\nYou're a little late to class, so go stand by one of the open computers. The school has had some budget cuts, so we have no chairs. That computer will be yours for the rest of the semester, so choose wisely.\n                      \nOne more thing. Do NOT look in the back closet under any circumstances.          ", lblDialogue);
                    pbUser67.Image = Properties.Resources.KRNIC;
                    pbAvatar.Image = null;
                    this.Refresh();
                    textScroll(milliseconds, "Objective:", lblSpeaker);//Tell you to find a computer
                    textScroll(milliseconds, "Find a computer.", lblDialogue);
                    canMove = true;//We can move now
                    welcome = false;//Welcome message is over
                }
            }
        }

        /**************************
        *Functions with Parameters*
        **************************/

        void introPt2(string npcLocation)//Second part of the tutorial, contains the special interactions for the first day.
        {
            onIntro = true; //Tell the game we're in the intro  
            if (npcLocation == "0-3" || npcLocation == "0-9" || npcLocation == "6-12" || npcLocation == "7-12" || npcLocation == "8-12")
            {//^Check if the object we are interacting with is one of the open computers^

                computer = npcLocation;//Assign the location of the computer to the computer variable, this allows us to remember which computer is ours.
                pbAvatar.Image = Properties.Resources.KRNIC;
                this.Refresh();
                textScroll(30, "Mr. Krnic", lblSpeaker);//Mr. Krnic tells you about sebnic
                textScroll(40, "Very good!\nWhen you go to use your computer, you'll see the SEBNIC menu pop up on your screen.\nFrom this menu you can learn today's lesson, take a test, or work on any projects you may have.\nThat's all I have to say, so get to work!          ", lblDialogue);
                pbAvatar.Image = null;
                this.Refresh();
                canMove = false;
                SebnicMenu frm = new SebnicMenu();//Load sebnic
                frm.Show();
                this.Hide();
            }

            else if (npcLocation == "3-12")//Check if the location is the computer by the bottom left
            {
                if (lblSpeaker.Text != "Objective:")//Check to see if lblSpeaker is already displaying "Objective:", we don't want to write it again
                {
                    textScroll(milliseconds, "Objective:", lblSpeaker);//Display "Objective:", the label is saying something else
                }
                textScroll(milliseconds, "Nice try, but this computer is taken.          ", lblDialogue);//Tell the user to get a computer that isn't taken
                textScroll(milliseconds, "Find a computer.", lblDialogue);
                canMove = true;
            }
            else if (npcLocation == "10-1")//Check if the location is Mr. Krnic's computer.
            {
                pbAvatar.Image = Properties.Resources.KRNIC;
                this.Refresh();
                textScroll(milliseconds, "Mr. Krnic", lblSpeaker);//Mr. Krnic won't let you take his computer. Oh well.
                textScroll(milliseconds, "Hey! You can't take my computer!          ", lblDialogue);
                pbAvatar.Image = null;
                this.Refresh();
                textScroll(milliseconds, "Objective:", lblSpeaker);
                textScroll(milliseconds, "Find a computer.", lblDialogue);
                canMove = true;
            }
            else if (npcLocation == "-1-1")//Check if the user is trying to leave the room
            {
                pbAvatar.Image = Properties.Resources.KRNIC;
                this.Refresh();
                textScroll(milliseconds, "Mr. Krnic", lblSpeaker);//Mr. Krnic tells them to come back
                textScroll(milliseconds, "Come back! Class just started!          ", lblDialogue);
                pbAvatar.Image = null;
                this.Refresh();
                textScroll(milliseconds, "Objective:", lblSpeaker);
                textScroll(milliseconds, "Find a computer.", lblDialogue);
                canMove = true;
            }
            else if (npcLocation == "0-12")//Check if the location is Z's cabinet
            {
                if (zeeshanFirst == true)//Check if this is our first time meeting him
                {

                    if (TitleScreen.playerName == "Zeeshan")//Easter egg. If your name is Zeeshan, he says a slightly different message. You'll see.
                    {
                        getCurrentLocation();
                        moveRight();
                        pbAvatar.Image = Properties.Resources.NPC3;
                        pbUser12.Image = Properties.Resources.NPC3SideR;
                        this.Refresh();
                        textScroll(milliseconds, "Zeeshan", lblSpeaker);
                        textScroll(milliseconds, "Hey there, I'm Zeeshan. I'm technically not - wait a minute, how can you be Zeeshan? I'm Zeeshan. We can't both be Zeeshan, there can be only one!           ", lblDialogue);
                        pbAvatar.Image = null;
                        pbUser12.Image = null;
                        this.Refresh();
                        zeeshanFirst = false;
                        canMove = true;
                        MessageBox.Show("You died!");
                        TitleScreen frm = new TitleScreen();
                        frm.Show();
                        this.Hide();
                    }
                    else//Base case, when your name is not "Zeeshan"
                    {
                        getCurrentLocation();//Get the player's location
                        moveRight();//Move us to the right
                        pbAvatar.Image = Properties.Resources.NPC3;
                        pbUser12.Image = Properties.Resources.NPC3SideR;
                        this.Refresh();
                        textScroll(milliseconds, "Zeeshan", lblSpeaker);//Write Z's message
                        textScroll(milliseconds, "Hey there, I'm Zeeshan. I'm technically not in this class, but who cares, right?\nListen, if you come back later, maybe I can help you if you're having trouble. Don't think it comes free, though.\nBye!          ", lblDialogue);
                        pbAvatar.Image = null;
                        pbUser12.Image = null;
                        this.Refresh();
                        zeeshanFirst = false;//Tell the game we've already met him.
                        canMove = true;
                    }
                }
                else//If we've already met Z
                {
                    pbAvatar.Image = Properties.Resources.AvatarFront;
                    this.Refresh();
                    textScroll(milliseconds, "You", lblSpeaker);//You thoughts on Z
                    textScroll(milliseconds, "Looks like Zeeshan isn't coming back today...         ", lblDialogue);
                    pbAvatar.Image = null;
                    this.Refresh();
                    canMove = true;
                }
            }
            else if (npcLocation == "12-2")//Check if we're looking at the other cabinet by Mr. Krnic's desk
            {
                //do nothing, we have code for this in the interact() function
            }
            else//else we are interacting with nothing important, tell the user they need to find a computer.
            {
                if (lblSpeaker.Text != "Objective:")
                {
                    textScroll(milliseconds, "Objective:", lblSpeaker);
                }
                textScroll(milliseconds, "That is not a computer.          ", lblDialogue);
                textScroll(milliseconds, "Find a computer.", lblDialogue);
                canMove = true;
            }
        }

        void textScroll(int milliseconds, string text, Label label)//This function draws text in a label one letter at a time
        {
            canMove = false;//Can't move during dialogue
            label.Text = "";//Clear the label
            for (int x = 0; x < text.Length; x++)//Loop through each character in the string
            {
                String character = text.Substring(x, 1);//Get a single character, using the substring function
                label.Text += character;//Write the character
                Thread.Sleep(milliseconds);//Delay
                label.Update();//Force graphic update
            }
        }

        /**************
        *End Functions*
        **************/

        public Classroom()
        {
            InitializeComponent();
        }

        private void Classroom_Load(object sender, EventArgs e)//When the form loads
        {
            setFont();//Set the font of the controls
            if (TitleScreen.loadLastGame == true)//If the player selected load game on the title screen...
            {
                loadData();//...load the saved game
            }
            pbUser1.Image = Properties.Resources.AvatarFront;//Load the avatar
            this.Refresh();//Force update
            lblDay.Text = "Day " + day;//Load the current day         
            lblName.Text = TitleScreen.playerName;//Load the player's name
            this.ActiveControl = null;//Set the focus to none
            onIntro = false;//Not on the intro
        }

        private void Classroom_Shown(object sender, EventArgs e)//When the form is shown on the screen, after it loads
        {
            this.Refresh();//force update
            if (unit == 1 && day == 1)//if its the first day...
            {
                intro();//...do the intro
            }
            else
            {
                newLesson();//...or else its just a regular day
            }
        }

        private void Classroom_KeyDown(object sender, KeyEventArgs e)
        {
            if (canMove == true)//If we are allowed to move
            {
                if (e.KeyCode == Keys.Up || e.KeyCode == Keys.Down || e.KeyCode == Keys.Left || e.KeyCode == Keys.Right || e.KeyCode == Keys.W || e.KeyCode == Keys.A || e.KeyCode == Keys.S || e.KeyCode == Keys.D)
                {//^You can use both the arrow keys and WASD to move
                    getCurrentLocation();//Get our location
                    if (e.KeyCode == Keys.Down || e.KeyCode == Keys.S)
                    {
                        character = Properties.Resources.AvatarFront;//Change the sprite depending on the direction we are facing
                        direction = "down";//Change the direction variable to reflect this change
                        moveDown();//move the player in the desired direction
                    }
                    else if (e.KeyCode == Keys.Up || e.KeyCode == Keys.W)
                    {
                        character = Properties.Resources.AvatarBack;
                        direction = "up";
                        moveUp();
                    }
                    else if (e.KeyCode == Keys.Left || e.KeyCode == Keys.A)
                    {
                        character = Properties.Resources.AvatarSideL;
                        direction = "left";
                        moveLeft();
                    }
                    else if (e.KeyCode == Keys.Right || e.KeyCode == Keys.D)
                    {
                        character = Properties.Resources.AvatarSideR;
                        direction = "right";
                        moveRight();
                    }

                }
                else if (e.KeyCode == Keys.Enter || e.KeyCode == Keys.Space)//Enter or space to interact
                {
                    interact();//initiate interaction with the object
                }
            }
        }

        private void Classroom_FormClosed(object sender, FormClosedEventArgs e)//When the form is closed
        {
            saveData();//Save the game
            Application.Exit();//Close the program
        }

        private void lblHelp_Click(object sender, EventArgs e)//When the help button is clicked
        {
            HelpMenu frm = new HelpMenu();//Show the help menu
            frm.Show();
        }

        private void lblQuit_Click(object sender, EventArgs e)//When the user hits the "quit" button
        {            
            saveData();//Save the game
            Application.Exit();//Close the program
        }
    }
}